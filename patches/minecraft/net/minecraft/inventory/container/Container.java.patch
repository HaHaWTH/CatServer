--- a/net/minecraft/inventory/container/Container.java
+++ b/net/minecraft/inventory/container/Container.java
@@ -2,7 +_,10 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
@@ -14,6 +_,7 @@
 import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.item.ItemStack;
+import net.minecraft.network.play.server.SSetSlotPacket;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.IIntArray;
 import net.minecraft.util.IWorldPosCallable;
@@ -21,13 +_,22 @@
 import net.minecraft.util.NonNullList;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.registry.Registry;
+import net.minecraft.util.text.ITextComponent;
+import net.minecraft.util.text.StringTextComponent;
 import net.minecraft.world.World;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import org.bukkit.craftbukkit.v1_16_R3.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.v1_16_R3.inventory.CraftInventory;
+import org.bukkit.craftbukkit.v1_16_R3.inventory.CraftItemStack;
+import org.bukkit.event.Event;
+import org.bukkit.event.inventory.InventoryDragEvent;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.inventory.InventoryView;
 
 public abstract class Container {
-   private final NonNullList<ItemStack> lastSlots = NonNullList.create();
-   public final List<Slot> slots = Lists.newArrayList();
+   public NonNullList<ItemStack> lastSlots = NonNullList.create(); // private->public CraftBukkit
+   public List<Slot> slots = Lists.newArrayList();
    private final List<IntReferenceHolder> dataSlots = Lists.newArrayList();
    @Nullable
    private final ContainerType<?> menuType;
@@ -40,6 +_,82 @@
    private final List<IContainerListener> containerListeners = Lists.newArrayList();
    private final Set<PlayerEntity> unSynchedPlayers = Sets.newHashSet();
 
+   public boolean checkReachable = true;
+   private ITextComponent title;
+
+   public InventoryView bukkitView;
+   private boolean isBukkitViewCreated;
+
+   @Nullable
+   public InventoryView getBukkitView(){
+      if(!isBukkitViewCreated) {
+         isBukkitViewCreated = true;
+         bukkitView = computeBukkitView();
+         return bukkitView;
+      }
+      return bukkitView;
+   }
+
+   public void setBukkitView(InventoryView iv) {
+      bukkitView = iv;
+      isBukkitViewCreated = true;
+   }
+
+   @Nullable
+   private InventoryView computeBukkitView() {
+      Set<IInventory> uniqueInventorySet = new java.util.HashSet<>();
+      for(Slot slot : slots)
+         if (slot.container != null) uniqueInventorySet.add(slot.container);
+      List<IInventory> inventories = new java.util.ArrayList<>(uniqueInventorySet);
+      PlayerInventory playerInv = null;
+
+      for(java.util.Iterator<IInventory> it = inventories.iterator(); it.hasNext();) {
+         IInventory inv = it.next();
+         if(inv instanceof PlayerInventory) {
+            playerInv = (PlayerInventory) inv;
+            it.remove();
+            break;
+         } else if (inv instanceof net.minecraftforge.items.wrapper.PlayerInvWrapper) {
+            playerInv = catserver.server.inventory.CatCustomInventory.getPlayerInv((net.minecraftforge.items.wrapper.PlayerInvWrapper) inv);
+            it.remove();
+            break;
+         }
+      }
+      if(playerInv == null)
+         return null;
+      org.bukkit.craftbukkit.v1_16_R3.entity.CraftPlayer bukkitPlayer = (org.bukkit.craftbukkit.v1_16_R3.entity.CraftPlayer) playerInv.player.getBukkitEntity();
+      org.bukkit.inventory.Inventory craftInv;
+      if(inventories.size() != 1)
+         craftInv = org.bukkit.Bukkit.getServer().createInventory(bukkitPlayer, InventoryType.CHEST);
+      else
+         craftInv = new CraftInventory(inventories.get(0));
+
+      return new org.bukkit.craftbukkit.v1_16_R3.inventory.CraftInventoryView(bukkitPlayer, craftInv, this);
+   }
+
+   public void transferTo(Container other, CraftHumanEntity player) {
+      InventoryView source = this.getBukkitView(); InventoryView destination = other.getBukkitView();
+      if (source != null) {
+         ((CraftInventory) source.getTopInventory()).getInventory().onClose(player);
+         ((CraftInventory) source.getBottomInventory()).getInventory().onClose(player);
+      }
+      if (destination != null) {
+         ((CraftInventory) destination.getTopInventory()).getInventory().onOpen(player);
+         ((CraftInventory) destination.getBottomInventory()).getInventory().onOpen(player);
+      }
+   }
+
+   public ITextComponent getTitle() {
+      if (this.title == null) {
+         this.title = new StringTextComponent("");
+      }
+      return this.title;
+   }
+
+   public final void setTitle(final ITextComponent title) {
+      this.title = title;
+   }
+
    protected Container(@Nullable ContainerType<?> p_i50105_1_, int p_i50105_2_) {
       this.menuType = p_i50105_1_;
       this.containerId = p_i50105_2_;
@@ -120,12 +_,14 @@
          ItemStack itemstack = this.slots.get(i).getItem();
          ItemStack itemstack1 = this.lastSlots.get(i);
          if (!ItemStack.matches(itemstack1, itemstack)) {
+            boolean clientStackChanged = !itemstack1.equals(itemstack, true);
             ItemStack itemstack2 = itemstack.copy();
             this.lastSlots.set(i, itemstack2);
 
-            for(IContainerListener icontainerlistener : this.containerListeners) {
-               icontainerlistener.slotChanged(this, i, itemstack2);
-            }
+            if (clientStackChanged)
+               for(IContainerListener icontainerlistener : this.containerListeners) {
+                  icontainerlistener.slotChanged(this, i, itemstack2);
+               }
          }
       }
 
@@ -202,6 +_,7 @@
                ItemStack itemstack10 = playerinventory.getCarried().copy();
                int k1 = playerinventory.getCarried().getCount();
 
+               Map<Integer, ItemStack> draggedSlots = new HashMap<Integer, ItemStack>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
                for(Slot slot8 : this.quickcraftSlots) {
                   ItemStack itemstack13 = playerinventory.getCarried();
                   if (slot8 != null && canItemQuickReplace(slot8, itemstack13, true) && slot8.mayPlace(itemstack13) && (this.quickcraftType == 2 || itemstack13.getCount() >= this.quickcraftSlots.size()) && this.canDragTo(slot8)) {
@@ -214,12 +_,43 @@
                      }
 
                      k1 -= itemstack14.getCount() - j3;
-                     slot8.set(itemstack14);
+                     //slot8.set(itemstack14);
+                     draggedSlots.put(slot8.index, itemstack14); // CraftBukkit - Put in map instead of setting
                   }
                }
 
-               itemstack10.setCount(k1);
-               playerinventory.setCarried(itemstack10);
+               // CraftBukkit start - InventoryDragEvent
+               InventoryView view = getBukkitView();
+               org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack10);
+               newcursor.setAmount(k1);
+               Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<Integer, org.bukkit.inventory.ItemStack>();
+               for (Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet()) {
+                  eventmap.put(ditem.getKey(), CraftItemStack.asBukkitCopy(ditem.getValue()));
+               }
+               // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
+               ItemStack oldCursor = playerinventory.getCarried();
+               playerinventory.setCarried(CraftItemStack.asNMSCopy(newcursor));
+               InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.quickcraftType == 1, eventmap);
+               p_241440_4_.level.getCBServer().getPluginManager().callEvent(event);
+               // Whether or not a change was made to the inventory that requires an update.
+               boolean needsUpdate = event.getResult() != Event.Result.DEFAULT;
+               if (event.getResult() != Event.Result.DENY) {
+                  for (Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet()) {
+                     view.setItem(dslot.getKey(), CraftItemStack.asBukkitCopy(dslot.getValue()));
+                  }
+                  // The only time the carried item will be set to null is if the inventory is closed by the server.
+                  // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
+                  if (playerinventory.getCarried() != null) {
+                     playerinventory.setCarried(CraftItemStack.asNMSCopy(event.getCursor()));
+                     needsUpdate = true;
+                  }
+               } else {
+                  playerinventory.setCarried(oldCursor);
+               }
+               if (needsUpdate && p_241440_4_ instanceof ServerPlayerEntity) {
+                  ((ServerPlayerEntity) p_241440_4_).refreshContainer(this);
+               }
+               // CraftBukkit end
             }
 
             this.resetQuickCraft();
@@ -232,8 +_,12 @@
          if (p_241440_1_ == -999) {
             if (!playerinventory.getCarried().isEmpty()) {
                if (p_241440_2_ == 0) {
-                  p_241440_4_.drop(playerinventory.getCarried(), true);
+                  //p_241440_4_.drop(playerinventory.getCarried(), true);
+                  // CraftBukkit start
+                  ItemStack carried = playerinventory.getCarried();
                   playerinventory.setCarried(ItemStack.EMPTY);
+                  p_241440_4_.drop(carried, true);
+                  // CraftBukkit end
                }
 
                if (p_241440_2_ == 1) {
@@ -321,6 +_,15 @@
                }
 
                slot6.setChanged();
+               // CraftBukkit start - Make sure the client has the right slot contents
+               if (p_241440_4_ instanceof ServerPlayerEntity && slot6.getMaxStackSize() != 64) {
+                  ((ServerPlayerEntity) p_241440_4_).connection.send(new SSetSlotPacket(this.containerId, slot6.index, slot6.getItem()));
+                  // Updating a crafting inventory makes the client reset the result slot, have to send it again
+                  if (this.getBukkitView().getType() == InventoryType.WORKBENCH || this.getBukkitView().getType() == InventoryType.CRAFTING) {
+                     ((ServerPlayerEntity) p_241440_4_).connection.send(new SSetSlotPacket(this.containerId, 0, this.getSlot(0).getItem()));
+                  }
+               }
+               // CraftBukkit end
             }
          }
       } else if (p_241440_3_ == ClickType.SWAP) {
@@ -418,8 +_,11 @@
    public void removed(PlayerEntity p_75134_1_) {
       PlayerInventory playerinventory = p_75134_1_.inventory;
       if (!playerinventory.getCarried().isEmpty()) {
-         p_75134_1_.drop(playerinventory.getCarried(), false);
+         // CraftBukkit start - SPIGOT-4556
+         ItemStack carried = playerinventory.getCarried();
          playerinventory.setCarried(ItemStack.EMPTY);
+         p_75134_1_.drop(carried, false);
+         // CraftBukkit end
       }
 
    }
@@ -500,14 +_,15 @@
             ItemStack itemstack = slot.getItem();
             if (!itemstack.isEmpty() && consideredTheSameItem(p_75135_1_, itemstack)) {
                int j = itemstack.getCount() + p_75135_1_.getCount();
-               if (j <= p_75135_1_.getMaxStackSize()) {
+               int maxSize = Math.min(slot.getMaxStackSize(), p_75135_1_.getMaxStackSize());
+               if (j <= maxSize) {
                   p_75135_1_.setCount(0);
                   itemstack.setCount(j);
                   slot.setChanged();
                   flag = true;
-               } else if (itemstack.getCount() < p_75135_1_.getMaxStackSize()) {
-                  p_75135_1_.shrink(p_75135_1_.getMaxStackSize() - itemstack.getCount());
-                  itemstack.setCount(p_75135_1_.getMaxStackSize());
+               } else if (itemstack.getCount() < maxSize) {
+                  p_75135_1_.shrink(maxSize - itemstack.getCount());
+                  itemstack.setCount(maxSize);
                   slot.setChanged();
                   flag = true;
                }
@@ -601,14 +_,14 @@
 
    public static void getQuickCraftSlotCount(Set<Slot> p_94525_0_, int p_94525_1_, ItemStack p_94525_2_, int p_94525_3_) {
       switch(p_94525_1_) {
-      case 0:
-         p_94525_2_.setCount(MathHelper.floor((float)p_94525_2_.getCount() / (float)p_94525_0_.size()));
-         break;
-      case 1:
-         p_94525_2_.setCount(1);
-         break;
-      case 2:
-         p_94525_2_.setCount(p_94525_2_.getItem().getMaxStackSize());
+         case 0:
+            p_94525_2_.setCount(MathHelper.floor((float)p_94525_2_.getCount() / (float)p_94525_0_.size()));
+            break;
+         case 1:
+            p_94525_2_.setCount(1);
+            break;
+         case 2:
+            p_94525_2_.setCount(p_94525_2_.getMaxStackSize());
       }
 
       p_94525_2_.grow(p_94525_3_);
