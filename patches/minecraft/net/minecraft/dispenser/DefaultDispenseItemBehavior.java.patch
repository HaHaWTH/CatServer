--- a/net/minecraft/dispenser/DefaultDispenseItemBehavior.java
+++ b/net/minecraft/dispenser/DefaultDispenseItemBehavior.java
@@ -4,7 +_,13 @@
 import net.minecraft.entity.item.ItemEntity;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.Direction;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
+import net.minecraft.world.server.ServerWorld;
+
+import org.bukkit.craftbukkit.v1_16_R3.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.v1_16_R3.util.CraftVector;
+import org.bukkit.event.block.BlockDispenseEvent;
 
 public class DefaultDispenseItemBehavior implements IDispenseItemBehavior {
    public final ItemStack dispense(IBlockSource p_dispense_1_, ItemStack p_dispense_2_) {
@@ -16,26 +_,73 @@
 
    protected ItemStack execute(IBlockSource p_82487_1_, ItemStack p_82487_2_) {
       Direction direction = p_82487_1_.getBlockState().getValue(DispenserBlock.FACING);
-      IPosition iposition = DispenserBlock.getDispensePosition(p_82487_1_);
       ItemStack itemstack = p_82487_2_.split(1);
-      spawnItem(p_82487_1_.getLevel(), itemstack, 6, direction, iposition);
+      // CraftBukkit start
+      if (!doDispense(p_82487_1_.getLevel(), itemstack, 6, direction, p_82487_1_)) {
+         itemstack.grow(1);
+      }
+      // CraftBukkit end
       return p_82487_2_;
    }
 
+   // This one is called by Refined Storage (and possibly other mods)
    public static void spawnItem(World p_82486_0_, ItemStack p_82486_1_, int p_82486_2_, Direction p_82486_3_, IPosition p_82486_4_) {
-      double d0 = p_82486_4_.x();
-      double d1 = p_82486_4_.y();
-      double d2 = p_82486_4_.z();
-      if (p_82486_3_.getAxis() == Direction.Axis.Y) {
+       doDispenseInternal(p_82486_0_, p_82486_1_, p_82486_2_, p_82486_3_, new ProxyBlockSource((ServerWorld) p_82486_0_, new BlockPos(p_82486_4_.x(), p_82486_4_.y(), p_82486_4_.z())), p_82486_4_);
+   }
+
+   // This one is called by CraftBukkit
+   public static boolean doDispense(World worldIn, ItemStack stack, int speed, Direction facing, IBlockSource source) {
+       return doDispenseInternal(worldIn, stack, speed, facing, source, DispenserBlock.getDispensePosition(source));
+   }
+
+   private static boolean doDispenseInternal(World worldIn, ItemStack stack, int speed, Direction facing, IBlockSource source, IPosition position) {
+      if (stack.isEmpty()) {
+         return true;
+      }
+      double d0 = position.x();
+      double d1 = position.y();
+      double d2 = position.z();
+      if (facing.getAxis() == Direction.Axis.Y) {
          d1 = d1 - 0.125D;
       } else {
          d1 = d1 - 0.15625D;
       }
 
-      ItemEntity itementity = new ItemEntity(p_82486_0_, d0, d1, d2, p_82486_1_);
-      double d3 = p_82486_0_.random.nextDouble() * 0.1D + 0.2D;
-      itementity.setDeltaMovement(p_82486_0_.random.nextGaussian() * (double)0.0075F * (double)p_82486_2_ + (double)p_82486_3_.getStepX() * d3, p_82486_0_.random.nextGaussian() * (double)0.0075F * (double)p_82486_2_ + (double)0.2F, p_82486_0_.random.nextGaussian() * (double)0.0075F * (double)p_82486_2_ + (double)p_82486_3_.getStepZ() * d3);
-      p_82486_0_.addFreshEntity(itementity);
+      ItemEntity itementity = new ItemEntity(worldIn, d0, d1, d2, stack);
+      double d3 = worldIn.random.nextDouble() * 0.1D + 0.2D;
+      itementity.setDeltaMovement(worldIn.random.nextGaussian() * (double) 0.0075F * (double) speed + (double) facing.getStepX() * d3, worldIn.random.nextGaussian() * (double) 0.0075F * (double) speed + (double) 0.2F, worldIn.random.nextGaussian() * (double) 0.0075F * (double) speed + (double) facing.getStepZ() * d3);
+
+      // CraftBukkit start
+      org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(source.getPos().getX(), source.getPos().getY(), source.getPos().getZ());
+      CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack);
+
+      BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), CraftVector.toBukkit(itementity.getDeltaMovement()));
+      if (!DispenserBlock.eventFired) {
+         worldIn.getCBServer().getPluginManager().callEvent(event);
+      }
+
+      if (event.isCancelled()) {
+         return false;
+      }
+
+      itementity.setItem(CraftItemStack.asNMSCopy(event.getItem()));
+      itementity.setDeltaMovement(CraftVector.toNMS(event.getVelocity()));
+
+      if (!event.getItem().getType().equals(craftItem.getType())) {
+         // Chain to handler for new item
+         ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+         IDispenseItemBehavior idispensebehavior = (IDispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+         if (idispensebehavior != IDispenseItemBehavior.NOOP && idispensebehavior.getClass() != DefaultDispenseItemBehavior.class) {
+            idispensebehavior.dispense(source, eventStack);
+         } else {
+            worldIn.addFreshEntity(itementity);
+         }
+         return false;
+      }
+      worldIn.addFreshEntity(itementity);
+
+      return true;
+      // CraftBukkit end
    }
 
    protected void playSound(IBlockSource p_82485_1_) {
