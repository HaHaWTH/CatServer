--- a/net/minecraft/tileentity/BeehiveTileEntity.java
+++ b/net/minecraft/tileentity/BeehiveTileEntity.java
@@ -26,7 +_,8 @@
 public class BeehiveTileEntity extends TileEntity implements ITickableTileEntity {
    private final List<BeehiveTileEntity.Bee> stored = Lists.newArrayList();
    @Nullable
-   private BlockPos savedFlowerPos = null;
+   public BlockPos savedFlowerPos = null;
+   public int maxBees = 3; // CraftBukkit - allow setting max amount of bees a hive can hold
 
    public BeehiveTileEntity() {
       super(TileEntityType.BEEHIVE);
@@ -59,7 +_,7 @@
    }
 
    public boolean isFull() {
-      return this.stored.size() == 3;
+      return this.stored.size() == this.maxBees; // CraftBukkit
    }
 
    public void emptyAllLivingFromHive(@Nullable PlayerEntity p_226963_1_, BlockState p_226963_2_, BeehiveTileEntity.State p_226963_3_) {
@@ -70,7 +_,7 @@
                BeeEntity beeentity = (BeeEntity)entity;
                if (p_226963_1_.position().distanceToSqr(entity.position()) <= 16.0D) {
                   if (!this.isSedated()) {
-                     beeentity.setTarget(p_226963_1_);
+                     beeentity.setGoalTarget(p_226963_1_, org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER, true); // CraftBukkit
                   } else {
                      beeentity.setStayOutOfHiveCountdown(400);
                   }
@@ -82,9 +_,15 @@
    }
 
    private List<Entity> releaseAllOccupants(BlockState p_226965_1_, BeehiveTileEntity.State p_226965_2_) {
+      // CraftBukkit start - This allows us to bypass the night/rain/emergency check
+      return this.releaseBees(p_226965_1_, p_226965_2_, false);
+   }
+
+   public List<Entity> releaseBees(BlockState p_226965_1_, BeehiveTileEntity.State p_226965_2_, boolean force) {
       List<Entity> list = Lists.newArrayList();
       this.stored.removeIf((p_226966_4_) -> {
-         return this.releaseOccupant(p_226965_1_, p_226966_4_, list, p_226965_2_);
+         return this.releaseBee(p_226965_1_, p_226966_4_, list, p_226965_2_, force);
+         // CraftBukkit end
       });
       return list;
    }
@@ -110,7 +_,19 @@
    }
 
    public void addOccupantWithPresetTicks(Entity p_226962_1_, boolean p_226962_2_, int p_226962_3_) {
-      if (this.stored.size() < 3) {
+      if (this.stored.size() < this.maxBees) { // CraftBukkit
+         // CraftBukkit start
+         if (this.level != null) {
+            org.bukkit.event.entity.EntityEnterBlockEvent event = new org.bukkit.event.entity.EntityEnterBlockEvent(p_226962_1_.getBukkitEntity(), org.bukkit.craftbukkit.v1_16_R3.block.CraftBlock.at(level, getBlockPos()));
+            org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+               if (p_226962_1_ instanceof BeeEntity) {
+                  ((BeeEntity) p_226962_1_).setStayOutOfHiveCountdown(400);
+               }
+               return;
+            }
+         }
+         // CraftBukkit end
          p_226962_1_.stopRiding();
          p_226962_1_.ejectPassengers();
          CompoundNBT compoundnbt = new CompoundNBT();
@@ -132,8 +_,14 @@
       }
    }
 
+   // CraftBukkit start - This allows us to bypass the night/rain/emergency check
    private boolean releaseOccupant(BlockState p_235651_1_, BeehiveTileEntity.Bee p_235651_2_, @Nullable List<Entity> p_235651_3_, BeehiveTileEntity.State p_235651_4_) {
-      if ((this.level.isNight() || this.level.isRaining()) && p_235651_4_ != BeehiveTileEntity.State.EMERGENCY) {
+      return releaseBee(p_235651_1_, p_235651_2_, p_235651_3_, p_235651_4_, false);
+   }
+
+   private boolean releaseBee(BlockState p_235651_1_, BeehiveTileEntity.Bee p_235651_2_, @Nullable List<Entity> p_235651_3_, BeehiveTileEntity.State p_235651_4_, boolean force) {
+      // CraftBukkit
+      if (!force && (this.level.isNight() || this.level.isRaining()) && p_235651_4_ != BeehiveTileEntity.State.EMERGENCY) {
          return false;
       } else {
          BlockPos blockpos = this.getBlockPos();
@@ -151,6 +_,17 @@
                return p_226960_0_;
             });
             if (entity != null) {
+               // CraftBukkit start
+               if (entity instanceof BeeEntity) {
+                  float f = entity.getBbWidth();
+                  double d0 = flag ? 0.0D : 0.55D + (double) (f / 2.0F);
+                  double d1 = (double) blockpos.getX() + 0.5D + d0 * (double) direction.getStepX();
+                  double d2 = (double) blockpos.getY() + 0.5D - (double) (entity.getBbHeight() / 2.0F);
+                  double d3 = (double) blockpos.getZ() + 0.5D + d0 * (double) direction.getStepZ();
+                  entity.moveTo(d1, d2, d3, entity.yRot, entity.xRot);
+               }
+               if (!this.level.addEntity(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BEEHIVE)) return false; // CraftBukkit - SpawnReason, moved from below
+               // CraftBukkit end
                if (!entity.getType().is(EntityTypeTags.BEEHIVE_INHABITORS)) {
                   return false;
                } else {
@@ -180,16 +_,18 @@
                         p_235651_3_.add(beeentity);
                      }
 
-                     float f = entity.getBbWidth();
+                      /* // CraftBukkit start
+                     float f = entity.getWidth();
                      double d3 = flag ? 0.0D : 0.55D + (double)(f / 2.0F);
-                     double d0 = (double)blockpos.getX() + 0.5D + d3 * (double)direction.getStepX();
-                     double d1 = (double)blockpos.getY() + 0.5D - (double)(entity.getBbHeight() / 2.0F);
-                     double d2 = (double)blockpos.getZ() + 0.5D + d3 * (double)direction.getStepZ();
-                     entity.moveTo(d0, d1, d2, entity.yRot, entity.xRot);
-                  }
+                     double d0 = (double)blockpos.getX() + 0.5D + d3 * (double)direction.getXOffset();
+                     double d1 = (double)blockpos.getY() + 0.5D - (double)(entity.getHeight() / 2.0F);
+                     double d2 = (double)blockpos.getZ() + 0.5D + d3 * (double)direction.getZOffset();
+                     entity.setLocationAndAngles(d0, d1, d2, entity.rotationYaw, entity.rotationPitch);
+                     */ // CraftBukkit end
+                   }
 
                   this.level.playSound((PlayerEntity)null, blockpos, SoundEvents.BEEHIVE_EXIT, SoundCategory.BLOCKS, 1.0F, 1.0F);
-                  return this.level.addFreshEntity(entity);
+                  return true; // return this.world.addEntity(entity); // CraftBukkit - moved up
                }
             } else {
                return false;
@@ -225,6 +_,13 @@
             if (this.releaseOccupant(blockstate, beehivetileentity$bee, (List<Entity>)null, beehivetileentity$state)) {
                iterator.remove();
             }
+            // CraftBukkit start
+            else {
+               beehivetileentity$bee.ticksInHive = beehivetileentity$bee.minOccupationTicks / 2; // Not strictly Vanilla behaviour in cases where bees cannot spawn but still reasonable
+            }
+            // CraftBukkit end
+         } else {
+            beehivetileentity$bee.ticksInHive++;
          }
       }
 
@@ -261,6 +_,11 @@
          this.savedFlowerPos = NBTUtil.readBlockPos(p_230337_2_.getCompound("FlowerPos"));
       }
 
+      // CraftBukkit start
+      if (p_230337_2_.contains("Bukkit.MaxEntities")) {
+         this.maxBees = p_230337_2_.getInt("Bukkit.MaxEntities");
+      }
+      // CraftBukkit end
    }
 
    public CompoundNBT save(CompoundNBT p_189515_1_) {
@@ -269,6 +_,7 @@
       if (this.hasSavedFlowerPos()) {
          p_189515_1_.put("FlowerPos", NBTUtil.writeBlockPos(this.savedFlowerPos));
       }
+      p_189515_1_.putInt("Bukkit.MaxEntities", this.maxBees); // CraftBukkit
 
       return p_189515_1_;
    }
