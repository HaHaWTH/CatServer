--- a/net/minecraft/tileentity/TileEntity.java
+++ b/net/minecraft/tileentity/TileEntity.java
@@ -4,6 +_,7 @@
 import net.minecraft.block.BlockState;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.nbt.CompoundNBT;
+import net.minecraft.nbt.INBT;
 import net.minecraft.network.play.server.SUpdateTileEntityPacket;
 import net.minecraft.util.Mirror;
 import net.minecraft.util.ResourceLocation;
@@ -15,20 +_,33 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.v1_16_R3.persistence.CraftPersistentDataContainer;
+import org.bukkit.craftbukkit.v1_16_R3.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.inventory.InventoryHolder;
+import org.spigotmc.CustomTimingsHandler;
 
-public abstract class TileEntity {
+public abstract class TileEntity extends net.minecraftforge.common.capabilities.CapabilityProvider<TileEntity> implements net.minecraftforge.common.extensions.IForgeTileEntity {
+   // CraftBukkit start - data containers
+   private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
+   public CraftPersistentDataContainer persistentDataContainer;
+   // CraftBukkit end
    private static final Logger LOGGER = LogManager.getLogger();
+   public boolean isLoadingStructure = false; // Paper
    private final TileEntityType<?> type;
    @Nullable
-   protected World level;
-   protected BlockPos worldPosition = BlockPos.ZERO;
+   public World level;
+   public BlockPos worldPosition = BlockPos.ZERO;
    protected boolean remove;
    @Nullable
    private BlockState blockState;
    private boolean hasLoggedInvalidStateBefore;
+   private CompoundNBT customTileData;
+   public CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.v1_16_R3.SpigotTimings.getTileEntityTimings(this); // Spigot
 
    public TileEntity(TileEntityType<?> p_i48289_1_) {
+      super(TileEntity.class);
       this.type = p_i48289_1_;
+      this.gatherCapabilities();
    }
 
    @Nullable
@@ -47,6 +_,15 @@
 
    public void load(BlockState p_230337_1_, CompoundNBT p_230337_2_) {
       this.worldPosition = new BlockPos(p_230337_2_.getInt("x"), p_230337_2_.getInt("y"), p_230337_2_.getInt("z"));
+      if (p_230337_2_.contains("ForgeData")) this.customTileData = p_230337_2_.getCompound("ForgeData");
+      if (getCapabilities() != null && p_230337_2_.contains("ForgeCaps")) deserializeCaps(p_230337_2_.getCompound("ForgeCaps"));
+      // CraftBukkit start - read container
+      this.persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+      INBT persistentDataTag = p_230337_2_.get("PublicBukkitValues");
+      if (persistentDataTag instanceof CompoundNBT) {
+         this.persistentDataContainer.putAll((CompoundNBT) persistentDataTag);
+      }
+      // CraftBukkit end
    }
 
    public CompoundNBT save(CompoundNBT p_189515_1_) {
@@ -62,6 +_,13 @@
          p_189516_1_.putInt("x", this.worldPosition.getX());
          p_189516_1_.putInt("y", this.worldPosition.getY());
          p_189516_1_.putInt("z", this.worldPosition.getZ());
+         if (this.customTileData != null) p_189516_1_.put("ForgeData", this.customTileData);
+         if (getCapabilities() != null) p_189516_1_.put("ForgeCaps", serializeCaps());
+         // CraftBukkit start - store container
+         if (this.persistentDataContainer != null && !this.persistentDataContainer.isEmpty()) {
+            p_189516_1_.put("PublicBukkitValues", this.persistentDataContainer.toTagCompound());
+         }
+         // CraftBukkit end
          return p_189516_1_;
       }
    }
@@ -94,7 +_,7 @@
       if (this.level != null) {
          this.blockState = this.level.getBlockState(this.worldPosition);
          this.level.blockEntityChanged(this.worldPosition, this);
-         if (!this.blockState.isAir()) {
+         if (!this.blockState.isAir(this.level, this.worldPosition)) {
             this.level.updateNeighbourForOutputSignal(this.worldPosition, this.blockState.getBlock());
          }
       }
@@ -133,6 +_,13 @@
 
    public void setRemoved() {
       this.remove = true;
+      this.invalidateCaps();
+      requestModelDataUpdate();
+   }
+
+   @Override
+   public void onChunkUnloaded() {
+      this.invalidateCaps();
    }
 
    public void clearRemoved() {
@@ -175,6 +_,13 @@
       return this.type;
    }
 
+   @Override
+   public CompoundNBT getTileData() {
+      if (this.customTileData == null)
+         this.customTileData = new CompoundNBT();
+      return this.customTileData;
+   }
+
    public void logInvalidState() {
       if (!this.hasLoggedInvalidStateBefore) {
          this.hasLoggedInvalidStateBefore = true;
@@ -183,4 +_,10 @@
          }, this::getBlockPos);
       }
    }
+
+   // CraftBukkit start
+   public InventoryHolder getOwner() {
+      return catserver.server.inventory.CatInventoryUtils.getOwner(level, worldPosition);
+   }
+   // CraftBukkit start
 }
