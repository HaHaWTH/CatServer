--- a/net/minecraft/tileentity/BrewingStandTileEntity.java
+++ b/net/minecraft/tileentity/BrewingStandTileEntity.java
@@ -1,6 +_,8 @@
 package net.minecraft.tileentity;
 
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.BrewingStandBlock;
@@ -16,22 +_,67 @@
 import net.minecraft.item.Items;
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.potion.PotionBrewing;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.Direction;
 import net.minecraft.util.IIntArray;
 import net.minecraft.util.NonNullList;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TranslationTextComponent;
+import org.bukkit.craftbukkit.v1_16_R3.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.v1_16_R3.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.BrewEvent;
+import org.bukkit.event.inventory.BrewingStandFuelEvent;
+import org.bukkit.inventory.InventoryHolder;
 
 public class BrewingStandTileEntity extends LockableTileEntity implements ISidedInventory, ITickableTileEntity {
    private static final int[] SLOTS_FOR_UP = new int[]{3};
    private static final int[] SLOTS_FOR_DOWN = new int[]{0, 1, 2, 3};
    private static final int[] SLOTS_FOR_SIDES = new int[]{0, 1, 2, 4};
    private NonNullList<ItemStack> items = NonNullList.withSize(5, ItemStack.EMPTY);
-   private int brewTime;
+   public int brewTime;
    private boolean[] lastPotionCount;
    private Item ingredient;
-   private int fuel;
+   public int fuel; // private->public CraftBukkit
+
+   // CraftBukkit start - add fields and methods
+   private int lastTick = MinecraftServer.currentTick;
+   private List<HumanEntity> transaction = new ArrayList<>();
+   private int maxStack = MAX_STACK;
+
+   @Override
+   public List<ItemStack> getContents() {
+      return this.items;
+   }
+
+   @Override
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   @Override
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   @Override
+   public List<HumanEntity> getViewers() {
+      return this.transaction;
+   }
+
+   @Override
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
+   @Override
+   public int getMaxStackSize() {
+      return maxStack;
+   }
+
+   // CraftBukkit end
+
    protected final IIntArray dataAccess = new IIntArray() {
       public int get(int p_221476_1_) {
          switch(p_221476_1_) {
@@ -85,17 +_,32 @@
    public void tick() {
       ItemStack itemstack = this.items.get(4);
       if (this.fuel <= 0 && itemstack.getItem() == Items.BLAZE_POWDER) {
-         this.fuel = 20;
+         // CraftBukkit start
+         BrewingStandFuelEvent event = new BrewingStandFuelEvent(level.getWorld().getBlockAt(this.worldPosition.getX(), this.worldPosition.getY(), this.worldPosition.getZ()), CraftItemStack.asCraftMirror(itemstack), 20);
+         this.level.getCBServer().getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+         this.fuel = event.getFuelPower();
+         if (this.fuel > 0 && event.isConsuming()) {
          itemstack.shrink(1);
+         }
+         // CraftBukkit end
          this.setChanged();
       }
 
       boolean flag = this.isBrewable();
       boolean flag1 = this.brewTime > 0;
       ItemStack itemstack1 = this.items.get(3);
+
+      // CraftBukkit start - Use wall time instead of ticks for brewing
+      int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+      this.lastTick = MinecraftServer.currentTick;
+
       if (flag1) {
-         --this.brewTime;
-         boolean flag2 = this.brewTime == 0;
+         this.brewTime -= elapsedTicks;
+         boolean flag2 = this.brewTime <= 0; // == -> <=
+         // CraftBukkit end
          if (flag2 && flag) {
             this.doBrew();
             this.setChanged();
@@ -146,6 +_,7 @@
 
    private boolean isBrewable() {
       ItemStack itemstack = this.items.get(3);
+      if (!itemstack.isEmpty()) return net.minecraftforge.common.brewing.BrewingRecipeRegistry.canBrew(items, itemstack, SLOTS_FOR_SIDES); // divert to VanillaBrewingRegistry
       if (itemstack.isEmpty()) {
          return false;
       } else if (!PotionBrewing.isIngredient(itemstack)) {
@@ -163,22 +_,33 @@
    }
 
    private void doBrew() {
+      if (net.minecraftforge.event.ForgeEventFactory.onPotionAttemptBrew(items)) return;
       ItemStack itemstack = this.items.get(3);
 
-      for(int i = 0; i < 3; ++i) {
-         this.items.set(i, PotionBrewing.mix(itemstack, this.items.get(i)));
+      // CraftBukkit start
+      InventoryHolder owner = this.getOwner();
+      if (owner != null) {
+         BrewEvent event = new BrewEvent(level.getWorld().getBlockAt(this.worldPosition.getX(), this.worldPosition.getY(), this.worldPosition.getZ()), (org.bukkit.inventory.BrewerInventory) owner.getInventory(), this.fuel);
+         org.bukkit.Bukkit.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
       }
+      // CraftBukkit end
 
-      itemstack.shrink(1);
+      net.minecraftforge.common.brewing.BrewingRecipeRegistry.brewPotions(items, itemstack, SLOTS_FOR_SIDES);
+      net.minecraftforge.event.ForgeEventFactory.onPotionBrewed(items);
       BlockPos blockpos = this.getBlockPos();
-      if (itemstack.getItem().hasCraftingRemainingItem()) {
-         ItemStack itemstack1 = new ItemStack(itemstack.getItem().getCraftingRemainingItem());
+      if (itemstack.hasContainerItem()) {
+         ItemStack itemstack1 = itemstack.getContainerItem();
+         itemstack.shrink(1);
          if (itemstack.isEmpty()) {
             itemstack = itemstack1;
          } else if (!this.level.isClientSide) {
             InventoryHelper.dropItemStack(this.level, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), itemstack1);
          }
       }
+      else itemstack.shrink(1);
 
       this.items.set(3, itemstack);
       this.level.levelEvent(1035, blockpos, 0);
@@ -229,13 +_,13 @@
 
    public boolean canPlaceItem(int p_94041_1_, ItemStack p_94041_2_) {
       if (p_94041_1_ == 3) {
-         return PotionBrewing.isIngredient(p_94041_2_);
+         return net.minecraftforge.common.brewing.BrewingRecipeRegistry.isValidIngredient(p_94041_2_);
       } else {
          Item item = p_94041_2_.getItem();
          if (p_94041_1_ == 4) {
             return item == Items.BLAZE_POWDER;
          } else {
-            return (item == Items.POTION || item == Items.SPLASH_POTION || item == Items.LINGERING_POTION || item == Items.GLASS_BOTTLE) && this.getItem(p_94041_1_).isEmpty();
+            return net.minecraftforge.common.brewing.BrewingRecipeRegistry.isValidInput(p_94041_2_) && this.getItem(p_94041_1_).isEmpty();
          }
       }
    }
@@ -266,5 +_,28 @@
 
    protected Container createMenu(int p_213906_1_, PlayerInventory p_213906_2_) {
       return new BrewingStandContainer(p_213906_1_, p_213906_2_, this, this.dataAccess);
+   }
+
+   net.minecraftforge.common.util.LazyOptional<? extends net.minecraftforge.items.IItemHandler>[] handlers =
+           net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (!this.remove && facing != null && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
+         if (facing == Direction.UP)
+            return handlers[0].cast();
+         else if (facing == Direction.DOWN)
+            return handlers[1].cast();
+         else
+            return handlers[2].cast();
+      }
+      return super.getCapability(capability, facing);
+   }
+
+   @Override
+   protected void invalidateCaps() {
+      super.invalidateCaps();
+      for (int x = 0; x < handlers.length; x++)
+        handlers[x].invalidate();
    }
 }
