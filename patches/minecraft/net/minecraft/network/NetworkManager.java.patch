--- a/net/minecraft/network/NetworkManager.java
+++ b/net/minecraft/network/NetworkManager.java
@@ -31,9 +_,12 @@
 import java.util.Queue;
 import javax.annotation.Nullable;
 import javax.crypto.Cipher;
+import javax.crypto.SecretKey;
 import net.minecraft.network.login.ServerLoginNetHandler;
 import net.minecraft.network.play.ServerPlayNetHandler;
 import net.minecraft.network.play.server.SDisconnectPacket;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.util.CryptManager;
 import net.minecraft.util.LazyValue;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.text.ITextComponent;
@@ -62,8 +_,13 @@
    });
    private final PacketDirection receiving;
    private final Queue<NetworkManager.QueuedPacket> queue = Queues.newConcurrentLinkedQueue();
-   private Channel channel;
-   private SocketAddress address;
+   public Channel channel;
+   public SocketAddress address;
+   // Spigot Start
+   public java.util.UUID spoofedUUID;
+   public com.mojang.authlib.properties.Property[] spoofedProfile;
+   public boolean preparing = true;
+   // Spigot End
    private INetHandler packetListener;
    private ITextComponent disconnectedReason;
    private boolean encrypted;
@@ -74,6 +_,7 @@
    private float averageSentPackets;
    private int tickCount;
    private boolean handlingFault;
+   private java.util.function.Consumer<NetworkManager> activationHandler;
 
    public NetworkManager(PacketDirection p_i46004_1_) {
       this.receiving = p_i46004_1_;
@@ -83,6 +_,10 @@
       super.channelActive(p_channelActive_1_);
       this.channel = p_channelActive_1_.channel();
       this.address = this.channel.remoteAddress();
+      if (activationHandler != null) activationHandler.accept(this);
+      // Spigot Start
+      this.preparing = false;
+      // Spigot End
 
       try {
          this.setProtocol(ProtocolType.HANDSHAKING);
@@ -128,6 +_,7 @@
 
          }
       }
+      if (MinecraftServer.getServer().isDebugging()) p_exceptionCaught_2_.printStackTrace(); // Spigot
    }
 
    protected void channelRead0(ChannelHandlerContext p_channelRead0_1_, IPacket<?> p_channelRead0_2_) throws Exception {
@@ -171,7 +_,7 @@
       ++this.sentPackets;
       if (protocoltype1 != protocoltype) {
          LOGGER.debug("Disabled auto read");
-         this.channel.config().setAutoRead(false);
+         this.channel.eventLoop().execute(()->this.channel.config().setAutoRead(false));
       }
 
       if (this.channel.eventLoop().inEventLoop()) {
@@ -246,8 +_,11 @@
    }
 
    public void disconnect(ITextComponent p_150718_1_) {
+      // Spigot Start
+      this.preparing = false;
+      // Spigot End
       if (this.channel.isOpen()) {
-         this.channel.close().awaitUninterruptibly();
+         this.channel.close(); // We can't wait as this may be called from an event loop.
          this.disconnectedReason = p_150718_1_;
       }
 
@@ -259,7 +_,9 @@
 
    @OnlyIn(Dist.CLIENT)
    public static NetworkManager connectToServer(InetAddress p_181124_0_, int p_181124_1_, boolean p_181124_2_) {
+      if (p_181124_0_ instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
       final NetworkManager networkmanager = new NetworkManager(PacketDirection.CLIENTBOUND);
+      networkmanager.activationHandler = net.minecraftforge.fml.network.NetworkHooks::registerClientLoginChannel;
       Class<? extends SocketChannel> oclass;
       LazyValue<? extends EventLoopGroup> lazyvalue;
       if (Epoll.isAvailable() && p_181124_2_) {
@@ -286,6 +_,7 @@
    @OnlyIn(Dist.CLIENT)
    public static NetworkManager connectToLocalServer(SocketAddress p_150722_0_) {
       final NetworkManager networkmanager = new NetworkManager(PacketDirection.CLIENTBOUND);
+      networkmanager.activationHandler = net.minecraftforge.fml.network.NetworkHooks::registerClientLoginChannel;
       (new Bootstrap()).group(LOCAL_WORKER_GROUP.get()).handler(new ChannelInitializer<Channel>() {
          protected void initChannel(Channel p_initChannel_1_) throws Exception {
             p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
@@ -331,7 +_,7 @@
          if (this.channel.pipeline().get("decompress") instanceof NettyCompressionDecoder) {
             ((NettyCompressionDecoder)this.channel.pipeline().get("decompress")).setThreshold(p_179289_1_);
          } else {
-            this.channel.pipeline().addBefore("decoder", "decompress", new NettyCompressionDecoder(p_179289_1_));
+            this.channel.pipeline().addAfter("splitter", "decompress", new NettyCompressionDecoder(p_179289_1_)); // LoliServer - from CatServer
          }
 
          if (this.channel.pipeline().get("compress") instanceof NettyCompressionEncoder) {
@@ -362,6 +_,7 @@
             } else if (this.getPacketListener() != null) {
                this.getPacketListener().onDisconnect(new TranslationTextComponent("multiplayer.disconnect.generic"));
             }
+            this.queue.clear(); // Free up packet queue.
          }
 
       }
@@ -376,6 +_,14 @@
       return this.averageSentPackets;
    }
 
+   public Channel channel() {
+      return channel;
+   }
+
+   public PacketDirection getDirection() {
+      return this.receiving;
+   }
+
    static class QueuedPacket {
       private final IPacket<?> packet;
       @Nullable
@@ -386,4 +_,11 @@
          this.listener = p_i48604_2_;
       }
    }
+
+   // Spigot Start
+   public SocketAddress getRawAddress()
+   {
+      return this.channel.remoteAddress();
+   }
+   // Spigot End
 }
