--- a/net/minecraft/network/login/ServerLoginNetHandler.java
+++ b/net/minecraft/network/login/ServerLoginNetHandler.java
@@ -17,6 +_,7 @@
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.network.NetworkManager;
+import net.minecraft.network.handshake.ServerHandshakeNetHandler;
 import net.minecraft.network.login.client.CCustomPayloadLoginPacket;
 import net.minecraft.network.login.client.CEncryptionResponsePacket;
 import net.minecraft.network.login.client.CLoginStartPacket;
@@ -29,10 +_,16 @@
 import net.minecraft.util.CryptManager;
 import net.minecraft.util.DefaultUncaughtExceptionHandler;
 import net.minecraft.util.text.ITextComponent;
+import net.minecraft.util.text.StringTextComponent;
 import net.minecraft.util.text.TranslationTextComponent;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.v1_16_R3.CraftServer;
+import org.bukkit.craftbukkit.v1_16_R3.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent.Result;
 
 public class ServerLoginNetHandler implements IServerLoginNetHandler {
    private static final AtomicInteger UNIQUE_THREAD_ID = new AtomicInteger(0);
@@ -47,6 +_,7 @@
    private final String serverId = "";
    private SecretKey secretKey;
    private ServerPlayerEntity delayedAcceptPlayer;
+   public String hostname = ""; // CraftBukkit - add field
 
    public ServerLoginNetHandler(MinecraftServer p_i45298_1_, NetworkManager p_i45298_2_) {
       this.server = p_i45298_1_;
@@ -55,7 +_,13 @@
    }
 
    public void tick() {
-      if (this.state == ServerLoginNetHandler.State.READY_TO_ACCEPT) {
+      if (this.state == State.NEGOTIATING) {
+         // We force the state into "NEGOTIATING" which is otherwise unused. Once we're completed we move the negotiation onto "READY_TO_ACCEPT"
+         // Might want to promote player object creation to here as well..
+         boolean negotiationComplete = net.minecraftforge.fml.network.NetworkHooks.tickNegotiation(this, this.connection, this.delayedAcceptPlayer);
+         if (negotiationComplete)
+            this.state = State.READY_TO_ACCEPT;
+      } else if (this.state == ServerLoginNetHandler.State.READY_TO_ACCEPT) {
          this.handleAcceptedLogin();
       } else if (this.state == ServerLoginNetHandler.State.DELAY_ACCEPT) {
          ServerPlayerEntity serverplayerentity = this.server.getPlayerList().getPlayer(this.gameProfile.getId());
@@ -72,6 +_,20 @@
 
    }
 
+   // CraftBukkit start
+   public void disconnect(String s) {
+      try {
+         ITextComponent ichatbasecomponent = new StringTextComponent(s);
+         LOGGER.info("Disconnecting {}: {}", this.getUserName(), s);
+         this.connection.send(new SDisconnectLoginPacket(ichatbasecomponent));
+         this.connection.disconnect(ichatbasecomponent);
+      }
+      catch (Exception exception) {
+         LOGGER.error("Error whilst disconnecting player", (Throwable)exception);
+      }
+   }
+   // CraftBukkit end
+
    public NetworkManager getConnection() {
       return this.connection;
    }
@@ -87,14 +_,45 @@
 
    }
 
+   // Spigot start
+   public void initUUID()
+   {
+      UUID uuid;
+      if ( connection.spoofedUUID != null )
+      {
+         uuid = connection.spoofedUUID;
+      } else
+      {
+         uuid = PlayerEntity.createPlayerUUID( this.gameProfile.getName() );
+      }
+
+      this.gameProfile = new GameProfile( uuid, this.gameProfile.getName() );
+
+      if (connection.spoofedProfile != null)
+      {
+         for ( com.mojang.authlib.properties.Property property : connection.spoofedProfile )
+         {
+            if (!ServerHandshakeNetHandler.PROP_PATTERN.matcher(property.getName()).matches()) continue;
+            this.gameProfile.getProperties().put( property.getName(), property );
+         }
+      }
+   }
+   // Spigot end
+
    public void handleAcceptedLogin() {
-      if (!this.gameProfile.isComplete()) {
-         this.gameProfile = this.createFakeProfile(this.gameProfile);
+      // Spigot start - Moved to initUUID
+      /*
+      if (!this.loginGameProfile.isComplete()) {
+         this.loginGameProfile = this.getOfflineProfile(this.loginGameProfile);
       }
+      */
+      // Spigot end
 
-      ITextComponent itextcomponent = this.server.getPlayerList().canPlayerLogin(this.connection.getRemoteAddress(), this.gameProfile);
-      if (itextcomponent != null) {
-         this.disconnect(itextcomponent);
+      // CraftBukkit start - fire PlayerLoginEvent
+      ServerPlayerEntity s = this.server.getPlayerList().canPlayerLogin(this, this.gameProfile, this.connection.getRemoteAddress());
+      if (s == null) {
+         // this.disconnect(itextcomponent);
+         // CraftBukkit end
       } else {
          this.state = ServerLoginNetHandler.State.ACCEPTED;
          if (this.server.getCompressionThreshold() >= 0 && !this.connection.isMemoryConnection()) {
@@ -107,9 +_,9 @@
          ServerPlayerEntity serverplayerentity = this.server.getPlayerList().getPlayer(this.gameProfile.getId());
          if (serverplayerentity != null) {
             this.state = ServerLoginNetHandler.State.DELAY_ACCEPT;
-            this.delayedAcceptPlayer = this.server.getPlayerList().getPlayerForLogin(this.gameProfile);
+            this.delayedAcceptPlayer = s; // CraftBukkit - add player reference
          } else {
-            this.server.getPlayerList().placeNewPlayer(this.connection, this.server.getPlayerList().getPlayerForLogin(this.gameProfile));
+            this.server.getPlayerList().placeNewPlayer(this.connection, s); // CraftBukkit - add player reference
          }
       }
 
@@ -130,7 +_,21 @@
          this.state = ServerLoginNetHandler.State.KEY;
          this.connection.send(new SEncryptionRequestPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.nonce));
       } else {
-         this.state = ServerLoginNetHandler.State.READY_TO_ACCEPT;
+	     // this.currentLoginState = ServerLoginNetHandler.State.NEGOTIATING;
+         // Spigot start
+         new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
+            @Override
+            public void run() {
+               try {
+                  initUUID();
+                  new LoginHandler().fireEvents();
+               } catch (Exception ex) {
+                  disconnect("Failed to verify username!");
+                  server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameProfile.getName(), ex);
+               }
+            }
+         }.start();
+         // Spigot end
       }
 
    }
@@ -138,7 +_,6 @@
    public void handleKey(CEncryptionResponsePacket p_147315_1_) {
       Validate.validState(this.state == ServerLoginNetHandler.State.KEY, "Unexpected key packet");
       PrivateKey privatekey = this.server.getKeyPair().getPrivate();
-
       final String s;
       try {
          if (!Arrays.equals(this.nonce, p_147315_1_.getNonce(privatekey))) {
@@ -154,48 +_,95 @@
       } catch (CryptException cryptexception) {
          throw new IllegalStateException("Protocol error", cryptexception);
       }
-
-      Thread thread = new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
+      Thread thread = new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, "User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
          public void run() {
             GameProfile gameprofile = ServerLoginNetHandler.this.gameProfile;
 
             try {
-               ServerLoginNetHandler.this.gameProfile = ServerLoginNetHandler.this.server.getSessionService().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s, this.getAddress());
-               if (ServerLoginNetHandler.this.gameProfile != null) {
-                  ServerLoginNetHandler.LOGGER.info("UUID of player {} is {}", ServerLoginNetHandler.this.gameProfile.getName(), ServerLoginNetHandler.this.gameProfile.getId());
-                  ServerLoginNetHandler.this.state = ServerLoginNetHandler.State.READY_TO_ACCEPT;
-               } else if (ServerLoginNetHandler.this.server.isSingleplayer()) {
+               gameProfile = server.getSessionService().hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s, this.getAddress());
+               if (gameProfile != null) {
+                  // CraftBukkit start - fire PlayerPreLoginEvent
+                  if (!connection.isConnected()) {
+                     return;
+                  }
+
+                  new LoginHandler().fireEvents();
+               } else if (server.isSingleplayer()) {
                   ServerLoginNetHandler.LOGGER.warn("Failed to verify username but will let them in anyway!");
-                  ServerLoginNetHandler.this.gameProfile = ServerLoginNetHandler.this.createFakeProfile(gameprofile);
-                  ServerLoginNetHandler.this.state = ServerLoginNetHandler.State.READY_TO_ACCEPT;
+                  gameProfile = createFakeProfile(gameprofile);
+                  state = ServerLoginNetHandler.State.NEGOTIATING;
                } else {
-                  ServerLoginNetHandler.this.disconnect(new TranslationTextComponent("multiplayer.disconnect.unverified_username"));
+                  disconnect(new TranslationTextComponent("multiplayer.disconnect.unverified_username"));
                   ServerLoginNetHandler.LOGGER.error("Username '{}' tried to join with an invalid session", (Object)gameprofile.getName());
                }
             } catch (AuthenticationUnavailableException authenticationunavailableexception) {
-               if (ServerLoginNetHandler.this.server.isSingleplayer()) {
+               if (server.isSingleplayer()) {
                   ServerLoginNetHandler.LOGGER.warn("Authentication servers are down but will let them in anyway!");
-                  ServerLoginNetHandler.this.gameProfile = ServerLoginNetHandler.this.createFakeProfile(gameprofile);
-                  ServerLoginNetHandler.this.state = ServerLoginNetHandler.State.READY_TO_ACCEPT;
+                  gameProfile = createFakeProfile(gameprofile);
+                  state = ServerLoginNetHandler.State.NEGOTIATING;
                } else {
-                  ServerLoginNetHandler.this.disconnect(new TranslationTextComponent("multiplayer.disconnect.authservers_down"));
+                  disconnect(new TranslationTextComponent("multiplayer.disconnect.authservers_down"));
                   ServerLoginNetHandler.LOGGER.error("Couldn't verify username because servers are unavailable");
                }
+               // CraftBukkit start - catch all exceptions
+            } catch (Exception exception) {
+               disconnect("Failed to verify username!");
+               server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
+               // CraftBukkit end
             }
 
          }
 
          @Nullable
          private InetAddress getAddress() {
-            SocketAddress socketaddress = ServerLoginNetHandler.this.connection.getRemoteAddress();
-            return ServerLoginNetHandler.this.server.getPreventProxyConnections() && socketaddress instanceof InetSocketAddress ? ((InetSocketAddress)socketaddress).getAddress() : null;
+            SocketAddress socketaddress = connection.getRemoteAddress();
+            return server.getPreventProxyConnections() && socketaddress instanceof InetSocketAddress ? ((InetSocketAddress) socketaddress).getAddress() : null;
          }
       };
       thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
       thread.start();
    }
 
+   // Spigot start
+   public class LoginHandler {
+      public void fireEvents() throws Exception{
+         String playerName = gameProfile.getName();
+         java.net.InetAddress address = ((java.net.InetSocketAddress) connection.getRemoteAddress()).getAddress();
+         java.util.UUID uniqueId = gameProfile.getId();
+         final CraftServer server = ServerLoginNetHandler.this.server.server;
+         AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+         server.getPluginManager().callEvent(asyncEvent);
+         if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+            if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+               event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+            }
+            Waitable<Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+               @Override
+               protected PlayerPreLoginEvent.Result evaluate() {
+                  server.getPluginManager().callEvent(event);
+                  return event.getResult();
+               }};
+            ServerLoginNetHandler.this.server.processQueue.add(waitable);
+            if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+               disconnect(event.getKickMessage());
+               return;
+            }
+         } else {
+            if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+               disconnect(asyncEvent.getKickMessage());
+               return;
+            }
+         }
+         // CraftBukkit end
+         LOGGER.info("UUID of player {} is {}", gameProfile.getName(), gameProfile.getId());
+         state = ServerLoginNetHandler.State.NEGOTIATING;
+      }
+   }
+   // Spigot end
+
    public void handleCustomQueryPacket(CCustomPayloadLoginPacket p_209526_1_) {
+      if (!net.minecraftforge.fml.network.NetworkHooks.onCustomPayload(p_209526_1_, this.connection))
       this.disconnect(new TranslationTextComponent("multiplayer.disconnect.unexpected_query_response"));
    }
 
