--- a/net/minecraft/network/handshake/client/CHandshakePacket.java
+++ b/net/minecraft/network/handshake/client/CHandshakePacket.java
@@ -1,6 +_,10 @@
 package net.minecraft.network.handshake.client;
 
 import java.io.IOException;
+import java.util.Objects;
+
+import com.google.gson.Gson;
+import com.mojang.authlib.properties.Property;
 import net.minecraft.network.IPacket;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.ProtocolType;
@@ -8,12 +_,20 @@
 import net.minecraft.util.SharedConstants;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import net.minecraftforge.fml.network.FMLNetworkConstants;
+import net.minecraftforge.fml.network.NetworkHooks;
+import org.spigotmc.SpigotConfig;
 
 public class CHandshakePacket implements IPacket<IHandshakeNetHandler> {
    private int protocolVersion;
-   private String hostName;
-   private int port;
+   public String hostName;
+   public String original_ip;
+   public int port;
    private ProtocolType intention;
+   private String fmlVersion = net.minecraftforge.fml.network.FMLNetworkConstants.NETVERSION;
+
+   private static final String EXTRA_DATA = "extraData";
+   private static final Gson GSON = new Gson();
 
    public CHandshakePacket() {
    }
@@ -28,14 +_,29 @@
 
    public void read(PacketBuffer p_148837_1_) throws IOException {
       this.protocolVersion = p_148837_1_.readVarInt();
-      this.hostName = p_148837_1_.readUtf(255);
+      this.hostName = p_148837_1_.readUtf(Short.MAX_VALUE);
       this.port = p_148837_1_.readUnsignedShort();
       this.intention = ProtocolType.getById(p_148837_1_.readVarInt());
+      this.fmlVersion = net.minecraftforge.fml.network.NetworkHooks.getFMLVersion(this.hostName);
+      if (SpigotConfig.bungee && !Objects.equals(this.fmlVersion, FMLNetworkConstants.NETVERSION)) {
+         String[] split = this.hostName.split("\0");
+         if (split.length == 4) {
+            Property[] properties = GSON.fromJson(split[3], Property[].class);
+            for (Property property : properties) {
+               if (Objects.equals(property.getName(), EXTRA_DATA)) {
+                  String extraData = property.getValue().replace("\1", "\0");
+                  this.fmlVersion = NetworkHooks.getFMLVersion(split[0] + extraData);
+               }
+            }
+         }
+      }
+      this.original_ip = this.hostName;
+      this.hostName = this.hostName.split("\0")[0];
    }
 
    public void write(PacketBuffer p_148840_1_) throws IOException {
       p_148840_1_.writeVarInt(this.protocolVersion);
-      p_148840_1_.writeUtf(this.hostName);
+      p_148840_1_.writeUtf(this.hostName + "\0"+net.minecraftforge.fml.network.FMLNetworkConstants.NETVERSION+"\0");
       p_148840_1_.writeShort(this.port);
       p_148840_1_.writeVarInt(this.intention.getId());
    }
@@ -50,5 +_,9 @@
 
    public int getProtocolVersion() {
       return this.protocolVersion;
+   }
+
+   public String getFMLVersion() {
+      return this.fmlVersion;
    }
 }
