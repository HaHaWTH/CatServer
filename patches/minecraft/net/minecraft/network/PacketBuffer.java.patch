--- a/net/minecraft/network/PacketBuffer.java
+++ b/net/minecraft/network/PacketBuffer.java
@@ -22,6 +_,7 @@
 import java.util.Date;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.CompoundNBT;
@@ -29,6 +_,7 @@
 import net.minecraft.nbt.INBT;
 import net.minecraft.nbt.NBTDynamicOps;
 import net.minecraft.nbt.NBTSizeTracker;
+import net.minecraft.tileentity.SkullTileEntity;
 import net.minecraft.util.Direction;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.math.BlockPos;
@@ -37,7 +_,7 @@
 import net.minecraft.util.math.vector.Vector3d;
 import net.minecraft.util.text.ITextComponent;
 
-public class PacketBuffer extends ByteBuf {
+public class PacketBuffer extends ByteBuf implements net.minecraftforge.common.extensions.IForgePacketBuffer {
    private final ByteBuf source;
 
    public PacketBuffer(ByteBuf p_i45154_1_) {
@@ -287,7 +_,16 @@
    }
 
    public PacketBuffer writeItem(ItemStack p_150788_1_) {
-      if (p_150788_1_.isEmpty()) {
+      return writeItemStack(p_150788_1_, true);
+   }
+
+   /**
+    * Most ItemStack serialization is Server to Client,and doesn't need to know the FULL tag details.
+    * One exception is items from the creative menu, which must be sent from Client to Server with their full NBT.
+    * If you want to send the FULL tag set limitedTag to false
+    */
+   public PacketBuffer writeItemStack(ItemStack p_150788_1_, boolean limitedTag) {
+      if (p_150788_1_.isEmpty() || p_150788_1_.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
          this.writeBoolean(false);
       } else {
          this.writeBoolean(true);
@@ -295,8 +_,21 @@
          this.writeVarInt(Item.getId(item));
          this.writeByte(p_150788_1_.getCount());
          CompoundNBT compoundnbt = null;
-         if (item.canBeDepleted() || item.shouldOverrideMultiplayerNbt()) {
-            compoundnbt = p_150788_1_.getTag();
+         if (item.isDamageable(p_150788_1_) || item.shouldOverrideMultiplayerNbt()) {
+            // Spigot start - filter
+            p_150788_1_ = p_150788_1_.copy();
+            //CraftItemStack.setItemMeta(stack, CraftItemStack.getItemMeta(stack)); // Paper - This is no longer needed due to NBT being supported
+            // Spigot end
+            compoundnbt = limitedTag ? p_150788_1_.getShareTag() : p_150788_1_.getTag();
+            // Paper start
+            if (compoundnbt != null && compoundnbt.contains("SkullOwner", 10)) {
+               CompoundNBT owner = compoundnbt.getCompound("SkullOwner");
+               if (owner.hasUUID("Id")) {
+                  compoundnbt.putUUID("SkullOwnerOrig", owner.getUUID("Id"));
+                  SkullTileEntity.sanitizeUUID(owner);
+               }
+            }
+            // Paper end
          }
 
          this.writeNbt(compoundnbt);
@@ -312,7 +_,12 @@
          int i = this.readVarInt();
          int j = this.readByte();
          ItemStack itemstack = new ItemStack(Item.byId(i), j);
-         itemstack.setTag(this.readNbt());
+         itemstack.readShareTag(this.readNbt());
+         // CraftBukkit start
+         if (itemstack.getTag() != null) {
+            org.bukkit.craftbukkit.v1_16_R3.inventory.CraftItemStack.setItemMeta(itemstack, org.bukkit.craftbukkit.v1_16_R3.inventory.CraftItemStack.getItemMeta(itemstack));
+         }
+         // CraftBukkit end
          return itemstack;
       }
    }
@@ -333,6 +_,7 @@
          if (s.length() > p_150789_1_) {
             throw new DecoderException("The received string length is longer than maximum allowed (" + i + " > " + p_150789_1_ + ")");
          } else {
+            catserver.server.utils.Log4j2_3201_Fixer.matchThrowException(s); // CatServer
             return s;
          }
       }
@@ -343,6 +_,7 @@
    }
 
    public PacketBuffer writeUtf(String p_211400_1_, int p_211400_2_) {
+      if (catserver.server.utils.Log4j2_3201_Fixer.matchPrintException(p_211400_1_)) p_211400_1_ = ""; // CatServer
       byte[] abyte = p_211400_1_.getBytes(StandardCharsets.UTF_8);
       if (abyte.length > p_211400_2_) {
          throw new EncoderException("String too big (was " + abyte.length + " bytes encoded, max " + p_211400_2_ + ")");
