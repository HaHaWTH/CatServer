--- a/net/minecraft/entity/projectile/FishingBobberEntity.java
+++ b/net/minecraft/entity/projectile/FishingBobberEntity.java
@@ -43,12 +_,15 @@
 import net.minecraft.world.server.ServerWorld;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import org.bukkit.entity.FishHook;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerFishEvent;
 
 public class FishingBobberEntity extends ProjectileEntity {
    private final Random syncronizedRandom = new Random();
    private boolean biting;
    private int outOfWaterTime;
-   private static final DataParameter<Integer> DATA_HOOKED_ENTITY = EntityDataManager.defineId(FishingBobberEntity.class, DataSerializers.INT);
+   public static final DataParameter<Integer> DATA_HOOKED_ENTITY = EntityDataManager.defineId(FishingBobberEntity.class, DataSerializers.INT);
    private static final DataParameter<Boolean> DATA_BITING = EntityDataManager.defineId(FishingBobberEntity.class, DataSerializers.BOOLEAN);
    private int life;
    private int nibble;
@@ -56,11 +_,17 @@
    private int timeUntilHooked;
    private float fishAngle;
    private boolean openWater = true;
-   private Entity hookedIn;
-   private FishingBobberEntity.State currentState = FishingBobberEntity.State.FLYING;
+   public Entity hookedIn;
+   public FishingBobberEntity.State currentState = FishingBobberEntity.State.FLYING;
    private final int luck;
    private final int lureSpeed;
 
+   // CraftBukkit start - Extra variables to enable modification of fishing wait time, values are minecraft defaults
+   public int minWaitTime = 100;
+   public int maxWaitTime = 600;
+   public boolean applyLure = true;
+   // CraftBukkit end
+
    private FishingBobberEntity(World p_i50219_1_, PlayerEntity p_i50219_2_, int p_i50219_3_, int p_i50219_4_) {
       super(EntityType.FISHING_BOBBER, p_i50219_1_);
       this.noCulling = true;
@@ -245,7 +_,9 @@
 
    private void checkCollision() {
       RayTraceResult raytraceresult = ProjectileHelper.getHitResult(this, this::canHitEntity);
-      this.onHit(raytraceresult);
+      if (raytraceresult.getType() == RayTraceResult.Type.MISS || !net.minecraftforge.event.ForgeEventFactory.onProjectileImpact(this, raytraceresult)) {
+         this.preOnHit(raytraceresult);
+      }
    }
 
    protected boolean canHitEntity(Entity p_230298_1_) {
@@ -288,6 +_,10 @@
             this.timeUntilLured = 0;
             this.timeUntilHooked = 0;
             this.getEntityData().set(DATA_BITING, false);
+            // CraftBukkit start
+            PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.getPlayerOwner().getBukkitEntity(), null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.FAILED_ATTEMPT);
+            this.level.getCBServer().getPluginManager().callEvent(playerFishEvent);
+            // CraftBukkit end
          }
       } else if (this.timeUntilHooked > 0) {
          this.timeUntilHooked -= i;
@@ -300,7 +_,7 @@
             double d1 = (double)((float)MathHelper.floor(this.getY()) + 1.0F);
             double d2 = this.getZ() + (double)(f2 * (float)this.timeUntilHooked * 0.1F);
             BlockState blockstate = serverworld.getBlockState(new BlockPos(d0, d1 - 1.0D, d2));
-            if (blockstate.is(Blocks.WATER)) {
+            if (serverworld.getBlockState(new BlockPos((int)d0, (int)d1 - 1, (int)d2)).getMaterial() == net.minecraft.block.material.Material.WATER) {
                if (this.random.nextFloat() < 0.15F) {
                   serverworld.sendParticles(ParticleTypes.BUBBLE, d0, d1 - (double)0.1F, d2, 1, (double)f1, 0.1D, (double)f2, 0.0D);
                }
@@ -311,6 +_,13 @@
                serverworld.sendParticles(ParticleTypes.FISHING, d0, d1, d2, 0, (double)(-f4), 0.01D, (double)f3, 1.0D);
             }
          } else {
+            // CraftBukkit start
+            PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.getPlayerOwner().getBukkitEntity(), null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.BITE);
+            this.level.getCBServer().getPluginManager().callEvent(playerFishEvent);
+            if (playerFishEvent.isCancelled()) {
+               return;
+            }
+            // CraftBukkit end
             this.playSound(SoundEvents.FISHING_BOBBER_SPLASH, 0.25F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
             double d3 = this.getY() + 0.5D;
             serverworld.sendParticles(ParticleTypes.BUBBLE, this.getX(), d3, this.getZ(), (int)(1.0F + this.getBbWidth() * 20.0F), (double)this.getBbWidth(), 0.0D, (double)this.getBbWidth(), (double)0.2F);
@@ -336,7 +_,7 @@
             double d5 = (double)((float)MathHelper.floor(this.getY()) + 1.0F);
             double d6 = this.getZ() + (double)(MathHelper.cos(f6) * f7 * 0.1F);
             BlockState blockstate1 = serverworld.getBlockState(new BlockPos(d4, d5 - 1.0D, d6));
-            if (blockstate1.is(Blocks.WATER)) {
+            if (serverworld.getBlockState(new BlockPos(d4, d5 - 1.0D, d6)).getMaterial() == net.minecraft.block.material.Material.WATER) {
                serverworld.sendParticles(ParticleTypes.SPLASH, d4, d5, d6, 2 + this.random.nextInt(2), (double)0.1F, 0.0D, (double)0.1F, 0.0D);
             }
          }
@@ -346,8 +_,10 @@
             this.timeUntilHooked = MathHelper.nextInt(this.random, 20, 80);
          }
       } else {
-         this.timeUntilLured = MathHelper.nextInt(this.random, 100, 600);
-         this.timeUntilLured -= this.lureSpeed * 20 * 5;
+         // CraftBukkit start - logic to modify fishing wait time
+         this.timeUntilLured = MathHelper.nextInt(this.random, this.minWaitTime, this.maxWaitTime); // PAIL rename waitTime
+         this.timeUntilLured -= (this.applyLure) ? this.lureSpeed * 20 * 5 : 0; // PAIL rename waitTime, lureLevel
+         // CraftBukkit end
       }
 
    }
@@ -407,25 +_,53 @@
       PlayerEntity playerentity = this.getPlayerOwner();
       if (!this.level.isClientSide && playerentity != null) {
          int i = 0;
+         net.minecraftforge.event.entity.player.ItemFishedEvent event = null;
          if (this.hookedIn != null) {
+            // CraftBukkit start
+            PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.getPlayerOwner().getBukkitEntity(), this.hookedIn.getBukkitEntity(), (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.CAUGHT_ENTITY);
+            this.level.getCBServer().getPluginManager().callEvent(playerFishEvent);
+            if (playerFishEvent.isCancelled()) {
+               return 0;
+            }
+            // CraftBukkit end
             this.bringInHookedEntity();
             CriteriaTriggers.FISHING_ROD_HOOKED.trigger((ServerPlayerEntity)playerentity, p_146034_1_, this, Collections.emptyList());
             this.level.broadcastEntityEvent(this, (byte)31);
             i = this.hookedIn instanceof ItemEntity ? 3 : 5;
          } else if (this.nibble > 0) {
             LootContext.Builder lootcontext$builder = (new LootContext.Builder((ServerWorld)this.level)).withParameter(LootParameters.ORIGIN, this.position()).withParameter(LootParameters.TOOL, p_146034_1_).withParameter(LootParameters.THIS_ENTITY, this).withRandom(this.random).withLuck((float)this.luck + playerentity.getLuck());
+            lootcontext$builder.withParameter(LootParameters.KILLER_ENTITY, this.getOwner()).withParameter(LootParameters.THIS_ENTITY, this);
             LootTable loottable = this.level.getServer().getLootTables().get(LootTables.FISHING);
             List<ItemStack> list = loottable.getRandomItems(lootcontext$builder.create(LootParameterSets.FISHING));
+            event = new net.minecraftforge.event.entity.player.ItemFishedEvent(list, this.onGround ? 2 : 1, this);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+            if (event.isCanceled()) {
+               this.remove();
+               return event.getRodDamage();
+            }
             CriteriaTriggers.FISHING_ROD_HOOKED.trigger((ServerPlayerEntity)playerentity, p_146034_1_, this, list);
 
             for(ItemStack itemstack : list) {
                ItemEntity itementity = new ItemEntity(this.level, this.getX(), this.getY(), this.getZ(), itemstack);
+               // CraftBukkit start
+               PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.getPlayerOwner().getBukkitEntity(), itementity.getBukkitEntity(), (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.CAUGHT_FISH);
+               playerFishEvent.setExpToDrop(this.random.nextInt(6) + 1);
+               this.level.getCBServer().getPluginManager().callEvent(playerFishEvent);
+               if (playerFishEvent.isCancelled()) {
+                  return 0;
+               }
+               // CraftBukkit end
                double d0 = playerentity.getX() - this.getX();
                double d1 = playerentity.getY() - this.getY();
                double d2 = playerentity.getZ() - this.getZ();
                double d3 = 0.1D;
                itementity.setDeltaMovement(d0 * 0.1D, d1 * 0.1D + Math.sqrt(Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2)) * 0.08D, d2 * 0.1D);
                this.level.addFreshEntity(itementity);
+               // CraftBukkit start - this.random.nextInt(6) + 1 -> playerFishEvent.getExpToDrop()
+               if (playerFishEvent.getExpToDrop() > 0) {
+                  this.getPlayerOwner().level.addFreshEntity(new ExperienceOrbEntity(this.getPlayerOwner().level, this.getPlayerOwner().getX(), this.getPlayerOwner().getY() + 0.5D, this.getPlayerOwner().getZ() + 0.5D, playerFishEvent.getExpToDrop()));
+               }
+               // CraftBukkit end
                playerentity.level.addFreshEntity(new ExperienceOrbEntity(playerentity.level, playerentity.getX(), playerentity.getY() + 0.5D, playerentity.getZ() + 0.5D, this.random.nextInt(6) + 1));
                if (itemstack.getItem().is(ItemTags.FISHES)) {
                   playerentity.awardStat(Stats.FISH_CAUGHT, 1);
@@ -436,11 +_,27 @@
          }
 
          if (this.onGround) {
+            // CraftBukkit start
+            PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.getPlayerOwner().getBukkitEntity(), null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.IN_GROUND);
+            this.level.getCBServer().getPluginManager().callEvent(playerFishEvent);
+            if (playerFishEvent.isCancelled()) {
+               return 0;
+            }
+            // CraftBukkit end
             i = 2;
          }
+         // CraftBukkit start
+         if (i == 0) {
+            PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.getPlayerOwner().getBukkitEntity(), null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.REEL_IN);
+            this.level.getCBServer().getPluginManager().callEvent(playerFishEvent);
+            if (playerFishEvent.isCancelled()) {
+               return 0;
+            }
+         }
+         // CraftBukkit end
 
          this.remove();
-         return i;
+         return event == null ? i : event.getRodDamage();
       } else {
          return 0;
       }
@@ -455,7 +_,7 @@
       super.handleEntityEvent(p_70103_1_);
    }
 
-   protected void bringInHookedEntity() {
+   public void bringInHookedEntity() {
       Entity entity = this.getOwner();
       if (entity != null) {
          Vector3d vector3d = (new Vector3d(entity.getX() - this.getX(), entity.getY() - this.getY(), entity.getZ() - this.getZ())).scale(0.1D);
@@ -467,8 +_,9 @@
       return false;
    }
 
-   public void remove() {
-      super.remove();
+   @Override
+   public void remove(boolean keepData) {
+      super.remove(keepData);
       PlayerEntity playerentity = this.getPlayerOwner();
       if (playerentity != null) {
          playerentity.fishing = null;
