--- a/net/minecraft/entity/projectile/AbstractArrowEntity.java
+++ b/net/minecraft/entity/projectile/AbstractArrowEntity.java
@@ -15,6 +_,7 @@
 import net.minecraft.entity.LivingEntity;
 import net.minecraft.entity.MoverType;
 import net.minecraft.entity.Pose;
+import net.minecraft.entity.item.ItemEntity;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.item.ItemStack;
@@ -44,19 +_,25 @@
 import net.minecraft.world.World;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_16_R3.entity.CraftItem;
+import org.bukkit.entity.AbstractArrow;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.player.PlayerPickupArrowEvent;
 
 public abstract class AbstractArrowEntity extends ProjectileEntity {
    private static final DataParameter<Byte> ID_FLAGS = EntityDataManager.defineId(AbstractArrowEntity.class, DataSerializers.BYTE);
    private static final DataParameter<Byte> PIERCE_LEVEL = EntityDataManager.defineId(AbstractArrowEntity.class, DataSerializers.BYTE);
    @Nullable
    private BlockState lastState;
-   protected boolean inGround;
+   public boolean inGround;
    protected int inGroundTime;
    public AbstractArrowEntity.PickupStatus pickup = AbstractArrowEntity.PickupStatus.DISALLOWED;
    public int shakeTime;
-   private int life;
+   public int life;
    private double baseDamage = 2.0D;
-   private int knockback;
+   public int knockback;
    private SoundEvent soundEvent = this.getDefaultHitGroundSoundEvent();
    private IntOpenHashSet piercingIgnoreEntityIds;
    private List<Entity> piercedAndKilledEntities;
@@ -130,7 +_,7 @@
 
       BlockPos blockpos = this.blockPosition();
       BlockState blockstate = this.level.getBlockState(blockpos);
-      if (!blockstate.isAir() && !flag) {
+      if (!blockstate.isAir(this.level, blockpos) && !flag) {
          VoxelShape voxelshape = blockstate.getCollisionShape(this.level, blockpos);
          if (!voxelshape.isEmpty()) {
             Vector3d vector3d1 = this.position();
@@ -161,6 +_,7 @@
 
          ++this.inGroundTime;
       } else {
+         if (tickCount > 200) this.tickDespawnCounter(); // Paper - tick despawnCounter regardless after 10 seconds
          this.inGroundTime = 0;
          Vector3d vector3d2 = this.position();
          Vector3d vector3d3 = vector3d2.add(vector3d);
@@ -184,8 +_,8 @@
                }
             }
 
-            if (raytraceresult != null && !flag) {
-               this.onHit(raytraceresult);
+            if (raytraceresult != null && raytraceresult.getType() != RayTraceResult.Type.MISS && !flag && !net.minecraftforge.event.ForgeEventFactory.onProjectileImpact(this, raytraceresult)) {
+               this.preOnHit(raytraceresult);
                this.hasImpulse = true;
             }
 
@@ -260,9 +_,10 @@
 
    }
 
+   protected final void tickDespawnCounter() { this.tickDespawn(); } // Paper - OBFHELPER
    protected void tickDespawn() {
       ++this.life;
-      if (this.life >= 1200) {
+      if (this.life >= ((this instanceof TridentEntity) ? level.spigotConfig.tridentDespawnRate : level.spigotConfig.arrowDespawnRate)) { // Spigot
          this.remove();
       }
 
@@ -320,7 +_,15 @@
       boolean flag = entity.getType() == EntityType.ENDERMAN;
       int k = entity.getRemainingFireTicks();
       if (this.isOnFire() && !flag) {
-         entity.setSecondsOnFire(5);
+         // CraftBukkit start
+         EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+         Bukkit.getPluginManager().callEvent(combustEvent);
+         if (!combustEvent.isCancelled()) {
+            entity.putCallCombustEvent(false);
+            entity.setSecondsOnFire(combustEvent.getDuration());
+            entity.putCallCombustEvent(true);
+         }
+         // CraftBukkit end
       }
 
       if (entity.hurt(damagesource, (float)i)) {
@@ -477,8 +_,20 @@
 
    public void playerTouch(PlayerEntity p_70100_1_) {
       if (!this.level.isClientSide && (this.inGround || this.isNoPhysics()) && this.shakeTime <= 0) {
+         // CraftBukkit start
+         ItemStack itemstack = this.getPickupItem();
+         if (this.pickup == PickupStatus.ALLOWED && !itemstack.isEmpty() && p_70100_1_.inventory.canHold(itemstack) > 0) {
+            ItemEntity item = new ItemEntity(this.level, this.getX(), this.getY(), this.getZ(), itemstack);
+            PlayerPickupArrowEvent event = new PlayerPickupArrowEvent((Player)p_70100_1_.getBukkitEntity(), new CraftItem(this.level.getCBServer(), this, item), (AbstractArrow)this.getBukkitEntity());
+            this.level.getCBServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+               return;
+            }
+            itemstack = item.getItem();
+         }
          boolean flag = this.pickup == AbstractArrowEntity.PickupStatus.ALLOWED || this.pickup == AbstractArrowEntity.PickupStatus.CREATIVE_ONLY && p_70100_1_.abilities.instabuild || this.isNoPhysics() && this.getOwner().getUUID() == p_70100_1_.getUUID();
-         if (this.pickup == AbstractArrowEntity.PickupStatus.ALLOWED && !p_70100_1_.inventory.add(this.getPickupItem())) {
+         if (this.pickup == AbstractArrowEntity.PickupStatus.ALLOWED && !p_70100_1_.inventory.add(itemstack)) {
+            // CraftBukkit end
             flag = false;
          }
 
