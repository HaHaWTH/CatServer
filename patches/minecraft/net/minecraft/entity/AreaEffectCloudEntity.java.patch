--- a/net/minecraft/entity/AreaEffectCloudEntity.java
+++ b/net/minecraft/entity/AreaEffectCloudEntity.java
@@ -25,12 +_,16 @@
 import net.minecraft.potion.Potion;
 import net.minecraft.potion.PotionUtils;
 import net.minecraft.potion.Potions;
+import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.registry.Registry;
 import net.minecraft.world.World;
 import net.minecraft.world.server.ServerWorld;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.v1_16_R3.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory;
+import org.bukkit.event.entity.AreaEffectCloudApplyEvent;
 
 public class AreaEffectCloudEntity extends Entity {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -39,15 +_,15 @@
    private static final DataParameter<Boolean> DATA_WAITING = EntityDataManager.defineId(AreaEffectCloudEntity.class, DataSerializers.BOOLEAN);
    private static final DataParameter<IParticleData> DATA_PARTICLE = EntityDataManager.defineId(AreaEffectCloudEntity.class, DataSerializers.PARTICLE);
    private Potion potion = Potions.EMPTY;
-   private final List<EffectInstance> effects = Lists.newArrayList();
+   public final List<EffectInstance> effects = Lists.newArrayList(); // private->public CraftBukkit
    private final Map<Entity, Integer> victims = Maps.newHashMap();
    private int duration = 600;
-   private int waitTime = 20;
-   private int reapplicationDelay = 20;
+   public int waitTime = 20; // private->public CraftBukkit
+   public int reapplicationDelay = 20; // private->public CraftBukkit
    private boolean fixedColor;
-   private int durationOnUse;
-   private float radiusOnUse;
-   private float radiusPerTick;
+   public int durationOnUse; // private->public CraftBukkit
+   public float radiusOnUse; // private->public CraftBukkit
+   public float radiusPerTick; // private->public CraftBukkit
    private LivingEntity owner;
    private UUID ownerUUID;
 
@@ -113,6 +_,22 @@
 
    }
 
+   // CraftBukkit start accessor methods
+   public void refreshEffects() {
+      if (!this.fixedColor) {
+         this.getEntityData().set(AreaEffectCloudEntity.DATA_COLOR, PotionUtils.getColor(PotionUtils.getAllEffects(this.potion, this.effects)));
+      }
+   }
+
+   public String getTypeCB() {
+      return ((ResourceLocation)Registry.POTION.getKey(this.potion)).toString();
+   }
+
+   public void setType(final String string) {
+      this.setPotion(Registry.POTION.get(new ResourceLocation(string)));
+   }
+   // CraftBukkit end
+
    public int getColor() {
       return this.getEntityData().get(DATA_COLOR);
    }
@@ -146,10 +_,27 @@
       this.duration = p_184486_1_;
    }
 
+   // Spigot start - copied from below
+   @Override
+   public void inactiveTick() {
+      super.inactiveTick();
+      if (this.tickCount >= this.waitTime + this.duration) {
+         this.remove();
+         return;
+      }
+   }
+   // Spigot end
+
    public void tick() {
       super.tick();
       boolean flag = this.isWaiting();
       float f = this.getRadius();
+      // Paper start - fix MC-114618
+      if (f < 0.0F) {
+         this.remove();
+         return;
+      }
+      // Paper end
       if (this.level.isClientSide) {
          IParticleData iparticledata = this.getParticle();
          if (flag) {
@@ -217,6 +_,7 @@
          if (this.tickCount % 5 == 0) {
             Iterator<Entry<Entity, Integer>> iterator = this.victims.entrySet().iterator();
 
+            List<org.bukkit.entity.LivingEntity> entities = new java.util.ArrayList<org.bukkit.entity.LivingEntity>(); // CraftBukkit
             while(iterator.hasNext()) {
                Entry<Entity, Integer> entry = iterator.next();
                if (this.tickCount >= entry.getValue()) {
@@ -242,13 +_,24 @@
                         double d1 = livingentity.getZ() - this.getZ();
                         double d2 = d0 * d0 + d1 * d1;
                         if (d2 <= (double)(f * f)) {
+                           // CraftBukkit start
+                           entities.add((org.bukkit.entity.LivingEntity) livingentity.getBukkitEntity());
+                        }
+                     }
+                  }
+                  AreaEffectCloudApplyEvent event = CraftEventFactory.callAreaEffectCloudApplyEvent(this, entities);
+                  if(!event.isCancelled()){
+                     for(org.bukkit.entity.LivingEntity entity : event.getAffectedEntities()) {
+                        if(entity instanceof CraftLivingEntity){
+                           LivingEntity livingentity = ((CraftLivingEntity) entity).getHandle();
+                           // CraftBukkit end
                            this.victims.put(livingentity, this.tickCount + this.reapplicationDelay);
 
                            for(EffectInstance effectinstance : list) {
                               if (effectinstance.getEffect().isInstantenous()) {
                                  effectinstance.getEffect().applyInstantenousEffect(this, this.getOwner(), livingentity, effectinstance.getAmplifier(), 0.5D);
                               } else {
-                                 livingentity.addEffect(new EffectInstance(effectinstance));
+                                 livingentity.addEffect(new EffectInstance(effectinstance), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.AREA_EFFECT_CLOUD); // CraftBukkit
                               }
                            }
 
