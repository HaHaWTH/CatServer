--- a/net/minecraft/entity/Entity.java
+++ b/net/minecraft/entity/Entity.java
@@ -22,7 +_,6 @@
 import net.minecraft.block.BlockRenderType;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
-import net.minecraft.block.FenceGateBlock;
 import net.minecraft.block.HoneyBlock;
 import net.minecraft.block.PortalInfo;
 import net.minecraft.block.PortalSize;
@@ -39,6 +_,7 @@
 import net.minecraft.entity.effect.LightningBoltEntity;
 import net.minecraft.entity.item.BoatEntity;
 import net.minecraft.entity.item.ItemEntity;
+import net.minecraft.entity.passive.TameableEntity;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.fluid.Fluid;
@@ -108,17 +_,78 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
-public abstract class Entity implements INameable, ICommandSource {
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.Server;
+import org.bukkit.block.BlockFace;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.v1_16_R3.CraftWorld;
+import org.bukkit.craftbukkit.v1_16_R3.entity.CraftEntity;
+import org.bukkit.craftbukkit.v1_16_R3.entity.CraftPlayer;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftPortalEvent;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.entity.EntityAirChangeEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.entity.EntityDropItemEvent;
+import org.bukkit.event.entity.EntityPortalEvent;
+import org.bukkit.event.entity.EntityPoseChangeEvent;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
+import org.bukkit.event.vehicle.VehicleEnterEvent;
+import org.bukkit.event.vehicle.VehicleExitEvent;
+import org.bukkit.plugin.PluginManager;
+import org.spigotmc.CustomTimingsHandler;
+
+public abstract class Entity extends net.minecraftforge.common.capabilities.CapabilityProvider<Entity> implements INameable, ICommandSource, net.minecraftforge.common.extensions.IForgeEntity {
+
+   // CraftBukkit start
+   private static final int CURRENT_LEVEL = 2;
+   boolean preserveMotion = true; // Paper - keep initial motion on first setPositionRotation
+   static boolean isLevelAtLeast(CompoundNBT tag, int level) {
+      return tag.contains("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
+   }
+   private CraftEntity bukkitEntity;
+   public CraftEntity getBukkitEntity() {
+      if (bukkitEntity == null) {
+         bukkitEntity = CraftEntity.getEntity(level.getCBServer(), this);
+      }
+      return bukkitEntity;
+   }
+   @Override
+   public CommandSender getBukkitSender(CommandSource wrapper) {
+      return getBukkitEntity();
+   }
+   // CraftBukkit end
+   // LoliServer start
+   @Deprecated
+   public void setBukkitEntity(CraftEntity bukkitEntity) {
+      this.bukkitEntity = bukkitEntity;
+      if (bukkitEntity instanceof org.bukkit.craftbukkit.v1_16_R3.entity.CraftPlayer && this instanceof net.minecraft.entity.player.ServerPlayerEntity) {
+         ((org.bukkit.craftbukkit.v1_16_R3.entity.CraftPlayer) this.bukkitEntity).setHandle((net.minecraft.entity.player.ServerPlayerEntity) this);
+      } else if (bukkitEntity instanceof org.bukkit.craftbukkit.v1_16_R3.entity.CraftHumanEntity && this instanceof net.minecraft.entity.player.PlayerEntity) {
+         ((org.bukkit.craftbukkit.v1_16_R3.entity.CraftHumanEntity) this.bukkitEntity).setHandle((net.minecraft.entity.player.PlayerEntity) this);
+      } if (bukkitEntity instanceof org.bukkit.craftbukkit.v1_16_R3.entity.CraftLivingEntity && this instanceof net.minecraft.entity.LivingEntity) {
+         ((org.bukkit.craftbukkit.v1_16_R3.entity.CraftLivingEntity) this.bukkitEntity).setHandle((net.minecraft.entity.LivingEntity) this);
+      } else {
+         this.bukkitEntity.setHandle(this);
+      }
+   }
+   // LoliServer end
+
    protected static final Logger LOGGER = LogManager.getLogger();
    protected static final AtomicInteger ENTITY_COUNTER = new AtomicInteger();
    private static final List<ItemStack> EMPTY_LIST = Collections.emptyList();
    private static final AxisAlignedBB INITIAL_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
    private static double viewScale = 1.0D;
+   @Deprecated // Forge: Use the getter to allow overriding in mods
    private final EntityType<?> type;
    private int id = ENTITY_COUNTER.incrementAndGet();
    public boolean blocksBuilding;
-   private final List<Entity> passengers = Lists.newArrayList();
+   public final List<Entity> passengers = Lists.newArrayList();
    protected int boardingCooldown;
    @Nullable
    private Entity vehicle;
@@ -135,11 +_,12 @@
    public float yRotO;
    public float xRotO;
    private AxisAlignedBB bb = INITIAL_AABB;
-   protected boolean onGround;
+   public boolean onGround;
    public boolean horizontalCollision;
    public boolean verticalCollision;
    public boolean hurtMarked;
    protected Vector3d stuckSpeedMultiplier = Vector3d.ZERO;
+   @Deprecated //Forge: Use isAlive, remove(boolean) and revive() instead of directly accessing this field. To allow the entity to react to and better control this information.
    public boolean removed;
    public float walkDistO;
    public float walkDist;
@@ -155,8 +_,8 @@
    public float pushthrough;
    protected final Random random = new Random();
    public int tickCount;
-   private int remainingFireTicks = -this.getFireImmuneTicks();
-   protected boolean wasTouchingWater;
+   public int remainingFireTicks = -this.getFireImmuneTicks();
+   public boolean wasTouchingWater;
    protected Object2DoubleMap<ITag<Fluid>> fluidHeight = new Object2DoubleArrayMap<>(2);
    protected boolean wasEyeInWater;
    @Nullable
@@ -179,14 +_,14 @@
    private Vector3d packetCoordinates;
    public boolean noCulling;
    public boolean hasImpulse;
-   private int portalCooldown;
+   public int portalCooldown;
    protected boolean isInsidePortal;
    protected int portalTime;
    protected BlockPos portalEntrancePos;
    private boolean invulnerable;
    protected UUID uuid = MathHelper.createInsecureUUID(this.random);
    protected String stringUUID = this.uuid.toString();
-   protected boolean glowing;
+   public boolean glowing;
    private final Set<String> tags = Sets.newHashSet();
    private boolean forceChunkAddition;
    private final double[] pistonDeltas = new double[]{0.0D, 0.0D, 0.0D};
@@ -194,7 +_,32 @@
    private EntitySize dimensions;
    private float eyeHeight;
 
+   // CraftBukkit start
+   public boolean persist = true;
+   public boolean valid;
+   public org.bukkit.projectiles.ProjectileSource projectileSource; // For projectiles only
+   public boolean forceExplosionKnockback; // SPIGOT-949
+   public boolean persistentInvisibility = false;
+   public CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.v1_16_R3.SpigotTimings.getEntityTimings(this); // Spigot
+
+   // Spigot start
+   public final org.spigotmc.ActivationRange.ActivationType activationType = org.spigotmc.ActivationRange.initializeEntityActivationType(this);
+   public final boolean defaultActivationState;
+   public long activatedTick = Integer.MIN_VALUE;
+   public void inactiveTick() { }
+   // Spigot end
+
+   public float getBukkitYaw() {
+      return this.yRot;
+   }
+
+   public boolean isChunkLoaded() {
+      return this.level.hasChunk((int)Math.floor(this.getX()) >> 4, (int)Math.floor(this.getZ()) >> 4);
+   }
+   // CraftBukkit end
+
    public Entity(EntityType<?> p_i48580_1_, World p_i48580_2_) {
+      super(Entity.class);
       this.type = p_i48580_1_;
       this.level = p_i48580_2_;
       this.dimensions = p_i48580_1_.getDimensions();
@@ -202,6 +_,13 @@
       this.blockPosition = BlockPos.ZERO;
       this.packetCoordinates = Vector3d.ZERO;
       this.setPos(0.0D, 0.0D, 0.0D);
+      // Spigot start
+      if (level != null) {
+         this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, level.spigotConfig);
+      } else {
+         this.defaultActivationState = false;
+      }
+      // Spigot end
       this.entityData = new EntityDataManager(this);
       this.entityData.define(DATA_SHARED_FLAGS_ID, (byte)0);
       this.entityData.define(DATA_AIR_SUPPLY_ID, this.getMaxAirSupply());
@@ -211,7 +_,11 @@
       this.entityData.define(DATA_NO_GRAVITY, false);
       this.entityData.define(DATA_POSE, Pose.STANDING);
       this.defineSynchedData();
-      this.eyeHeight = this.getEyeHeight(Pose.STANDING, this.dimensions);
+      net.minecraftforge.event.entity.EntityEvent.Size sizeEvent = net.minecraftforge.event.ForgeEventFactory.getEntitySizeForge(this, Pose.STANDING, this.dimensions, this.getEyeHeight(Pose.STANDING, this.dimensions));
+      this.dimensions = sizeEvent.getNewSize();
+      this.eyeHeight = sizeEvent.getNewEyeHeight();
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EntityConstructing(this));
+      this.gatherCapabilities();
    }
 
    @OnlyIn(Dist.CLIENT)
@@ -317,10 +_,22 @@
    }
 
    public void remove() {
+      this.remove(false);
+   }
+
+   public void remove(boolean keepData) {
       this.removed = true;
+      if (!keepData)
+         this.invalidateCaps();
    }
 
    public void setPose(Pose p_213301_1_) {
+      // CraftBukkit start
+      if (p_213301_1_ == this.getPose()) {
+         return;
+      }
+      this.level.getCBServer().getPluginManager().callEvent(new EntityPoseChangeEvent(this.getBukkitEntity(), org.bukkit.entity.Pose.values()[p_213301_1_.ordinal()]));
+      // CraftBukkit end
       this.entityData.set(DATA_POSE, p_213301_1_);
    }
 
@@ -336,6 +_,29 @@
    }
 
    protected void setRot(float p_70101_1_, float p_70101_2_) {
+      // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
+      if (Float.isNaN(p_70101_1_)) {
+         p_70101_1_ = 0;
+      }
+      if (p_70101_1_ == Float.POSITIVE_INFINITY || p_70101_1_ == Float.NEGATIVE_INFINITY) {
+         if (this instanceof ServerPlayerEntity) {
+            this.level.getCBServer().getLogger().warning(this.getName() + " was caught trying to crash the server with an invalid yaw");
+            ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite yaw (Hacking?)");
+         }
+         p_70101_1_ = 0;
+      }
+      // pitch was sometimes set to NaN, so we need to set it back to 0
+      if (Float.isNaN(p_70101_2_)) {
+         p_70101_2_ = 0;
+      }
+      if (p_70101_2_ == Float.POSITIVE_INFINITY || p_70101_2_ == Float.NEGATIVE_INFINITY) {
+         if (this instanceof ServerPlayerEntity) {
+            this.level.getCBServer().getLogger().warning(this.getName() + " was caught trying to crash the server with an invalid pitch");
+            ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite pitch (Hacking?)");
+         }
+         p_70101_2_ = 0;
+      }
+      // CraftBukkit end
       this.yRot = p_70101_1_ % 360.0F;
       this.xRot = p_70101_2_ % 360.0F;
    }
@@ -343,6 +_,7 @@
    public void setPos(double p_70107_1_, double p_70107_3_, double p_70107_5_) {
       this.setPosRaw(p_70107_1_, p_70107_3_, p_70107_5_);
       this.setBoundingBox(this.dimensions.makeBoundingBox(p_70107_1_, p_70107_3_, p_70107_5_));
+      if(valid) ((ServerWorld) level).updateChunkPos(this); // CraftBukkit
    }
 
    protected void reapplyPosition() {
@@ -373,6 +_,15 @@
       this.baseTick();
    }
 
+   // CraftBukkit start
+   public void postTick() {
+      // No clean way to break out of ticking once the entity has been copied to a new world, so instead we move the portalling later in the tick cycle
+      if (!(this instanceof ServerPlayerEntity)) {
+         this.handleNetherPortal();
+      }
+   }
+   // CraftBukkit end
+
    public void baseTick() {
       this.level.getProfiler().push("entityBaseTick");
       if (this.isPassenger() && this.getVehicle().removed) {
@@ -386,7 +_,7 @@
       this.walkDistO = this.walkDist;
       this.xRotO = this.xRot;
       this.yRotO = this.yRot;
-      this.handleNetherPortal();
+      if (this instanceof ServerPlayerEntity) this.handleNetherPortal(); // CraftBukkit - // Moved up to postTick
       if (this.canSpawnSprintParticle()) {
          this.spawnSprintParticle();
       }
@@ -449,12 +_,51 @@
 
    protected void lavaHurt() {
       if (!this.fireImmune()) {
-         this.setSecondsOnFire(15);
+         // CraftBukkit start - Fallen in lava TODO: this event spams!
+         putCallCombustEvent(false);
+         if (this instanceof LivingEntity && remainingFireTicks <= 0) {
+            // not on fire yet
+            // TODO: shouldn't be sending null for the block
+            org.bukkit.block.Block damager = null; // ((WorldServer) this.l).getWorld().getBlockAt(i, j, k);
+            org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+            EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(damager, damagee, 15);
+            this.level.getCBServer().getPluginManager().callEvent(combustEvent);
+            if (!combustEvent.isCancelled()) {
+
+               this.setSecondsOnFire(combustEvent.getDuration());
+            }
+         } else {
+            // This will be called every single tick the entity is in lava, so don't throw an event
+            this.setSecondsOnFire(15);
+         }
+         putCallCombustEvent(true);
+         // CraftBukkit end - we also don't throw an event unless the object in lava is living, to save on some event calls
          this.hurt(DamageSource.LAVA, 4.0F);
       }
    }
 
+   boolean callCombustEvent = true;
+
+   public void putCallCombustEvent(boolean callEvent){
+      callCombustEvent = callEvent;
+   }
+
+   public void setFire(int p_70015_1, boolean callEvent){
+      this.putCallCombustEvent(callEvent);
+      this.setSecondsOnFire(p_70015_1);
+      this.putCallCombustEvent(true);
+   }
+
    public void setSecondsOnFire(int p_70015_1_) {
+      if (callCombustEvent) {
+         EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), p_70015_1_);
+         this.level.getCBServer().getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+         p_70015_1_ = event.getDuration();
+      }
+      // CraftBukkit end
       int i = p_70015_1_ * 20;
       if (this instanceof LivingEntity) {
          i = ProtectionEnchantment.getFireAfterDampener((LivingEntity)this, i);
@@ -499,6 +_,7 @@
    }
 
    public void move(MoverType p_213315_1_, Vector3d p_213315_2_) {
+      org.bukkit.craftbukkit.v1_16_R3.SpigotTimings.entityMoveTimer.startTiming(); // Spigot
       if (this.noPhysics) {
          this.setBoundingBox(this.getBoundingBox().move(p_213315_2_));
          this.setLocationFromBoundingbox();
@@ -546,6 +_,26 @@
             block.updateEntityAfterFallOn(this.level, this);
          }
 
+         // CraftBukkit start
+         if (horizontalCollision && getBukkitEntity() instanceof Vehicle) {
+            Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+            org.bukkit.block.Block bl = this.level.getWorld().getBlockAt(MathHelper.floor(this.getX()), MathHelper.floor(this.getY()), MathHelper.floor(this.getZ()));
+            if (p_213315_2_.x > vector3d.x) {
+               bl = bl.getRelative(BlockFace.EAST);
+            } else if (p_213315_2_.x < vector3d.x) {
+               bl = bl.getRelative(BlockFace.WEST);
+            } else if (p_213315_2_.z > vector3d.z) {
+               bl = bl.getRelative(BlockFace.SOUTH);
+            } else if (p_213315_2_.z < vector3d.z) {
+               bl = bl.getRelative(BlockFace.NORTH);
+            }
+            if (bl.getType() != org.bukkit.Material.AIR) {
+               VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
+               level.getCBServer().getPluginManager().callEvent(event);
+            }
+         }
+         // CraftBukkit end
+
          if (this.onGround && !this.isSteppingCarefully()) {
             block.stepOn(this.level, blockpos, this);
          }
@@ -560,7 +_,7 @@
 
             this.walkDist = (float)((double)this.walkDist + (double)MathHelper.sqrt(getHorizontalDistanceSqr(vector3d)) * 0.6D);
             this.moveDist = (float)((double)this.moveDist + (double)MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 0.6D);
-            if (this.moveDist > this.nextStep && !blockstate.isAir()) {
+            if (this.moveDist > this.nextStep && !blockstate.isAir(this.level, blockpos)) {
                this.nextStep = this.nextStep();
                if (this.isInWater()) {
                   Entity entity = this.isVehicle() && this.getControllingPassenger() != null ? this.getControllingPassenger() : this;
@@ -575,7 +_,7 @@
                } else {
                   this.playStepSound(blockpos, blockstate);
                }
-            } else if (this.moveDist > this.nextFlap && this.makeFlySound() && blockstate.isAir()) {
+            } else if (this.moveDist > this.nextFlap && this.makeFlySound() && blockstate.isAir(this.level, blockpos)) {
                this.nextFlap = this.playFlySound(this.moveDist);
             }
          }
@@ -591,8 +_,9 @@
 
          float f2 = this.getBlockSpeedFactor();
          this.setDeltaMovement(this.getDeltaMovement().multiply((double)f2, 1.0D, (double)f2));
-         if (this.level.getBlockStatesIfLoaded(this.getBoundingBox().deflate(0.001D)).noneMatch((p_233572_0_) -> {
-            return p_233572_0_.is(BlockTags.FIRE) || p_233572_0_.is(Blocks.LAVA);
+         if (BlockPos.betweenClosedStream(this.getBoundingBox().deflate(0.001D)).noneMatch((p_233572_0_) -> {
+            BlockState state = level.getBlockState(p_233572_0_);
+            return state.is(BlockTags.FIRE) || state.is(Blocks.LAVA) || state.isBurning(level, p_233572_0_);
          }) && this.remainingFireTicks <= 0) {
             this.setRemainingFireTicks(-this.getFireImmuneTicks());
          }
@@ -604,6 +_,7 @@
 
          this.level.getProfiler().pop();
       }
+      org.bukkit.craftbukkit.v1_16_R3.SpigotTimings.entityMoveTimer.stopTiming(); // Spigot
    }
 
    protected BlockPos getOnPos() {
@@ -611,11 +_,10 @@
       int j = MathHelper.floor(this.position.y - (double)0.2F);
       int k = MathHelper.floor(this.position.z);
       BlockPos blockpos = new BlockPos(i, j, k);
-      if (this.level.getBlockState(blockpos).isAir()) {
+      if (this.level.isEmptyBlock(blockpos)) {
          BlockPos blockpos1 = blockpos.below();
          BlockState blockstate = this.level.getBlockState(blockpos1);
-         Block block = blockstate.getBlock();
-         if (block.is(BlockTags.FENCES) || block.is(BlockTags.WALLS) || block instanceof FenceGateBlock) {
+         if (blockstate.collisionExtendsVertically(this.level, blockpos1, this)) {
             return blockpos1;
          }
       }
@@ -801,6 +_,7 @@
    public void setLocationFromBoundingbox() {
       AxisAlignedBB axisalignedbb = this.getBoundingBox();
       this.setPosRaw((axisalignedbb.minX + axisalignedbb.maxX) / 2.0D, axisalignedbb.minY, (axisalignedbb.minZ + axisalignedbb.maxZ) / 2.0D);
+      if (this.isAddedToWorld() && !this.level.isClientSide && level instanceof ServerWorld) ((ServerWorld)this.level).updateChunkPos(this); // Forge - Process chunk registration after moving.
    }
 
    protected SoundEvent getSwimSound() {
@@ -849,7 +_,7 @@
    protected void playStepSound(BlockPos p_180429_1_, BlockState p_180429_2_) {
       if (!p_180429_2_.getMaterial().isLiquid()) {
          BlockState blockstate = this.level.getBlockState(p_180429_1_.above());
-         SoundType soundtype = blockstate.is(Blocks.SNOW) ? blockstate.getSoundType() : p_180429_2_.getSoundType();
+         SoundType soundtype = blockstate.is(Blocks.SNOW) ? blockstate.getSoundType(level, p_180429_1_, this) : p_180429_2_.getSoundType(level, p_180429_1_, this);
          this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.15F, soundtype.getPitch());
       }
    }
@@ -1056,9 +_,10 @@
       int k = MathHelper.floor(this.getZ());
       BlockPos blockpos = new BlockPos(i, j, k);
       BlockState blockstate = this.level.getBlockState(blockpos);
+      if(!blockstate.addRunningEffects(level, blockpos, this))
       if (blockstate.getRenderShape() != BlockRenderType.INVISIBLE) {
          Vector3d vector3d = this.getDeltaMovement();
-         this.level.addParticle(new BlockParticleData(ParticleTypes.BLOCK, blockstate), this.getX() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, this.getY() + 0.1D, this.getZ() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, vector3d.x * -4.0D, 1.5D, vector3d.z * -4.0D);
+         this.level.addParticle(new BlockParticleData(ParticleTypes.BLOCK, blockstate).setPos(blockpos), this.getX() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, this.getY() + 0.1D, this.getZ() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, vector3d.x * -4.0D, 1.5D, vector3d.z * -4.0D);
       }
 
    }
@@ -1099,6 +_,13 @@
    }
 
    public void setLevel(World p_70029_1_) {
+      // CraftBukkit start
+      if (p_70029_1_ == null) {
+         remove();
+         this.level = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
+         return;
+      }
+      // CraftBukkit end
       this.level = p_70029_1_;
    }
 
@@ -1117,6 +_,8 @@
       this.yo = p_242281_3_;
       this.zo = d1;
       this.setPos(d0, p_242281_3_, d1);
+      if (Thread.currentThread() == MinecraftServer.getServer().serverThread)
+      level.getChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4); // CraftBukkit
    }
 
    public void moveTo(Vector3d p_233576_1_) {
@@ -1132,6 +_,13 @@
    }
 
    public void moveTo(double p_70012_1_, double p_70012_3_, double p_70012_5_, float p_70012_7_, float p_70012_8_) {
+      // Paper - cancel entity velocity if teleported
+      if (!preserveMotion) {
+         this.deltaMovement = Vector3d.ZERO;
+      } else {
+         this.preserveMotion = false;
+      }
+      // Paper end
       this.setPosAndOldPos(p_70012_1_, p_70012_3_, p_70012_5_);
       this.yRot = p_70012_7_;
       this.xRot = p_70012_8_;
@@ -1297,6 +_,12 @@
       return false;
    }
 
+   // CraftBukkit start - collidable API
+   public boolean canCollideWithCB(Entity entity) {
+      return isPushable();
+   }
+   // CraftBukkit end
+
    public void awardKillScore(Entity p_191956_1_, int p_191956_2_, DamageSource p_191956_3_) {
       if (p_191956_1_ instanceof ServerPlayerEntity) {
          CriteriaTriggers.ENTITY_KILLED_PLAYER.trigger((ServerPlayerEntity)p_191956_1_, this, p_191956_3_);
@@ -1326,7 +_,7 @@
 
    public boolean saveAsPassenger(CompoundNBT p_184198_1_) {
       String s = this.getEncodeId();
-      if (!this.removed && s != null) {
+      if (this.persist && !this.removed && s != null) { // CraftBukkit - persist flag
          p_184198_1_.putString("id", s);
          this.saveWithoutId(p_184198_1_);
          return true;
@@ -1349,6 +_,17 @@
 
          Vector3d vector3d = this.getDeltaMovement();
          p_189511_1_.put("Motion", this.newDoubleList(vector3d.x, vector3d.y, vector3d.z));
+
+         // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
+         // TODO: make sure this is the best way to address this.
+         if (Float.isNaN(this.yRot)) {
+            this.yRot = 0;
+         }
+         if (Float.isNaN(this.xRot)) {
+            this.xRot = 0;
+         }
+         // CraftBukkit end
+
          p_189511_1_.put("Rotation", this.newFloatList(this.yRot, this.xRot));
          p_189511_1_.putFloat("FallDistance", this.fallDistance);
          p_189511_1_.putShort("Fire", (short)this.remainingFireTicks);
@@ -1357,6 +_,19 @@
          p_189511_1_.putBoolean("Invulnerable", this.invulnerable);
          p_189511_1_.putInt("PortalCooldown", this.portalCooldown);
          p_189511_1_.putUUID("UUID", this.getUUID());
+         // CraftBukkit start
+         // PAIL: Check above UUID reads 1.8 properly, ie: UUIDMost / UUIDLeast
+         p_189511_1_.putLong("WorldUUIDLeast", ((ServerWorld) this.level).getWorld().getUID().getLeastSignificantBits());
+         p_189511_1_.putLong("WorldUUIDMost", ((ServerWorld) this.level).getWorld().getUID().getMostSignificantBits());
+         p_189511_1_.putInt("Bukkit.updateLevel", CURRENT_LEVEL);
+         if (!this.persist) {
+            p_189511_1_.putBoolean("Bukkit.persist", this.persist);
+         }
+         if (this.persistentInvisibility) {
+            p_189511_1_.putBoolean("Bukkit.invisible", this.persistentInvisibility);
+         }
+         p_189511_1_.putInt("Spigot.ticksLived", this.tickCount);
+         // CraftBukkit end
          ITextComponent itextcomponent = this.getCustomName();
          if (itextcomponent != null) {
             p_189511_1_.putString("CustomName", ITextComponent.Serializer.toJson(itextcomponent));
@@ -1377,6 +_,7 @@
          if (this.glowing) {
             p_189511_1_.putBoolean("Glowing", this.glowing);
          }
+         p_189511_1_.putBoolean("CanUpdate", canUpdate);
 
          if (!this.tags.isEmpty()) {
             ListNBT listnbt = new ListNBT();
@@ -1388,6 +_,10 @@
             p_189511_1_.put("Tags", listnbt);
          }
 
+         CompoundNBT caps = serializeCaps();
+         if (caps != null) p_189511_1_.put("ForgeCaps", caps);
+         if (persistentData != null) p_189511_1_.put("ForgeData", persistentData);
+
          this.addAdditionalSaveData(p_189511_1_);
          if (this.isVehicle()) {
             ListNBT listnbt1 = new ListNBT();
@@ -1404,6 +_,12 @@
             }
          }
 
+         // CraftBukkit start - stores eventually existing bukkit values
+         if (this.bukkitEntity != null) {
+            this.bukkitEntity.storeBukkitValues(p_189511_1_);
+         }
+         // CraftBukkit end
+
          return p_189511_1_;
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.forThrowable(throwable, "Saving entity NBT");
@@ -1458,6 +_,9 @@
                this.setSilent(p_70020_1_.getBoolean("Silent"));
                this.setNoGravity(p_70020_1_.getBoolean("NoGravity"));
                this.setGlowing(p_70020_1_.getBoolean("Glowing"));
+               if (p_70020_1_.contains("ForgeData", 10)) persistentData = p_70020_1_.getCompound("ForgeData");
+               if (p_70020_1_.contains("CanUpdate", 99)) this.canUpdate(p_70020_1_.getBoolean("CanUpdate"));
+               if (p_70020_1_.contains("ForgeCaps", 10)) deserializeCaps(p_70020_1_.getCompound("ForgeCaps"));
                if (p_70020_1_.contains("Tags", 9)) {
                   this.tags.clear();
                   ListNBT listnbt3 = p_70020_1_.getList("Tags", 8);
@@ -1479,6 +_,47 @@
          } else {
             throw new IllegalStateException("Entity has invalid position");
          }
+
+         // CraftBukkit start
+         if (this instanceof LivingEntity) {
+            LivingEntity entity = (LivingEntity) this;
+
+            this.tickCount = p_70020_1_.getInt("Spigot.ticksLived");
+
+            // Reset the persistence for tamed animals
+            if (entity instanceof TameableEntity && !isLevelAtLeast(p_70020_1_, 2) && !p_70020_1_.getBoolean("PersistenceRequired")) {
+               MobEntity entityinsentient = (MobEntity) entity;
+               entityinsentient.persistenceRequired = !entityinsentient.removeWhenFarAway(0);
+            }
+         }
+         this.persist = !p_70020_1_.contains("Bukkit.persist") || p_70020_1_.getBoolean("Bukkit.persist");
+         // CraftBukkit end
+
+         // CraftBukkit start - Reset world
+         if (this instanceof ServerPlayerEntity) {
+            Server server = Bukkit.getServer();
+            org.bukkit.World bworld = null;
+            // TODO: Remove World related checks, replaced with WorldUID
+            String worldName = p_70020_1_.getString("world");
+            if (p_70020_1_.contains("WorldUUIDMost") && p_70020_1_.contains("WorldUUIDLeast")) {
+               UUID uid = new UUID(p_70020_1_.getLong("WorldUUIDMost"), p_70020_1_.getLong("WorldUUIDLeast"));
+               bworld = server.getWorld(uid);
+            } else {
+               bworld = server.getWorld(worldName);
+            }
+            if (bworld == null) {
+               bworld = ((org.bukkit.craftbukkit.v1_16_R3.CraftServer) server).getServer().getLevel(World.OVERWORLD).getWorld();
+            }
+            setLevel(bworld == null ? null : ((CraftWorld) bworld).getHandle());
+         }
+         this.getBukkitEntity().readBukkitValues(p_70020_1_);
+         if (p_70020_1_.contains("Bukkit.invisible")) {
+            boolean bukkitInvisible = p_70020_1_.getBoolean("Bukkit.invisible");
+            this.setInvisible(bukkitInvisible);
+            this.persistentInvisibility = bukkitInvisible;
+         }
+         // CraftBukkit end
+
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.forThrowable(throwable, "Loading entity NBT");
          CrashReportCategory crashreportcategory = crashreport.addCategory("Entity being loaded");
@@ -1537,6 +_,8 @@
       return this.spawnAtLocation(p_199701_1_, 0.0F);
    }
 
+   private boolean dragonDone;
+   private Class<?> dragonClass;
    @Nullable
    public ItemEntity spawnAtLocation(ItemStack p_70099_1_, float p_70099_2_) {
       if (p_70099_1_.isEmpty()) {
@@ -1544,9 +_,22 @@
       } else if (this.level.isClientSide) {
          return null;
       } else {
-         ItemEntity itementity = new ItemEntity(this.level, this.getX(), this.getY() + (double)p_70099_2_, this.getZ(), p_70099_1_);
+         ItemEntity itementity = new ItemEntity(this.level, this.getX(), this.getY() + (double) p_70099_2_, this.getZ(), p_70099_1_);
          itementity.setDefaultPickUpDelay();
-         this.level.addFreshEntity(itementity);
+
+         if (captureDrops() != null) {
+            captureDrops().add(itementity);
+         } else {
+            // CraftBukkit start
+            EntityDropItemEvent event = new EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) itementity.getBukkitEntity());
+            Bukkit.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+               return null;
+            }
+            // CraftBukkit end
+
+            this.level.addFreshEntity(itementity);
+         }
          return itementity;
       }
    }
@@ -1582,6 +_,7 @@
 
    public void rideTick() {
       this.setDeltaMovement(Vector3d.ZERO);
+      if (canUpdate())
       this.tick();
       if (this.isPassenger()) {
          this.getVehicle().positionRider(this);
@@ -1627,6 +_,7 @@
          }
       }
 
+      if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, p_184205_1_, true)) return false;
       if (p_184205_2_ || this.canRide(p_184205_1_) && p_184205_1_.canAddPassenger(this)) {
          if (this.isPassenger()) {
             this.stopRiding();
@@ -1659,6 +_,7 @@
    public void removeVehicle() {
       if (this.vehicle != null) {
          Entity entity = this.vehicle;
+         if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entity, false)) return;
          this.vehicle = null;
          entity.removePassenger(this);
       }
@@ -1670,25 +_,91 @@
    }
 
    protected void addPassenger(Entity p_184200_1_) {
-      if (p_184200_1_.getVehicle() != this) {
+      cBAddPassenger(p_184200_1_);
+   }
+
+   protected boolean cBAddPassenger(Entity passenger) { // CraftBukkit
+      if (passenger.getVehicle() != this) {
          throw new IllegalStateException("Use x.startRiding(y), not y.addPassenger(x)");
       } else {
-         if (!this.level.isClientSide && p_184200_1_ instanceof PlayerEntity && !(this.getControllingPassenger() instanceof PlayerEntity)) {
-            this.passengers.add(0, p_184200_1_);
+         // CraftBukkit start
+         com.google.common.base.Preconditions.checkState(!passenger.passengers.contains(this), "Circular entity riding! %s %s", this, passenger);
+         CraftEntity craft = (CraftEntity) passenger.getBukkitEntity().getVehicle();
+         Entity orig = craft == null ? null : craft.getHandle();
+         if (getBukkitEntity() instanceof Vehicle && passenger.getBukkitEntity() instanceof org.bukkit.entity.LivingEntity) {
+            VehicleEnterEvent event = new VehicleEnterEvent(
+                (Vehicle) getBukkitEntity(),
+                passenger.getBukkitEntity()
+            );
+            // Suppress during worldgen
+            if (this.valid) {
+               Bukkit.getPluginManager().callEvent(event);
+            }
+            CraftEntity craftn = (CraftEntity) passenger.getBukkitEntity().getVehicle();
+            Entity n = craftn == null ? null : craftn.getHandle();
+            if (event.isCancelled() || n != orig) {
+               return false;
+            }
+         }
+         // CraftBukkit end
+         // Spigot start
+         org.spigotmc.event.entity.EntityMountEvent event = new org.spigotmc.event.entity.EntityMountEvent(passenger.getBukkitEntity(), this.getBukkitEntity());
+         // Suppress during worldgen
+         if (this.valid) {
+            Bukkit.getPluginManager().callEvent(event);
+         }
+         if (event.isCancelled()) {
+            return false;
+         }
+         // Spigot end
+         if (!this.level.isClientSide && passenger instanceof PlayerEntity && !(this.getControllingPassenger() instanceof PlayerEntity)) {
+            this.passengers.add(0, passenger);
          } else {
-            this.passengers.add(p_184200_1_);
+            this.passengers.add(passenger);
          }
 
       }
+      return true; // CraftBukkit
    }
 
    protected void removePassenger(Entity p_184225_1_) {
-      if (p_184225_1_.getVehicle() == this) {
+      cBRemovePassenger(p_184225_1_);
+   }
+
+   protected boolean cBRemovePassenger(Entity passenger) { // CraftBukkit
+      if (passenger.getVehicle() == this) {
          throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
       } else {
-         this.passengers.remove(p_184225_1_);
-         p_184225_1_.boardingCooldown = 60;
+         // CraftBukkit start
+         CraftEntity craft = (CraftEntity) passenger.getBukkitEntity().getVehicle();
+         Entity orig = craft == null ? null : craft.getHandle();
+         if (getBukkitEntity() instanceof Vehicle && passenger.getBukkitEntity() instanceof org.bukkit.entity.LivingEntity) {
+            VehicleExitEvent event = new VehicleExitEvent(
+                (Vehicle) getBukkitEntity(),
+                (org.bukkit.entity.LivingEntity) passenger.getBukkitEntity()
+            );
+            Bukkit.getPluginManager().callEvent(event);
+            CraftEntity craftn = (CraftEntity) passenger.getBukkitEntity().getVehicle();
+            Entity n = craftn == null ? null : craftn.getHandle();
+            if (event.isCancelled() || n != orig) {
+               return false;
+            }
+         }
+         // CraftBukkit end
+         // Spigot start
+         org.spigotmc.event.entity.EntityDismountEvent event = new org.spigotmc.event.entity.EntityDismountEvent(passenger.getBukkitEntity(), this.getBukkitEntity());
+         // Suppress during worldgen
+         if (this.valid) {
+            Bukkit.getPluginManager().callEvent(event);
+         }
+         if (event.isCancelled()) {
+            return false;
+         }
+         // Spigot end
+         this.passengers.remove(passenger);
+         passenger.boardingCooldown = 60;
       }
+      return true; // CraftBukkit
    }
 
    protected boolean canAddPassenger(Entity p_184219_1_) {
@@ -1741,13 +_,19 @@
          ServerWorld serverworld = (ServerWorld)this.level;
          if (this.isInsidePortal) {
             MinecraftServer minecraftserver = serverworld.getServer();
-            RegistryKey<World> registrykey = this.level.dimension() == World.NETHER ? World.OVERWORLD : World.NETHER;
+            RegistryKey<World> registrykey = this.level.dimensionType() == MinecraftServer.getServer().registryHolder.dimensionTypes().get(DimensionType.NETHER_LOCATION) ? World.OVERWORLD : World.NETHER; // LoliServer - Custom world to teleport
             ServerWorld serverworld1 = minecraftserver.getLevel(registrykey);
             if (serverworld1 != null && minecraftserver.isNetherEnabled() && !this.isPassenger() && this.portalTime++ >= i) {
                this.level.getProfiler().push("portal");
                this.portalTime = i;
                this.setPortalCooldown();
-               this.changeDimension(serverworld1);
+               // CraftBukkit start
+               if (this instanceof ServerPlayerEntity) {
+                  ((ServerPlayerEntity) this).changeDimension(serverworld1, serverworld.getPortalForcer(), PlayerTeleportEvent.TeleportCause.NETHER_PORTAL);
+               } else {
+                  this.changeDimension(serverworld1);
+               }
+               // CraftBukkit end
                this.level.getProfiler().pop();
             }
 
@@ -1816,6 +_,7 @@
       return !this.getPassengers().isEmpty();
    }
 
+   @Deprecated //Forge: Use rider sensitive version
    public boolean rideableUnderWater() {
       return true;
    }
@@ -1870,6 +_,13 @@
    }
 
    public void setSwimming(boolean p_204711_1_) {
+      // CraftBukkit start
+      if (this.isSwimming() != p_204711_1_ && this instanceof LivingEntity) {
+         if (CraftEventFactory.callToggleSwimEvent((LivingEntity) this, p_204711_1_).isCancelled()) {
+            return;
+         }
+      }
+      // CraftBukkit end
       this.setSharedFlag(4, p_204711_1_);
    }
 
@@ -1912,15 +_,19 @@
       return this.getTeam() != null ? this.getTeam().isAlliedTo(p_184194_1_) : false;
    }
 
+   // CraftBukkit - start
    public void setInvisible(boolean p_82142_1_) {
-      this.setSharedFlag(5, p_82142_1_);
+      if (!this.persistentInvisibility) { // Prevent Minecraft from removing our invisibility flag
+         this.setSharedFlag(5, p_82142_1_);
+      }
+      // CraftBukkit - end
    }
 
-   protected boolean getSharedFlag(int p_70083_1_) {
+   public boolean getSharedFlag(int p_70083_1_) { // protected->public CraftBukkit
       return (this.entityData.get(DATA_SHARED_FLAGS_ID) & 1 << p_70083_1_) != 0;
    }
 
-   protected void setSharedFlag(int p_70052_1_, boolean p_70052_2_) {
+   public void setSharedFlag(int p_70052_1_, boolean p_70052_2_) { // protected->public CraftBukkit
       byte b0 = this.entityData.get(DATA_SHARED_FLAGS_ID);
       if (p_70052_2_) {
          this.entityData.set(DATA_SHARED_FLAGS_ID, (byte)(b0 | 1 << p_70052_1_));
@@ -1939,16 +_,55 @@
    }
 
    public void setAirSupply(int p_70050_1_) {
-      this.entityData.set(DATA_AIR_SUPPLY_ID, p_70050_1_);
+      // CraftBukkit start
+      EntityAirChangeEvent event = new EntityAirChangeEvent(this.getBukkitEntity(), p_70050_1_);
+      // Suppress during worldgen
+      if (this.valid) {
+         event.getEntity().getServer().getPluginManager().callEvent(event);
+      }
+      if (event.isCancelled()) {
+         return;
+      }
+      this.entityData.set(DATA_AIR_SUPPLY_ID, event.getAmount());
+      // CraftBukkit end
    }
 
    public void thunderHit(ServerWorld p_241841_1_, LightningBoltEntity p_241841_2_) {
       this.setRemainingFireTicks(this.remainingFireTicks + 1);
+      // CraftBukkit start
+      final org.bukkit.entity.Entity thisBukkitEntity = this.getBukkitEntity();
+      final org.bukkit.entity.Entity stormBukkitEntity = p_241841_2_.getBukkitEntity();
+      final PluginManager pluginManager = Bukkit.getPluginManager();
+      // CraftBukkit end
       if (this.remainingFireTicks == 0) {
-         this.setSecondsOnFire(8);
+         // CraftBukkit start - Call a combust event when lightning strikes
+         EntityCombustByEntityEvent entityCombustEvent = new EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8);
+         pluginManager.callEvent(entityCombustEvent);
+         if (!entityCombustEvent.isCancelled()) {
+            putCallCombustEvent(false);
+            this.setSecondsOnFire(entityCombustEvent.getDuration());
+            putCallCombustEvent(true);
+         }
+         // CraftBukkit end
       }
 
-      this.hurt(DamageSource.LIGHTNING_BOLT, 5.0F);
+      // CraftBukkit start
+      if (thisBukkitEntity instanceof Hanging) {
+         HangingBreakByEntityEvent hangingEvent = new HangingBreakByEntityEvent((Hanging) thisBukkitEntity, stormBukkitEntity);
+         pluginManager.callEvent(hangingEvent);
+         if (hangingEvent.isCancelled()) {
+            return;
+         }
+      }
+      if (this.fireImmune()) {
+         return;
+      }
+      CraftEventFactory.entityDamage = p_241841_2_;
+      if (!this.hurt(DamageSource.LIGHTNING_BOLT, p_241841_2_.getDamage())) {
+         CraftEventFactory.entityDamage = null;
+         return;
+      }
+      // CraftBukkit end
    }
 
    public void onAboveBubbleCol(boolean p_203002_1_) {
@@ -2032,7 +_,7 @@
    }
 
    protected ITextComponent getTypeName() {
-      return this.type.getDescription();
+      return this.getType().getDescription(); // Forge: Use getter to allow overriding by mods
    }
 
    public boolean is(Entity p_70028_1_) {
@@ -2087,37 +_,74 @@
 
    @Nullable
    public Entity changeDimension(ServerWorld p_241206_1_) {
+      return this.changeDimension(p_241206_1_, p_241206_1_.getPortalForcer()); // CatServer - do not pass null
+   }
+
+   public BlockPos catserver$blockPos;
+   @Nullable
+   public Entity teleportTo(ServerWorld server, BlockPos pos) {
+      catserver$blockPos = pos;
+      return this.changeDimension(server);
+   }
+
+   // CatServer start - fix Etched mod compatibility
+   @Nullable
+   public Entity changeDimension(ServerWorld p_241206_1_, net.minecraftforge.common.util.ITeleporter teleporter) {
       if (this.level instanceof ServerWorld && !this.removed) {
          this.level.getProfiler().push("changeDimension");
-         this.unRide();
+         // CraftBukkit start
+         if (p_241206_1_ == null){
+            return null;
+         }
+         // CraftBukkit end
          this.level.getProfiler().push("reposition");
-         PortalInfo portalinfo = this.findDimensionEntryPoint(p_241206_1_);
+         BlockPos bukkitPos = catserver$blockPos;
+         catserver$blockPos = null;
+         PortalInfo portalinfo = bukkitPos == null ? teleporter.getPortalInfo(this, p_241206_1_, this::findDimensionEntryPoint) : new PortalInfo(new Vector3d(bukkitPos.getX(), bukkitPos.getY(), bukkitPos.getZ()), Vector3d.ZERO, this.yRot, this.xRot).putCB(p_241206_1_, null); // CatServer - from 1.19.2
          if (portalinfo == null) {
             return null;
          } else {
-            this.level.getProfiler().popPush("reloading");
-            Entity entity = this.getType().create(p_241206_1_);
-            if (entity != null) {
-               entity.restoreFrom(this);
-               entity.moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z, portalinfo.yRot, entity.xRot);
-               entity.setDeltaMovement(portalinfo.speed);
-               p_241206_1_.addFromAnotherDimension(entity);
-               if (p_241206_1_.dimension() == World.END) {
-                  ServerWorld.makeObsidianPlatform(p_241206_1_);
-               }
+            // CatServer start
+            if (portalinfo.world != null) {
+               p_241206_1_ = portalinfo.world;
             }
+            this.unRide();
+            // CatServer end
+            ServerWorld serverWorld = p_241206_1_;
+            Entity transportedEntity = teleporter.placeEntity(this, (ServerWorld) this.level, p_241206_1_, this.yRot, spawnPortal -> { //Forge: Start vanilla logic
+               this.level.getProfiler().popPush("reloading");
+               Entity entity = this.getType().create(serverWorld);
+               if (entity != null) {
+                  entity.restoreFrom(this);
+                  entity.moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z, portalinfo.yRot, entity.xRot);
+                  entity.setDeltaMovement(portalinfo.speed);
+                  serverWorld.addFromAnotherDimension(entity);
+                  if (spawnPortal && serverWorld.dimension() == World.END) {
+                     ServerWorld.makeObsidianPlatform(serverWorld, this); // CraftBukkit
+                  }
+                  // CraftBukkit start - Forward the CraftEntity to the new entity
+                  this.getBukkitEntity().setHandle(entity);
+                  entity.bukkitEntity = this.getBukkitEntity();
+                  if (this instanceof MobEntity) {
+                     ((MobEntity)this).dropLeash(true, true); // Paper drop lead
+                  }
+                  // CraftBukkit end
+               }
+               return entity;
+            }); //Forge: End vanilla logic
 
             this.removeAfterChangingDimensions();
             this.level.getProfiler().pop();
             ((ServerWorld)this.level).resetEmptyTime();
             p_241206_1_.resetEmptyTime();
             this.level.getProfiler().pop();
-            return entity;
+            return transportedEntity;
          }
       } else {
          return null;
       }
    }
+   // CatServer end
 
    protected void removeAfterChangingDimensions() {
       this.removed = true;
@@ -2125,11 +_,18 @@
 
    @Nullable
    protected PortalInfo findDimensionEntryPoint(ServerWorld p_241829_1_) {
-      boolean flag = this.level.dimension() == World.END && p_241829_1_.dimension() == World.OVERWORLD;
-      boolean flag1 = p_241829_1_.dimension() == World.END;
+      // CraftBukkit start
+      if (p_241829_1_ == null) {
+         return null;
+      }
+      // LoliServer start - Custom world to teleport
+      boolean flag = this.level.dimensionType() == MinecraftServer.getServer().registryHolder.dimensionTypes().get(DimensionType.END_LOCATION) && p_241829_1_.dimension() == World.OVERWORLD;
+      boolean flag1 = p_241829_1_.dimensionType() == MinecraftServer.getServer().registryHolder.dimensionTypes().get(DimensionType.END_LOCATION);
+      // CraftBukkit end
       if (!flag && !flag1) {
-         boolean flag2 = p_241829_1_.dimension() == World.NETHER;
-         if (this.level.dimension() != World.NETHER && !flag2) {
+         boolean flag2 = p_241829_1_.dimensionType() == MinecraftServer.getServer().registryHolder.dimensionTypes().get(DimensionType.NETHER_LOCATION);
+         if (this.level.dimensionType() != MinecraftServer.getServer().registryHolder.dimensionTypes().get(DimensionType.NETHER_LOCATION) && !flag2) {
+            //LoliServer end
             return null;
          } else {
             WorldBorder worldborder = p_241829_1_.getWorldBorder();
@@ -2139,7 +_,16 @@
             double d3 = Math.min(2.9999872E7D, worldborder.getMaxZ() - 16.0D);
             double d4 = DimensionType.getTeleportationScale(this.level.dimensionType(), p_241829_1_.dimensionType());
             BlockPos blockpos1 = new BlockPos(MathHelper.clamp(this.getX() * d4, d0, d2), this.getY(), MathHelper.clamp(this.getZ() * d4, d1, d3));
-            return this.getExitPortal(p_241829_1_, blockpos1, flag2).map((p_242275_2_) -> {
+            // CraftBukkit start
+            CraftPortalEvent event = callPortalEvent(this, p_241829_1_, blockpos1, PlayerTeleportEvent.TeleportCause.NETHER_PORTAL, flag2 ? 16 : 128, 16);
+            if (event == null) {
+               return null;
+            }
+            final ServerWorld worldserverFinal = p_241829_1_ = ((CraftWorld) event.getTo().getWorld()).getHandle();
+            blockpos1 = new BlockPos(event.getTo().getX(), event.getTo().getY(), event.getTo().getZ());
+            int searchRadius = event.getSearchRadius();
+            // CraftBukkit end
+            return this.getExitPortal(p_241829_1_, blockpos1, flag2, event.getSearchRadius(), event.getCanCreatePortal(), event.getCreationRadius()).map((p_242275_2_) -> {
                BlockState blockstate = this.level.getBlockState(this.portalEntrancePos);
                Direction.Axis direction$axis;
                Vector3d vector3d;
@@ -2154,7 +_,7 @@
                   vector3d = new Vector3d(0.5D, 0.0D, 0.0D);
                }
 
-               return PortalSize.createPortalInfo(p_241829_1_, p_242275_2_, direction$axis, vector3d, this.getDimensions(this.getPose()), this.getDeltaMovement(), this.yRot, this.xRot);
+               return PortalSize.createPortalInfo(worldserverFinal, p_242275_2_, direction$axis, vector3d, this.getDimensionsForge(this.getPose()), this.getDeltaMovement(), this.yRot, this.xRot, event);
             }).orElse((PortalInfo)null);
          }
       } else {
@@ -2165,12 +_,39 @@
             blockpos = p_241829_1_.getHeightmapPos(Heightmap.Type.MOTION_BLOCKING_NO_LEAVES, p_241829_1_.getSharedSpawnPos());
          }
 
-         return new PortalInfo(new Vector3d((double)blockpos.getX() + 0.5D, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5D), this.getDeltaMovement(), this.yRot, this.xRot);
+         // CraftBukkit start
+         CraftPortalEvent event = callPortalEvent(this, p_241829_1_, blockpos, PlayerTeleportEvent.TeleportCause.END_PORTAL, 0,0);
+         if (event == null) {
+            return null;
+         }
+         blockpos = new BlockPos(event.getTo().getX(), event.getTo().getY(), event.getTo().getZ());
+
+         return new PortalInfo(new Vector3d((double)blockpos.getX() + 0.5D, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5D), this.getDeltaMovement(), this.yRot, this.xRot).putCB(((CraftWorld) event.getTo().getWorld()).getHandle(), event); // CatServer
+         // CraftBukkit end
       }
    }
 
    protected Vector3d getRelativePortalPosition(Direction.Axis p_241839_1_, TeleportationRepositioner.Result p_241839_2_) {
-      return PortalSize.getRelativePosition(p_241839_2_, p_241839_1_, this.position(), this.getDimensions(this.getPose()));
+      return PortalSize.getRelativePosition(p_241839_2_, p_241839_1_, this.position(), this.getDimensionsForge(this.getPose()));
+   }
+
+   // CraftBukkit start
+
+   protected CraftPortalEvent callPortalEvent(Entity entity, ServerWorld exitWorldServer, BlockPos exitPosition, PlayerTeleportEvent.TeleportCause cause, int searchRadius, int creationRadius) {
+      org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+      Location enter = bukkitEntity.getLocation();
+      Location exit = new Location(exitWorldServer.getWorld(), exitPosition.getX(), exitPosition.getY(), exitPosition.getZ());
+      EntityPortalEvent event = new EntityPortalEvent(bukkitEntity, enter, exit, searchRadius);
+      event.getEntity().getServer().getPluginManager().callEvent(event);
+      if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !entity.isAlive()) {
+         return null;
+      }
+      return new CraftPortalEvent(event);
+   }
+
+   protected Optional<TeleportationRepositioner.Result> getExitPortal(ServerWorld p_241830_1_, BlockPos p_241830_2_, boolean p_241830_3_, int searchRadius, boolean canCreatePortal, int createRadius) {
+      return p_241830_1_.getPortalForcer().findPortal(p_241830_2_, searchRadius);
+      // CraftBukkit end
    }
 
    protected Optional<TeleportationRepositioner.Result> getExitPortal(ServerWorld p_241830_1_, BlockPos p_241830_2_, boolean p_241830_3_) {
@@ -2321,8 +_,10 @@
       EntitySize entitysize = this.dimensions;
       Pose pose = this.getPose();
       EntitySize entitysize1 = this.getDimensions(pose);
+      net.minecraftforge.event.entity.EntityEvent.Size sizeEvent = net.minecraftforge.event.ForgeEventFactory.getEntitySizeForge(this, pose,  entitysize, entitysize1, this.getEyeHeight(pose, entitysize));
+      entitysize1 = sizeEvent.getNewSize();
       this.dimensions = entitysize1;
-      this.eyeHeight = this.getEyeHeight(pose, entitysize1);
+      this.eyeHeight = sizeEvent.getNewEyeHeight();
       if (entitysize1.width < entitysize.width) {
          double d0 = (double)entitysize1.width / 2.0D;
          this.setBoundingBox(new AxisAlignedBB(this.getX() - d0, this.getY(), this.getZ() - d0, this.getX() + d0, this.getY() + (double)entitysize1.height, this.getZ() + d0));
@@ -2363,7 +_,7 @@
    }
 
    protected AxisAlignedBB getBoundingBoxForPose(Pose p_213321_1_) {
-      EntitySize entitysize = this.getDimensions(p_213321_1_);
+      EntitySize entitysize = this.getDimensionsForge(p_213321_1_);
       float f = entitysize.width / 2.0F;
       Vector3d vector3d = new Vector3d(this.getX() - (double)f, this.getY(), this.getZ() - (double)f);
       Vector3d vector3d1 = new Vector3d(this.getX() + (double)f, this.getY() + (double)entitysize.height, this.getZ() + (double)f);
@@ -2371,16 +_,44 @@
    }
 
    public void setBoundingBox(AxisAlignedBB p_174826_1_) {
-      this.bb = p_174826_1_;
+      // CraftBukkit start - block invalid bounding boxes
+      double minX = p_174826_1_.minX, minY = p_174826_1_.minY, minZ = p_174826_1_.minZ, maxX = p_174826_1_.maxX, maxY = p_174826_1_.maxY, maxZ = p_174826_1_.maxZ;
+      double len = p_174826_1_.maxX - p_174826_1_.minX;
+      if (len < 0) {
+         maxX = minX;
+      }
+      if (len > 64) {
+         maxX = minX + 64.0;
+      }
+      len = p_174826_1_.maxY - p_174826_1_.minY;
+      if (len < 0) {
+         maxY = minY;
+      }
+      if (len > 64) {
+         maxY = minY + 64.0;
+      }
+      len = p_174826_1_.maxZ - p_174826_1_.minZ;
+      if (len < 0) {
+         maxZ = minZ;
+      }
+      if (len > 64) {
+         maxZ = minZ + 64.0;
+      }
+      this.bb = new AxisAlignedBB(minX, minY, minZ, maxX, maxY, maxZ);
+      // CraftBukkit end
    }
 
+   /**
+    * @deprecated Can be overridden but call {@link #getEyeHeightForge(Pose, EntitySize)} instead.
+    */
+   @Deprecated
    protected float getEyeHeight(Pose p_213316_1_, EntitySize p_213316_2_) {
       return p_213316_2_.height * 0.85F;
    }
 
    @OnlyIn(Dist.CLIENT)
    public float getEyeHeight(Pose p_213307_1_) {
-      return this.getEyeHeight(p_213307_1_, this.getDimensions(p_213307_1_));
+      return this.getEyeHeight(p_213307_1_, this.getDimensionsForge(p_213307_1_));
    }
 
    public final float getEyeHeight() {
@@ -2513,7 +_,7 @@
    }
 
    public Stream<Entity> getSelfAndPassengers() {
-      return Stream.concat(Stream.of(this), this.passengers.stream().flatMap(Entity::getSelfAndPassengers));
+      return Stream.concat(Stream.of(this), com.google.common.collect.ImmutableList.copyOf(this.passengers).stream().flatMap(Entity::getSelfAndPassengers)); // Paper
    }
 
    public boolean hasOnePlayerPassenger() {
@@ -2594,7 +_,7 @@
       return SoundCategory.NEUTRAL;
    }
 
-   protected int getFireImmuneTicks() {
+   public int getFireImmuneTicks() { // protected->public CraftBukkit
       return 1;
    }
 
@@ -2720,6 +_,10 @@
 
    public abstract IPacket<?> getAddEntityPacket();
 
+   /**
+    * @deprecated Can be overridden but call {@link #getDimensionsForge(Pose)} instead.
+    */
+   @Deprecated
    public EntitySize getDimensions(Pose p_213305_1_) {
       return this.type.getDimensions();
    }
@@ -2796,6 +_,7 @@
 
          this.movedSinceLastChunkCheck = true;
       }
+      if (this.isAddedToWorld() && !this.level.isClientSide && !this.removed) this.level.getChunk((int) Math.floor(p_226288_1_) >> 4, (int) Math.floor(p_226288_5_) >> 4); // Forge - ensure target chunk is loaded.
 
    }
 
@@ -2810,5 +_,72 @@
    @FunctionalInterface
    public interface IMoveCallback {
       void accept(Entity p_accept_1_, double p_accept_2_, double p_accept_4_, double p_accept_6_);
+   }
+
+   /* ================================== Forge Start =====================================*/
+
+   private boolean canUpdate = true;
+   @Override
+   public void canUpdate(boolean value) {
+      this.canUpdate = value;
+   }
+   @Override
+   public boolean canUpdate() {
+      return this.canUpdate;
+   }
+   private Collection<ItemEntity> captureDrops = null;
+   @Override
+   public Collection<ItemEntity> captureDrops() {
+      return captureDrops;
+   }
+   @Override
+   public Collection<ItemEntity> captureDrops(Collection<ItemEntity> value) {
+      Collection<ItemEntity> ret = captureDrops;
+      this.captureDrops = value;
+      return ret;
+   }
+   private CompoundNBT persistentData;
+   @Override
+   public CompoundNBT getPersistentData() {
+      if (persistentData == null)
+         persistentData = new CompoundNBT();
+      return persistentData;
+   }
+   @Override
+   public boolean canTrample(BlockState state, BlockPos pos, float fallDistance) {
+      return level.random.nextFloat() < fallDistance - 0.5F
+              && this instanceof LivingEntity
+              && (this instanceof PlayerEntity || net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(level, this))
+              && this.getBbWidth() * this.getBbWidth() * this.getBbHeight() > 0.512F;
+   }
+
+   /**
+    * Internal use for keeping track of entities that are tracked by a world, to
+    * allow guarantees that entity position changes will force a chunk load, avoiding
+    * potential issues with entity desyncing and bad chunk data.
+    */
+   private boolean isAddedToWorld;
+
+   @Override
+   public final boolean isAddedToWorld() { return this.isAddedToWorld; }
+
+   @Override
+   public void onAddedToWorld() { this.isAddedToWorld = true; }
+
+   @Override
+   public void onRemovedFromWorld() { this.isAddedToWorld = false; }
+
+   @Override
+   public void revive() {
+      this.removed = false;
+      this.reviveCaps();
+   }
+
+   // no AT because of overrides
+   /**
+    * Accessor method for {@link #getEyeHeight(Pose, EntitySize)}
+    */
+   public float getEyeHeightAccess(Pose pose, EntitySize size) {
+      return this.getEyeHeight(pose, size);
    }
 }
