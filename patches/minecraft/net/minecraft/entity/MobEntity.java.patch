--- a/net/minecraft/entity/MobEntity.java
+++ b/net/minecraft/entity/MobEntity.java
@@ -1,11 +_,13 @@
 package net.minecraft.entity;
 
 import com.google.common.collect.Maps;
+import moe.loliserver.LoliServer;
 import java.util.Arrays;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Random;
 import java.util.UUID;
+import java.util.logging.Level;
 import javax.annotation.Nullable;
 import net.minecraft.block.AbstractSkullBlock;
 import net.minecraft.block.Blocks;
@@ -26,6 +_,7 @@
 import net.minecraft.entity.item.LeashKnotEntity;
 import net.minecraft.entity.monster.IMob;
 import net.minecraft.entity.player.PlayerEntity;
+import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.fluid.Fluid;
 import net.minecraft.inventory.EquipmentSlotType;
 import net.minecraft.item.ArmorItem;
@@ -65,7 +_,6 @@
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.GameRules;
 import net.minecraft.world.IServerWorld;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.IWorldReader;
@@ -73,6 +_,15 @@
 import net.minecraft.world.server.ServerWorld;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import org.bukkit.craftbukkit.v1_16_R3.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
+import org.bukkit.event.entity.EntityUnleashEvent;
+import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
 
 public abstract class MobEntity extends LivingEntity {
    private static final DataParameter<Byte> DATA_MOB_FLAGS_ID = EntityDataManager.defineId(MobEntity.class, DataSerializers.BYTE);
@@ -83,19 +_,19 @@
    protected JumpController jumpControl;
    private final BodyController bodyRotationControl;
    protected PathNavigator navigation;
-   public final GoalSelector goalSelector;
-   public final GoalSelector targetSelector;
+   public GoalSelector goalSelector;
+   public GoalSelector targetSelector;
    private LivingEntity target;
    private final EntitySenses sensing;
    private final NonNullList<ItemStack> handItems = NonNullList.withSize(2, ItemStack.EMPTY);
-   protected final float[] handDropChances = new float[2];
+   public final float[] handDropChances = new float[2];
    private final NonNullList<ItemStack> armorItems = NonNullList.withSize(4, ItemStack.EMPTY);
-   protected final float[] armorDropChances = new float[4];
-   private boolean canPickUpLoot;
-   private boolean persistenceRequired;
+   public final float[] armorDropChances = new float[4];
+   // private boolean canPickUpLoot; // CraftBukkit - moved up to EntityLiving
+   public boolean persistenceRequired;
    private final Map<PathNodeType, Float> pathfindingMalus = Maps.newEnumMap(PathNodeType.class);
-   private ResourceLocation lootTable;
-   private long lootTableSeed;
+   public ResourceLocation lootTable;
+   public long lootTableSeed;
    @Nullable
    private Entity leashHolder;
    private int delayedLeashHolderId;
@@ -104,6 +_,8 @@
    private BlockPos restrictCenter = BlockPos.ZERO;
    private float restrictRadius = -1.0F;
 
+   public boolean aware = true; // CraftBukkit
+
    protected MobEntity(EntityType<? extends MobEntity> p_i48576_1_, World p_i48576_2_) {
       super(p_i48576_1_, p_i48576_2_);
       this.goalSelector = new GoalSelector(p_i48576_2_.getProfilerSupplier());
@@ -119,7 +_,6 @@
       if (p_i48576_2_ != null && !p_i48576_2_.isClientSide) {
          this.registerGoals();
       }
-
    }
 
    protected void registerGoals() {
@@ -197,7 +_,39 @@
    }
 
    public void setTarget(@Nullable LivingEntity p_70624_1_) {
-      this.target = p_70624_1_;
+      //Craftbukkit start
+      this.setGoalTarget(p_70624_1_, EntityTargetEvent.TargetReason.UNKNOWN, true);
+   }
+
+   //LivingEntity can be null, more info in org.bukkit.event.entity.EnitityTargetEvent
+   public boolean setGoalTarget(@Nullable LivingEntity entitylivingbaseIn, EntityTargetEvent.TargetReason reason, final boolean fireEvent) {
+      if (this.getTarget() == entitylivingbaseIn) {
+         return false;
+      }
+      if (fireEvent) {
+         if (reason == EntityTargetEvent.TargetReason.UNKNOWN && this.getTarget() != null && entitylivingbaseIn == null) {
+            reason = (this.getTarget().isAlive() ? EntityTargetEvent.TargetReason.FORGOT_TARGET : EntityTargetEvent.TargetReason.TARGET_DIED);
+         }
+         CraftLivingEntity ctarget = null;
+         if (entitylivingbaseIn != null) {
+            ctarget = (CraftLivingEntity)entitylivingbaseIn.getBukkitEntity();
+         }
+         final EntityTargetLivingEntityEvent event = new EntityTargetLivingEntityEvent(this.getBukkitEntity(), ctarget, reason);
+         this.level.getCBServer().getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return false;
+         }
+         if (event.getTarget() != null) {
+            entitylivingbaseIn = ((CraftLivingEntity)event.getTarget()).getHandle();
+         }
+         else {
+            entitylivingbaseIn = null;
+         }
+      }
+      this.target = entitylivingbaseIn;
+      net.minecraftforge.common.ForgeHooks.onLivingSetAttackTarget(this, entitylivingbaseIn);
+      return true;
+      // CraftBukkit end
    }
 
    public boolean canAttackType(EntityType<?> p_213358_1_) {
@@ -395,15 +_,26 @@
          p_213281_1_.putBoolean("NoAI", this.isNoAi());
       }
 
+      p_213281_1_.putBoolean("Bukkit.Aware", this.aware); // CraftBukkit
    }
 
    public void readAdditionalSaveData(CompoundNBT p_70037_1_) {
       super.readAdditionalSaveData(p_70037_1_);
+
+      // CraftBukkit start - If looting or persistence is false only use it if it was set after we started using it
       if (p_70037_1_.contains("CanPickUpLoot", 1)) {
-         this.setCanPickUpLoot(p_70037_1_.getBoolean("CanPickUpLoot"));
-      }
-
-      this.persistenceRequired = p_70037_1_.getBoolean("PersistenceRequired");
+         boolean data = p_70037_1_.getBoolean("CanPickUpLoot");
+         if (isLevelAtLeast(p_70037_1_, 1) || data) {
+            this.setCanPickUpLoot(data);
+         }
+      }
+
+      boolean data = p_70037_1_.getBoolean("PersistenceRequired");
+      if (isLevelAtLeast(p_70037_1_, 1) || data) {
+         this.persistenceRequired = data;
+      }
+      // CraftBukkit end
+
       if (p_70037_1_.contains("ArmorItems", 9)) {
          ListNBT listnbt = p_70037_1_.getList("ArmorItems", 10);
 
@@ -447,6 +_,11 @@
       }
 
       this.setNoAi(p_70037_1_.getBoolean("NoAI"));
+      // CraftBukkit start
+      if (p_70037_1_.contains("Bukkit.Aware")) {
+         this.aware = p_70037_1_.getBoolean("Bukkit.Aware");
+      }
+      // CraftBukkit end
    }
 
    protected void dropFromLootTable(DamageSource p_213354_1_, boolean p_213354_2_) {
@@ -462,7 +_,7 @@
       return this.lootTable == null ? this.getDefaultLootTable() : this.lootTable;
    }
 
-   protected ResourceLocation getDefaultLootTable() {
+   public ResourceLocation getDefaultLootTable() { // protected->public CraftBukkit
       return super.getLootTable();
    }
 
@@ -486,7 +_,7 @@
    public void aiStep() {
       super.aiStep();
       this.level.getProfiler().push("looting");
-      if (!this.level.isClientSide && this.canPickUpLoot() && this.isAlive() && !this.dead && this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+      if (!this.level.isClientSide && this.canPickUpLoot() && this.isAlive() && !this.dead && net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.level, this)) {
          for(ItemEntity itementity : this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(1.0D, 0.0D, 1.0D))) {
             if (!itementity.removed && !itementity.getItem().isEmpty() && !itementity.hasPickUpDelay() && this.wantsToPickUp(itementity.getItem())) {
                this.pickUpItem(itementity);
@@ -499,7 +_,7 @@
 
    protected void pickUpItem(ItemEntity p_175445_1_) {
       ItemStack itemstack = p_175445_1_.getItem();
-      if (this.equipItemIfPossible(itemstack)) {
+      if (this.equipItemIfPossible(itemstack, p_175445_1_)) { // CraftBukkit - add Item
          this.onItemPickup(p_175445_1_);
          this.take(p_175445_1_, itemstack.getCount());
          p_175445_1_.remove();
@@ -508,13 +_,27 @@
    }
 
    public boolean equipItemIfPossible(ItemStack p_233665_1_) {
+      // CraftBukkit start - add item
+      return this.equipItemIfPossible(p_233665_1_, null);
+   }
+
+   public boolean equipItemIfPossible(ItemStack p_233665_1_, ItemEntity entityitem) {
+      // CraftBukkit end
       EquipmentSlotType equipmentslottype = getEquipmentSlotForItem(p_233665_1_);
       ItemStack itemstack = this.getItemBySlot(equipmentslottype);
       boolean flag = this.canReplaceCurrentItem(p_233665_1_, itemstack);
-      if (flag && this.canHoldItem(p_233665_1_)) {
+      // CraftBukkit start
+      boolean canPickup = flag && this.canHoldItem(itemstack);
+      if (entityitem != null) {
+         canPickup = !org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory.callEntityPickupItemEvent(this, entityitem, 0, !canPickup).isCancelled();
+      }
+      if (canPickup) {
+         // CraftBukkit end
          double d0 = (double)this.getEquipmentDropChance(equipmentslottype);
          if (!itemstack.isEmpty() && (double)Math.max(this.random.nextFloat() - 0.1F, 0.0F) < d0) {
+            this.forceDrops = true; // CraftBukkit
             this.spawnAtLocation(itemstack);
+            this.forceDrops = false; // CraftBukkit
          }
 
          this.setItemSlotAndDropWhenKilled(equipmentslottype, p_233665_1_);
@@ -639,6 +_,14 @@
          this.remove();
       } else if (!this.isPersistenceRequired() && !this.requiresCustomPersistence()) {
          Entity entity = this.level.getNearestPlayer(this, -1.0D);
+         net.minecraftforge.eventbus.api.Event.Result result = net.minecraftforge.event.ForgeEventFactory.canEntityDespawn(this);
+         if (result == net.minecraftforge.eventbus.api.Event.Result.DENY) {
+            noActionTime = 0;
+            entity = null;
+         } else if (result == net.minecraftforge.eventbus.api.Event.Result.ALLOW) {
+            this.remove();
+            entity = null;
+         }
          if (entity != null) {
             double d0 = entity.distanceToSqr(this);
             int i = this.getType().getCategory().getDespawnDistance();
@@ -663,6 +_,7 @@
 
    protected final void serverAiStep() {
       ++this.noActionTime;
+      if (!this.aware) return; // CraftBukkit
       this.level.getProfiler().push("sensing");
       this.sensing.tick();
       this.level.getProfiler().pop();
@@ -879,6 +_,8 @@
    }
 
    public static EquipmentSlotType getEquipmentSlotForItem(ItemStack p_184640_0_) {
+      final EquipmentSlotType slot = p_184640_0_.getEquipmentSlot();
+      if (slot != null) return slot; // FORGE: Allow modders to set a non-default equipment slot for a stack; e.g. a non-armor chestplate-slot item
       Item item = p_184640_0_.getItem();
       if (item != Blocks.CARVED_PUMPKIN.asItem() && (!(item instanceof BlockItem) || !(((BlockItem)item).getBlock() instanceof AbstractSkullBlock))) {
          if (item instanceof ArmorItem) {
@@ -886,7 +_,7 @@
          } else if (item == Items.ELYTRA) {
             return EquipmentSlotType.CHEST;
          } else {
-            return item == Items.SHIELD ? EquipmentSlotType.OFFHAND : EquipmentSlotType.MAINHAND;
+            return p_184640_0_.isShield(null) ? EquipmentSlotType.OFFHAND : EquipmentSlotType.MAINHAND;
          }
       } else {
          return EquipmentSlotType.HEAD;
@@ -1008,11 +_,11 @@
    }
 
    public boolean canPickUpLoot() {
-      return this.canPickUpLoot;
+      return super.canPickUpLoot;
    }
 
    public void setCanPickUpLoot(boolean p_98053_1_) {
-      this.canPickUpLoot = p_98053_1_;
+      super.canPickUpLoot = p_98053_1_;
    }
 
    public boolean canTakeItem(ItemStack p_213365_1_) {
@@ -1028,6 +_,12 @@
       if (!this.isAlive()) {
          return ActionResultType.PASS;
       } else if (this.getLeashHolder() == p_184230_1_) {
+         // CraftBukkit start - fire PlayerUnleashEntityEvent
+         if (CraftEventFactory.callPlayerUnleashEntityEvent(this, p_184230_1_).isCancelled()) {
+            ((ServerPlayerEntity) p_184230_1_).connection.send(new SMountEntityPacket(this, this.getLeashHolder()));
+            return ActionResultType.PASS;
+         }
+         // CraftBukkit end
          this.dropLeash(true, !p_184230_1_.abilities.instabuild);
          return ActionResultType.sidedSuccess(this.level.isClientSide);
       } else {
@@ -1044,6 +_,12 @@
    private ActionResultType checkAndHandleImportantInteractions(PlayerEntity p_233661_1_, Hand p_233661_2_) {
       ItemStack itemstack = p_233661_1_.getItemInHand(p_233661_2_);
       if (itemstack.getItem() == Items.LEAD && this.canBeLeashed(p_233661_1_)) {
+         // CraftBukkit start - fire PlayerLeashEntityEvent
+         if (CraftEventFactory.callPlayerLeashEntityEvent(this, p_233661_1_, p_233661_1_).isCancelled()) {
+            ((ServerPlayerEntity) p_233661_1_).connection.send(new SMountEntityPacket(this, this.getLeashHolder()));
+            return ActionResultType.PASS;
+         }
+         // CraftBukkit end
          this.setLeashedTo(p_233661_1_, true);
          itemstack.shrink(1);
          return ActionResultType.sidedSuccess(this.level.isClientSide);
@@ -1108,13 +_,21 @@
       return this.restrictRadius != -1.0F;
    }
 
+   // CraftBukkit start
    @Nullable
    public <T extends MobEntity> T convertTo(EntityType<T> p_233656_1_, boolean p_233656_2_) {
+      return convertTo(p_233656_1_, p_233656_2_, EntityTransformEvent.TransformReason.UNKNOWN, CreatureSpawnEvent.SpawnReason.DEFAULT);
+   }
+
+   @Nullable
+   public <T extends MobEntity> T convertTo(EntityType<T> p_233656_1_, boolean p_233656_2_, EntityTransformEvent.TransformReason transformReason, CreatureSpawnEvent.SpawnReason spawnReason) {
+      // CraftBukkit end
       if (this.removed) {
          return (T)null;
       } else {
          T t = p_233656_1_.create(this.level);
          t.copyPosition(this);
+         t.setCanPickUpLoot(this.canPickUpLoot());
          t.setBaby(this.isBaby());
          t.setNoAi(this.isNoAi());
          if (this.hasCustomName()) {
@@ -1140,13 +_,17 @@
             }
          }
 
-         this.level.addFreshEntity(t);
+         // CraftBukkit start
+         if (CraftEventFactory.callEntityTransformEvent(this, t, transformReason).isCancelled()) {
+            return null;
+         }
+         this.level.addEntity(t, spawnReason);
+         // CraftBukkit end
          if (this.isPassenger()) {
             Entity entity = this.getVehicle();
             this.stopRiding();
             t.startRiding(entity, true);
          }
-
          this.remove();
          return t;
       }
@@ -1159,6 +_,7 @@
 
       if (this.leashHolder != null) {
          if (!this.isAlive() || !this.leashHolder.isAlive()) {
+            this.level.getCBServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), (!this.isAlive()) ? UnleashReason.PLAYER_UNLEASH : UnleashReason.HOLDER_GONE)); // CraftBukkit
             this.dropLeash(true, true);
          }
 
@@ -1175,7 +_,9 @@
          this.leashHolder = null;
          this.leashInfoTag = null;
          if (!this.level.isClientSide && p_110160_2_) {
+            this.forceDrops = true; // CraftBukkit
             this.spawnAtLocation(Items.LEAD);
+            this.forceDrops = false; // CraftBukkit
          }
 
          if (!this.level.isClientSide && p_110160_1_ && this.level instanceof ServerWorld) {
@@ -1229,6 +_,7 @@
    public boolean startRiding(Entity p_184205_1_, boolean p_184205_2_) {
       boolean flag = super.startRiding(p_184205_1_, p_184205_2_);
       if (flag && this.isLeashed()) {
+         this.level.getCBServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN)); // CraftBukkit
          this.dropLeash(true, true);
       }
 
@@ -1347,7 +_,15 @@
 
       int i = EnchantmentHelper.getFireAspect(this);
       if (i > 0) {
-         p_70652_1_.setSecondsOnFire(i * 4);
+         // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+         EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), p_70652_1_.getBukkitEntity(), i * 4);
+         org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+         if (!combustEvent.isCancelled()) {
+            p_70652_1_.putCallCombustEvent(false);
+            p_70652_1_.setSecondsOnFire(combustEvent.getDuration());
+            p_70652_1_.putCallCombustEvent(true);
+         }
+         // CraftBukkit end
       }
 
       boolean flag = p_70652_1_.hurt(DamageSource.mobAttack(this), f);
@@ -1403,6 +_,7 @@
 
    protected void removeAfterChangingDimensions() {
       super.removeAfterChangingDimensions();
+      this.level.getCBServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN)); // CraftBukkit
       this.dropLeash(true, false);
    }
 }
