--- a/net/minecraft/entity/player/PlayerInventory.java
+++ b/net/minecraft/entity/player/PlayerInventory.java
@@ -1,6 +_,7 @@
 package net.minecraft.entity.player;
 
 import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Predicate;
 import net.minecraft.block.BlockState;
@@ -26,6 +_,10 @@
 import net.minecraft.world.World;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.v1_16_R3.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.inventory.InventoryHolder;
 
 public class PlayerInventory implements IInventory, INameable {
    public final NonNullList<ItemStack> items = NonNullList.withSize(36, ItemStack.EMPTY);
@@ -37,6 +_,57 @@
    private ItemStack carried = ItemStack.EMPTY;
    private int timesChanged;
 
+   // CraftBukkit start - add fields and methods
+   private int maxStack = MAX_STACK;
+   public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+   @Override
+   public int getMaxStackSize() {
+      return this.maxStack;
+   }
+
+   public List<ItemStack> getArmorContents() {
+      return this.armor;
+   }
+
+   @Override
+   public List<ItemStack> getContents() {
+      final List<ItemStack> combined = new ArrayList<>(this.items.size() + this.armor.size() + this.offhand.size());
+      this.compartments.forEach(combined::addAll);
+      return combined;
+   }
+
+   @Override
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   @Override
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   @Override
+   public List<HumanEntity> getViewers() {
+      return this.transaction;
+   }
+
+   @Override
+   public InventoryHolder getOwner() {
+      return this.player.getBukkitEntity();
+   }
+
+   @Override
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
+   @Override
+   public Location getLocation() {
+      return this.player.getBukkitEntity().getLocation();
+   }
+   // CraftBukkit end
+
    public PlayerInventory(PlayerEntity p_i1750_1_) {
       this.player = p_i1750_1_;
    }
@@ -57,6 +_,33 @@
       return p_184431_1_.getItem() == p_184431_2_.getItem() && ItemStack.tagMatches(p_184431_1_, p_184431_2_);
    }
 
+
+   // CraftBukkit start - Watch method above! :D
+   public int canHold(final ItemStack itemstack) {
+      int remains = itemstack.getCount();
+      for (int i = 0; i < this.items.size(); ++i) {
+         ItemStack itemstack2 = this.getItem(i);
+         if (itemstack2.isEmpty()) {
+            return itemstack.getCount();
+         }
+         if (this.hasRemainingSpaceForItem(itemstack2, itemstack)) {
+            remains -= ((itemstack2.getMaxStackSize() < this.getMaxStackSize()) ? itemstack2.getMaxStackSize() : this.getMaxStackSize()) - itemstack2.getCount();
+         }
+         if (remains <= 0) {
+            return itemstack.getCount();
+         }
+      }
+      ItemStack offhandItemStack = this.getItem(this.items.size() + this.armor.size());
+      if (this.hasRemainingSpaceForItem(offhandItemStack, itemstack)) {
+         remains -= ((offhandItemStack.getMaxStackSize() < this.getMaxStackSize()) ? offhandItemStack.getMaxStackSize() : this.getMaxStackSize()) - offhandItemStack.getCount();
+      }
+      if (remains <= 0) {
+         return itemstack.getCount();
+      }
+      return itemstack.getCount() - remains;
+   }
+   // CraftBukkit end
+
    public int getFreeSlot() {
       for(int i = 0; i < this.items.size(); ++i) {
          if (this.items.get(i).isEmpty()) {
@@ -187,7 +_,8 @@
       int i = p_191973_2_.getCount();
       ItemStack itemstack = this.getItem(p_191973_1_);
       if (itemstack.isEmpty()) {
-         itemstack = new ItemStack(item, 0);
+         itemstack = p_191973_2_.copy(); // Forge: Replace Item clone above to preserve item capabilities when picking the item up.
+         itemstack.setCount(0);
          if (p_191973_2_.hasTag()) {
             itemstack.setTag(p_191973_2_.getTag().copy());
          }
@@ -238,7 +_,7 @@
             }
          }
       }
-
+      armor.forEach(e -> e.onArmorTick(player.level, player));
    }
 
    public boolean add(ItemStack p_70441_1_) {
@@ -287,6 +_,8 @@
          } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Adding item to inventory");
             CrashReportCategory crashreportcategory = crashreport.addCategory("Item being added");
+            crashreportcategory.setDetail("Registry Name", () -> String.valueOf(p_191971_2_.getItem().getRegistryName()));
+            crashreportcategory.setDetail("Item Class", () -> p_191971_2_.getItem().getClass().getName());
             crashreportcategory.setDetail("Item ID", Item.getId(p_191971_2_.getItem()));
             crashreportcategory.setDetail("Item data", p_191971_2_.getDamageValue());
             crashreportcategory.setDetail("Item name", () -> {
@@ -539,6 +_,11 @@
    }
 
    public ItemStack getCarried() {
+      // CraftBukkit start
+      if (this.carried.isEmpty()) {
+         this.setCarried(ItemStack.EMPTY);
+      }
+      // CraftBukkit end
       return this.carried;
    }
 
