--- a/net/minecraft/entity/player/PlayerEntity.java
+++ b/net/minecraft/entity/player/PlayerEntity.java
@@ -12,6 +_,7 @@
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
@@ -30,7 +_,6 @@
 import net.minecraft.entity.Pose;
 import net.minecraft.entity.ai.attributes.AttributeModifierMap;
 import net.minecraft.entity.ai.attributes.Attributes;
-import net.minecraft.entity.boss.dragon.EnderDragonPartEntity;
 import net.minecraft.entity.item.ArmorStandEntity;
 import net.minecraft.entity.item.BoatEntity;
 import net.minecraft.entity.item.ItemEntity;
@@ -48,8 +_,8 @@
 import net.minecraft.inventory.container.INamedContainerProvider;
 import net.minecraft.inventory.container.PlayerContainer;
 import net.minecraft.item.ArmorItem;
-import net.minecraft.item.AxeItem;
 import net.minecraft.item.ElytraItem;
+import net.minecraft.item.FilledMapItem;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.Items;
 import net.minecraft.item.MerchantOffers;
@@ -69,7 +_,6 @@
 import net.minecraft.potion.Effects;
 import net.minecraft.scoreboard.ScorePlayerTeam;
 import net.minecraft.scoreboard.Scoreboard;
-import net.minecraft.scoreboard.Team;
 import net.minecraft.stats.Stat;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.FluidTags;
@@ -78,20 +_,7 @@
 import net.minecraft.tileentity.JigsawTileEntity;
 import net.minecraft.tileentity.SignTileEntity;
 import net.minecraft.tileentity.StructureBlockTileEntity;
-import net.minecraft.util.ActionResultType;
-import net.minecraft.util.CachedBlockInfo;
-import net.minecraft.util.CooldownTracker;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.Direction;
-import net.minecraft.util.FoodStats;
-import net.minecraft.util.Hand;
-import net.minecraft.util.HandSide;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.SharedConstants;
-import net.minecraft.util.SoundCategory;
-import net.minecraft.util.SoundEvent;
-import net.minecraft.util.SoundEvents;
-import net.minecraft.util.Unit;
+import net.minecraft.util.*;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
@@ -106,10 +_,24 @@
 import net.minecraft.world.GameType;
 import net.minecraft.world.World;
 import net.minecraft.world.server.ServerWorld;
+import net.minecraft.world.storage.MapData;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import org.bukkit.craftbukkit.v1_16_R3.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_16_R3.util.CraftVector;
+import org.bukkit.entity.Item;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityExhaustionEvent;
+import org.bukkit.event.entity.EntityPotionEffectEvent.Cause;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
+import org.bukkit.event.player.PlayerDropItemEvent;
+import org.bukkit.event.player.PlayerVelocityEvent;
 
 public abstract class PlayerEntity extends LivingEntity {
+   public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
    public static final EntitySize STANDING_DIMENSIONS = EntitySize.scalable(0.6F, 1.8F);
    private static final Map<Pose, EntitySize> POSES = ImmutableMap.<Pose, EntitySize>builder().put(Pose.STANDING, STANDING_DIMENSIONS).put(Pose.SLEEPING, SLEEPING_DIMENSIONS).put(Pose.FALL_FLYING, EntitySize.scalable(0.6F, 0.6F)).put(Pose.SWIMMING, EntitySize.scalable(0.6F, 0.6F)).put(Pose.SPIN_ATTACK, EntitySize.scalable(0.6F, 0.6F)).put(Pose.CROUCHING, EntitySize.scalable(0.6F, 1.5F)).put(Pose.DYING, EntitySize.fixed(0.2F, 0.2F)).build();
    private static final DataParameter<Float> DATA_PLAYER_ABSORPTION_ID = EntityDataManager.defineId(PlayerEntity.class, DataSerializers.FLOAT);
@@ -119,11 +_,11 @@
    protected static final DataParameter<CompoundNBT> DATA_SHOULDER_LEFT = EntityDataManager.defineId(PlayerEntity.class, DataSerializers.COMPOUND_TAG);
    protected static final DataParameter<CompoundNBT> DATA_SHOULDER_RIGHT = EntityDataManager.defineId(PlayerEntity.class, DataSerializers.COMPOUND_TAG);
    private long timeEntitySatOnShoulder;
-   public final PlayerInventory inventory = new PlayerInventory(this);
-   protected EnderChestInventory enderChestInventory = new EnderChestInventory();
-   public final PlayerContainer inventoryMenu;
+   public PlayerInventory inventory = new PlayerInventory(this);
+   protected EnderChestInventory enderChestInventory = new EnderChestInventory(this); // CraftBukkit - add "this" to constructor
+   public PlayerContainer inventoryMenu;
    public Container containerMenu;
-   protected FoodStats foodData = new FoodStats();
+   protected FoodStats foodData = new FoodStats(this); // CraftBukkit - add "this" to constructor
    protected int jumpTriggerTime;
    public float oBob;
    public float bob;
@@ -134,7 +_,7 @@
    public double xCloak;
    public double yCloak;
    public double zCloak;
-   private int sleepCounter;
+   public int sleepCounter;
    protected boolean wasUnderwater;
    public final PlayerAbilities abilities = new PlayerAbilities();
    public int experienceLevel;
@@ -150,6 +_,19 @@
    private final CooldownTracker cooldowns = this.createItemCooldowns();
    @Nullable
    public FishingBobberEntity fishing;
+   private final java.util.Collection<IFormattableTextComponent> prefixes = new java.util.LinkedList<>();
+   private final java.util.Collection<IFormattableTextComponent> suffixes = new java.util.LinkedList<>();
+   @Nullable private Pose forcedPose;
+
+   // CraftBukkit start
+   public boolean fauxSleeping;
+   public int oldLevel = -1;
+
+   @Override
+   public CraftHumanEntity getBukkitEntity() {
+      return (CraftHumanEntity) super.getBukkitEntity();
+   }
+   // CraftBukkit end
 
    public PlayerEntity(World p_i241920_1_, BlockPos p_i241920_2_, float p_i241920_3_, GameProfile p_i241920_4_) {
       super(EntityType.PLAYER, p_i241920_1_);
@@ -175,7 +_,7 @@
    }
 
    public static AttributeModifierMap.MutableAttribute createAttributes() {
-      return LivingEntity.createLivingAttributes().add(Attributes.ATTACK_DAMAGE, 1.0D).add(Attributes.MOVEMENT_SPEED, (double)0.1F).add(Attributes.ATTACK_SPEED).add(Attributes.LUCK);
+      return LivingEntity.createLivingAttributes().add(Attributes.ATTACK_DAMAGE, 1.0D).add(Attributes.MOVEMENT_SPEED, (double)0.1F).add(Attributes.ATTACK_SPEED).add(Attributes.LUCK).add(net.minecraftforge.common.ForgeMod.REACH_DISTANCE.get()).add(Attributes.ATTACK_KNOCKBACK);
    }
 
    protected void defineSynchedData() {
@@ -189,6 +_,7 @@
    }
 
    public void tick() {
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPlayerPreTick(this);
       this.noPhysics = this.isSpectator();
       if (this.isSpectator()) {
          this.onGround = false;
@@ -204,7 +_,7 @@
             this.sleepCounter = 100;
          }
 
-         if (!this.level.isClientSide && this.level.isDay()) {
+         if (!this.level.isClientSide && !net.minecraftforge.event.ForgeEventFactory.fireSleepingTimeCheck(this, getSleepingPos())) {
             this.stopSleepInBed(false, true);
          }
       } else if (this.sleepCounter > 0) {
@@ -258,6 +_,7 @@
       this.turtleHelmetTick();
       this.cooldowns.tick();
       this.updatePlayerPose();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPlayerPostTick(this);
    }
 
    public boolean isSecondaryUseActive() {
@@ -280,7 +_,7 @@
    private void turtleHelmetTick() {
       ItemStack itemstack = this.getItemBySlot(EquipmentSlotType.HEAD);
       if (itemstack.getItem() == Items.TURTLE_HELMET && !this.isEyeInFluid(FluidTags.WATER)) {
-         this.addEffect(new EffectInstance(Effects.WATER_BREATHING, 200, 0, false, false, true));
+         this.addEffect(new EffectInstance(Effects.WATER_BREATHING, 200, 0, false, false, true), Cause.TURTLE_HELMET); // CraftBukkit
       }
 
    }
@@ -333,6 +_,10 @@
    }
 
    protected void updatePlayerPose() {
+      if(forcedPose != null) {
+         this.setPose(forcedPose);
+         return;
+      }
       if (this.canEnterPose(Pose.SWIMMING)) {
          Pose pose;
          if (this.isFallFlying()) {
@@ -395,7 +_,7 @@
       return SoundCategory.PLAYERS;
    }
 
-   protected int getFireImmuneTicks() {
+   public int getFireImmuneTicks() {
       return 20;
    }
 
@@ -466,7 +_,8 @@
 
       if (this.level.getDifficulty() == Difficulty.PEACEFUL && this.level.getGameRules().getBoolean(GameRules.RULE_NATURAL_REGENERATION)) {
          if (this.getHealth() < this.getMaxHealth() && this.tickCount % 20 == 0) {
-            this.heal(1.0F);
+            // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
+            this.heal(1.0F, RegainReason.REGEN);
          }
 
          if (this.foodData.needsFood() && this.tickCount % 10 == 0) {
@@ -550,6 +_,7 @@
    }
 
    public void die(DamageSource p_70645_1_) {
+      if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this,  p_70645_1_)) return;
       super.die(p_70645_1_);
       this.reapplyPosition();
       if (!this.isSpectator()) {
@@ -603,12 +_,14 @@
    }
 
    public boolean drop(boolean p_225609_1_) {
-      return this.drop(this.inventory.removeItem(this.inventory.selected, p_225609_1_ && !this.inventory.getSelected().isEmpty() ? this.inventory.getSelected().getCount() : 1), false, true) != null;
+      ItemStack stack = inventory.getSelected();
+      if (stack.isEmpty() || !stack.onDroppedByPlayer(this)) return false;
+      return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, this.inventory.removeItem(this.inventory.selected, p_225609_1_ && !this.inventory.getSelected().isEmpty() ? this.inventory.getSelected().getCount() : 1), true) != null;
    }
 
    @Nullable
    public ItemEntity drop(ItemStack p_71019_1_, boolean p_71019_2_) {
-      return this.drop(p_71019_1_, false, p_71019_2_);
+      return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, p_71019_1_, p_71019_2_);
    }
 
    @Nullable
@@ -642,11 +_,44 @@
             itementity.setDeltaMovement((double)(-f3 * f2 * 0.3F) + Math.cos((double)f5) * (double)f6, (double)(-f8 * 0.3F + 0.1F + (this.random.nextFloat() - this.random.nextFloat()) * 0.1F), (double)(f4 * f2 * 0.3F) + Math.sin((double)f5) * (double)f6);
          }
 
+         // CraftBukkit start - fire PlayerDropItemEvent
+         Player player = (Player) this.getBukkitEntity();
+         Item drop = (Item) itementity.getBukkitEntity();
+         PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
+         this.level.getCBServer().getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
+            if (p_146097_2_ && (cur == null || cur.getAmount() == 0)) {
+               // The complete stack was dropped
+               player.getInventory().setItemInHand(drop.getItemStack());
+            } else if (p_146097_2_ && cur.isSimilar(drop.getItemStack()) && cur.getAmount() < cur.getMaxStackSize() && drop.getItemStack().getAmount() == 1) {
+               // Only one item is dropped
+               cur.setAmount(cur.getAmount() + 1);
+               player.getInventory().setItemInHand(cur);
+            } else {
+               // Fallback
+               player.getInventory().addItem(drop.getItemStack());
+            }
+            return null;
+         }
+         // CraftBukkit end
+         // Paper start - remove player from map on drop
+         if (p_146097_1_.getItem() == Items.FILLED_MAP) {
+            MapData worldmap = FilledMapItem.getOrCreateSavedData(p_146097_1_, this.level);
+            worldmap.updateSeenPlayers(this, p_146097_1_);
+         }
+         // Paper end
+
          return itementity;
       }
    }
 
+   @Deprecated //Use location sensitive version below
    public float getDestroySpeed(BlockState p_184813_1_) {
+      return getDigSpeed(p_184813_1_, null);
+   }
+
+   public float getDigSpeed(BlockState p_184813_1_, @Nullable BlockPos pos) {
       float f = this.inventory.getDestroySpeed(p_184813_1_);
       if (f > 1.0F) {
          int i = EnchantmentHelper.getBlockEfficiency(this);
@@ -688,11 +_,12 @@
          f /= 5.0F;
       }
 
+      f = net.minecraftforge.event.ForgeEventFactory.getBreakSpeed(this, p_184813_1_, f, pos);
       return f;
    }
 
    public boolean hasCorrectToolForDrops(BlockState p_234569_1_) {
-      return !p_234569_1_.requiresCorrectToolForDrops() || this.inventory.getSelected().isCorrectToolForDrops(p_234569_1_);
+      return net.minecraftforge.event.ForgeEventFactory.doPlayerHarvestCheck(this, p_234569_1_, !p_234569_1_.requiresCorrectToolForDrops() || this.inventory.getSelected().isCorrectToolForDrops(p_234569_1_));
    }
 
    public void readAdditionalSaveData(CompoundNBT p_70037_1_) {
@@ -767,16 +_,18 @@
    }
 
    public boolean hurt(DamageSource p_70097_1_, float p_70097_2_) {
+      if (!net.minecraftforge.common.ForgeHooks.onPlayerAttack(this, p_70097_1_, p_70097_2_)) return false;
       if (this.isInvulnerableTo(p_70097_1_)) {
          return false;
       } else if (this.abilities.invulnerable && !p_70097_1_.isBypassInvul()) {
+         this.forceExplosionKnockback = true; // SPIGOT-5258 - Make invulnerable players get knockback from explosions
          return false;
       } else {
          this.noActionTime = 0;
          if (this.isDeadOrDying()) {
             return false;
          } else {
-            this.removeEntitiesOnShoulder();
+            // this.spawnShoulderEntities(); // CraftBukkit - moved down
             if (p_70097_1_.scalesWithDifficulty()) {
                if (this.level.getDifficulty() == Difficulty.PEACEFUL) {
                   p_70097_2_ = 0.0F;
@@ -791,27 +_,49 @@
                }
             }
 
-            return p_70097_2_ == 0.0F ? false : super.hurt(p_70097_1_, p_70097_2_);
+            // CraftBukkit start - Don't filter out 0 damage
+            boolean damaged = super.hurt(p_70097_1_, p_70097_2_);
+            if (damaged) {
+               this.removeEntitiesOnShoulder();
+            }
+            return damaged;
+            // CraftBukkit end
          }
       }
    }
 
    protected void blockUsingShield(LivingEntity p_190629_1_) {
       super.blockUsingShield(p_190629_1_);
-      if (p_190629_1_.getMainHandItem().getItem() instanceof AxeItem) {
+      if (p_190629_1_.getMainHandItem().canDisableShield(this.useItem, this, p_190629_1_)) {
          this.disableShield(true);
       }
 
    }
 
    public boolean canHarmPlayer(PlayerEntity p_96122_1_) {
-      Team team = this.getTeam();
-      Team team1 = p_96122_1_.getTeam();
-      if (team == null) {
-         return true;
+      // CraftBukkit start - Change to check OTHER player's scoreboard team according to API
+      // To summarize this method's logic, it's "Can parameter hurt this"
+      org.bukkit.scoreboard.Team team;
+      if (p_96122_1_ instanceof ServerPlayerEntity) {
+         ServerPlayerEntity thatPlayer = (ServerPlayerEntity) p_96122_1_;
+         team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
+         if (team == null || team.allowFriendlyFire()) {
+            return true;
+         }
       } else {
-         return !team.isAlliedTo(team1) ? true : team.isAllowFriendlyFire();
-      }
+         // This should never be called, but is implemented anyway
+         org.bukkit.OfflinePlayer thisPlayer = p_96122_1_.level.getCBServer().getOfflinePlayer(p_96122_1_.getScoreboardName());
+         team = p_96122_1_.level.getCBServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
+         if (team == null || team.allowFriendlyFire()) {
+            return true;
+         }
+      }
+
+      if (this instanceof ServerPlayerEntity) {
+         return !team.hasPlayer(((ServerPlayerEntity) this).getBukkitEntity());
+      }
+      return !team.hasPlayer(this.level.getCBServer().getOfflinePlayer(this.getScoreboardName()));
+      // CraftBukkit end
    }
 
    protected void hurtArmor(DamageSource p_230294_1_, float p_230294_2_) {
@@ -819,16 +_,16 @@
    }
 
    protected void hurtCurrentlyUsedShield(float p_184590_1_) {
-      if (this.useItem.getItem() == Items.SHIELD) {
+      if (this.useItem.isShield(this)) {
          if (!this.level.isClientSide) {
             this.awardStat(Stats.ITEM_USED.get(this.useItem.getItem()));
          }
-
          if (p_184590_1_ >= 3.0F) {
             int i = 1 + MathHelper.floor(p_184590_1_);
             Hand hand = this.getUsedItemHand();
             this.useItem.hurtAndBreak(i, this, (p_213833_1_) -> {
                p_213833_1_.broadcastBreakEvent(hand);
+               net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, this.useItem, hand);
             });
             if (this.useItem.isEmpty()) {
                if (hand == Hand.MAIN_HAND) {
@@ -836,37 +_,44 @@
                } else {
                   this.setItemSlot(EquipmentSlotType.OFFHAND, ItemStack.EMPTY);
                }
-
                this.useItem = ItemStack.EMPTY;
                this.playSound(SoundEvents.SHIELD_BREAK, 0.8F, 0.8F + this.level.random.nextFloat() * 0.4F);
             }
          }
-
       }
    }
 
    protected void actuallyHurt(DamageSource p_70665_1_, float p_70665_2_) {
+      this.damageEntity0(p_70665_1_, p_70665_2_);
+   }
+
+   protected boolean damageEntity0(DamageSource p_70665_1_, float p_70665_2_) {
+      if (true) {
+         return super.damageEntity0(p_70665_1_, p_70665_2_);
+      }
       if (!this.isInvulnerableTo(p_70665_1_)) {
+         p_70665_2_ = net.minecraftforge.common.ForgeHooks.onLivingHurt(this, p_70665_1_, p_70665_2_);
+         if (p_70665_2_ <= 0) return false;
          p_70665_2_ = this.getDamageAfterArmorAbsorb(p_70665_1_, p_70665_2_);
          p_70665_2_ = this.getDamageAfterMagicAbsorb(p_70665_1_, p_70665_2_);
          float f2 = Math.max(p_70665_2_ - this.getAbsorptionAmount(), 0.0F);
          this.setAbsorptionAmount(this.getAbsorptionAmount() - (p_70665_2_ - f2));
+         f2 = net.minecraftforge.common.ForgeHooks.onLivingDamage(this, p_70665_1_, f2);
          float f = p_70665_2_ - f2;
          if (f > 0.0F && f < 3.4028235E37F) {
             this.awardStat(Stats.DAMAGE_ABSORBED, Math.round(f * 10.0F));
          }
-
          if (f2 != 0.0F) {
             this.causeFoodExhaustion(p_70665_1_.getFoodExhaustion());
             float f1 = this.getHealth();
-            this.setHealth(this.getHealth() - f2);
             this.getCombatTracker().recordDamage(p_70665_1_, f1, f2);
+            this.setHealth(f1 - f2); // Forge: moved to fix MC-121048
             if (f2 < 3.4028235E37F) {
                this.awardStat(Stats.DAMAGE_TAKEN, Math.round(f2 * 10.0F));
             }
-
          }
       }
+      return false;
    }
 
    protected boolean onSoulSpeedBlock() {
@@ -909,6 +_,8 @@
 
          return ActionResultType.PASS;
       } else {
+         ActionResultType cancelResult = net.minecraftforge.common.ForgeHooks.onInteractEntity(this, p_190775_1_, p_190775_2_);
+         if (cancelResult != null) return cancelResult;
          ItemStack itemstack = this.getItemInHand(p_190775_2_);
          ItemStack itemstack1 = itemstack.copy();
          ActionResultType actionresulttype = p_190775_1_.interact(this, p_190775_2_);
@@ -917,6 +_,9 @@
                itemstack.setCount(itemstack1.getCount());
             }
 
+            if (!this.abilities.instabuild && itemstack.isEmpty()) {
+               net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, itemstack1, p_190775_2_);
+            }
             return actionresulttype;
          } else {
             if (!itemstack.isEmpty() && p_190775_1_ instanceof LivingEntity) {
@@ -927,6 +_,7 @@
                ActionResultType actionresulttype1 = itemstack.interactLivingEntity(this, (LivingEntity)p_190775_1_, p_190775_2_);
                if (actionresulttype1.consumesAction()) {
                   if (itemstack.isEmpty() && !this.abilities.instabuild) {
+                     net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, itemstack1, p_190775_2_);
                      this.setItemInHand(p_190775_2_, ItemStack.EMPTY);
                   }
 
@@ -1011,6 +_,7 @@
    }
 
    public void attack(Entity p_71059_1_) {
+      if (!net.minecraftforge.common.ForgeHooks.onPlayerAttackTarget(this, p_71059_1_)) return;
       if (p_71059_1_.isAttackable()) {
          if (!p_71059_1_.skipAttackInteraction(this)) {
             float f = (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
@@ -1024,11 +_,11 @@
             float f2 = this.getAttackStrengthScale(0.5F);
             f = f * (0.2F + f2 * f2 * 0.8F);
             f1 = f1 * f2;
-            this.resetAttackStrengthTicker();
+            // this.resetCooldown();  // CraftBukkit - Moved to EntityLiving to reset the cooldown after the damage is dealt
             if (f > 0.0F || f1 > 0.0F) {
                boolean flag = f2 > 0.9F;
                boolean flag1 = false;
-               int i = 0;
+               float i = (float)this.getAttributeValue(Attributes.ATTACK_KNOCKBACK); // Forge: Initialize this value to the attack knockback attribute of the player, which is by default 0
                i = i + EnchantmentHelper.getKnockbackBonus(this);
                if (this.isSprinting() && flag) {
                   this.level.playSound((PlayerEntity)null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_KNOCKBACK, this.getSoundSource(), 1.0F, 1.0F);
@@ -1038,8 +_,10 @@
 
                boolean flag2 = flag && this.fallDistance > 0.0F && !this.onGround && !this.onClimbable() && !this.isInWater() && !this.hasEffect(Effects.BLINDNESS) && !this.isPassenger() && p_71059_1_ instanceof LivingEntity;
                flag2 = flag2 && !this.isSprinting();
+               net.minecraftforge.event.entity.player.CriticalHitEvent hitResult = net.minecraftforge.common.ForgeHooks.getCriticalHit(this, p_71059_1_, flag2, flag2 ? 1.5F : 1.0F);
+               flag2 = hitResult != null;
                if (flag2) {
-                  f *= 1.5F;
+                  f *= hitResult.getDamageModifier();
                }
 
                f = f + f1;
@@ -1058,8 +_,16 @@
                if (p_71059_1_ instanceof LivingEntity) {
                   f4 = ((LivingEntity)p_71059_1_).getHealth();
                   if (j > 0 && !p_71059_1_.isOnFire()) {
+                     // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+                     EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), p_71059_1_.getBukkitEntity(), 1);
+                     org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+                     if (!combustEvent.isCancelled()) {
                      flag4 = true;
-                     p_71059_1_.setSecondsOnFire(1);
+                     p_71059_1_.putCallCombustEvent(false);
+                     p_71059_1_.setSecondsOnFire(combustEvent.getDuration());
+                     p_71059_1_.putCallCombustEvent(true);
+                     }
+                     // CraftBukkit end
                   }
                }
 
@@ -1082,8 +_,11 @@
 
                      for(LivingEntity livingentity : this.level.getEntitiesOfClass(LivingEntity.class, p_71059_1_.getBoundingBox().inflate(1.0D, 0.25D, 1.0D))) {
                         if (livingentity != this && livingentity != p_71059_1_ && !this.isAlliedTo(livingentity) && (!(livingentity instanceof ArmorStandEntity) || !((ArmorStandEntity)livingentity).isMarker()) && this.distanceToSqr(livingentity) < 9.0D) {
-                           livingentity.knockback(0.4F, (double)MathHelper.sin(this.yRot * ((float)Math.PI / 180F)), (double)(-MathHelper.cos(this.yRot * ((float)Math.PI / 180F))));
-                           livingentity.hurt(DamageSource.playerAttack(this), f3);
+                           // CraftBukkit start - Only apply knockback if the damage hits
+                           if (livingentity.hurt(DamageSource.playerAttack(this).sweep(), f3)) {
+                              livingentity.knockback(0.4F, (double) MathHelper.sin(this.yRot * ((float) Math.PI / 180F)), (double) (-MathHelper.cos(this.yRot * ((float) Math.PI / 180F))));
+                           }
+                           // CraftBukkit end
                         }
                      }
 
@@ -1092,9 +_,23 @@
                   }
 
                   if (p_71059_1_ instanceof ServerPlayerEntity && p_71059_1_.hurtMarked) {
+                     // CraftBukkit start - Add Velocity Event
+                     boolean cancelled = false;
+                     Player player = (Player) p_71059_1_.getBukkitEntity();
+                     org.bukkit.util.Vector velocity = CraftVector.toBukkit(vector3d);
+                     PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
+                     level.getCBServer().getPluginManager().callEvent(event);
+                     if (event.isCancelled()) {
+                        cancelled = true;
+                     } else if (!velocity.equals(event.getVelocity())) {
+                        player.setVelocity(event.getVelocity());
+                     }
+                     if (!cancelled) {
                      ((ServerPlayerEntity)p_71059_1_).connection.send(new SEntityVelocityPacket(p_71059_1_));
                      p_71059_1_.hurtMarked = false;
-                     p_71059_1_.setDeltaMovement(vector3d);
+                        p_71059_1_.setDeltaMovement(vector3d);
+                     }
+                     // CraftBukkit end
                   }
 
                   if (flag2) {
@@ -1122,13 +_,15 @@
                   EnchantmentHelper.doPostDamageEffects(this, p_71059_1_);
                   ItemStack itemstack1 = this.getMainHandItem();
                   Entity entity = p_71059_1_;
-                  if (p_71059_1_ instanceof EnderDragonPartEntity) {
-                     entity = ((EnderDragonPartEntity)p_71059_1_).parentMob;
+                  if (p_71059_1_ instanceof net.minecraftforge.entity.PartEntity) {
+                     entity = ((net.minecraftforge.entity.PartEntity<?>) p_71059_1_).getParent();
                   }
 
                   if (!this.level.isClientSide && !itemstack1.isEmpty() && entity instanceof LivingEntity) {
+                     ItemStack copy = itemstack1.copy();
                      itemstack1.hurtEnemy((LivingEntity)entity, this);
                      if (itemstack1.isEmpty()) {
+                        net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, copy, Hand.MAIN_HAND);
                         this.setItemInHand(Hand.MAIN_HAND, ItemStack.EMPTY);
                      }
                   }
@@ -1137,7 +_,15 @@
                      float f5 = f4 - ((LivingEntity)p_71059_1_).getHealth();
                      this.awardStat(Stats.DAMAGE_DEALT, Math.round(f5 * 10.0F));
                      if (j > 0) {
-                        p_71059_1_.setSecondsOnFire(j * 4);
+                        // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+                        EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), j * 4);
+                        org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+                        if (!combustEvent.isCancelled()) {
+                           entity.putCallCombustEvent(false);
+                           entity.setSecondsOnFire(combustEvent.getDuration());
+                           entity.putCallCombustEvent(true);
+                        }
+                        // CraftBukkit end
                      }
 
                      if (this.level instanceof ServerWorld && f5 > 2.0F) {
@@ -1145,13 +_,17 @@
                         ((ServerWorld)this.level).sendParticles(ParticleTypes.DAMAGE_INDICATOR, p_71059_1_.getX(), p_71059_1_.getY(0.5D), p_71059_1_.getZ(), k, 0.1D, 0.0D, 0.1D, 0.2D);
                      }
                   }
-
-                  this.causeFoodExhaustion(0.1F);
+                  this.causeFoodExhaustion(level.spigotConfig.combatExhaustion, EntityExhaustionEvent.ExhaustionReason.ATTACK); // Spigot - Change to use configurable value
                } else {
                   this.level.playSound((PlayerEntity)null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_NODAMAGE, this.getSoundSource(), 1.0F, 1.0F);
                   if (flag4) {
                      p_71059_1_.clearFire();
                   }
+                  // CraftBukkit start - resync on cancelled event
+                  if (this instanceof ServerPlayerEntity) {
+                     ((ServerPlayerEntity) this).getBukkitEntity().updateInventory();
+                  }
+                  // CraftBukkit end
                }
             }
 
@@ -1170,7 +_,7 @@
       }
 
       if (this.random.nextFloat() < f) {
-         this.getCooldowns().addCooldown(Items.SHIELD, 100);
+         this.getCooldowns().addCooldown(this.getUseItem().getItem(), 100);
          this.stopUsingItem();
          this.level.broadcastEntityEvent(this, (byte)30);
       }
@@ -1196,8 +_,9 @@
    public void respawn() {
    }
 
-   public void remove() {
-      super.remove();
+   @Override
+   public void remove(boolean keepData) {
+      super.remove(keepData);
       this.inventoryMenu.removed(this);
       if (this.containerMenu != null) {
          this.containerMenu.removed(this);
@@ -1213,13 +_,24 @@
       return this.gameProfile;
    }
 
+   public GameProfile getProfile() {
+      return this.getGameProfile();
+   }
+
    public Either<PlayerEntity.SleepResult, Unit> startSleepInBed(BlockPos p_213819_1_) {
-      this.startSleeping(p_213819_1_);
+      // CraftBukkit start
+      return this.sleep(p_213819_1_, false);
+   }
+
+   public Either<SleepResult, Unit> sleep(BlockPos at, boolean force) {
+      // CraftBukkit end
+      this.startSleeping(at);
       this.sleepCounter = 0;
       return Either.right(Unit.INSTANCE);
    }
 
    public void stopSleepInBed(boolean p_225652_1_, boolean p_225652_2_) {
+      net.minecraftforge.event.ForgeEventFactory.onPlayerWakeup(this, p_225652_1_, p_225652_2_);
       super.stopSleeping();
       if (this.level instanceof ServerWorld && p_225652_2_) {
          ((ServerWorld)this.level).updateSleepingPlayerList();
@@ -1245,7 +_,7 @@
       } else if (block instanceof BedBlock && BedBlock.canSetSpawn(p_242374_0_)) {
          return BedBlock.findStandUpPosition(EntityType.PLAYER, p_242374_0_, p_242374_1_, p_242374_2_);
       } else if (!p_242374_3_) {
-         return Optional.empty();
+         return blockstate.getRespawnPosition(EntityType.PLAYER, p_242374_0_, p_242374_1_, p_242374_2_, null);
       } else {
          boolean flag = block.isPossibleToRespawnInThis();
          boolean flag1 = p_242374_0_.getBlockState(p_242374_1_.above()).getBlock().isPossibleToRespawnInThis();
@@ -1297,11 +_,10 @@
       super.jumpFromGround();
       this.awardStat(Stats.JUMP);
       if (this.isSprinting()) {
-         this.causeFoodExhaustion(0.2F);
+         this.causeFoodExhaustion(level.spigotConfig.jumpSprintExhaustion, EntityExhaustionEvent.ExhaustionReason.JUMP_SPRINT); // Spigot - Change to use configurable value
       } else {
-         this.causeFoodExhaustion(0.05F);
+         this.causeFoodExhaustion(level.spigotConfig.jumpWalkExhaustion, EntityExhaustionEvent.ExhaustionReason.JUMP); // Spigot - Change to use configurable value
       }
-
    }
 
    public void travel(Vector3d p_213352_1_) {
@@ -1326,7 +_,11 @@
          this.setDeltaMovement(vector3d.x, d5 * 0.6D, vector3d.z);
          this.flyingSpeed = f;
          this.fallDistance = 0.0F;
-         this.setSharedFlag(7, false);
+         // CraftBukkit start
+         if (getSharedFlag(7) && !org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
+            this.setSharedFlag(7, false);
+         }
+         // CraftBukkit end
       } else {
          super.travel(p_213352_1_);
       }
@@ -1357,19 +_,19 @@
             int i = Math.round(MathHelper.sqrt(p_71000_1_ * p_71000_1_ + p_71000_3_ * p_71000_3_ + p_71000_5_ * p_71000_5_) * 100.0F);
             if (i > 0) {
                this.awardStat(Stats.SWIM_ONE_CM, i);
-               this.causeFoodExhaustion(0.01F * (float)i * 0.01F);
+               this.causeFoodExhaustion(level.spigotConfig.swimMultiplier * (float)i * 0.01F);
             }
          } else if (this.isEyeInFluid(FluidTags.WATER)) {
             int j = Math.round(MathHelper.sqrt(p_71000_1_ * p_71000_1_ + p_71000_3_ * p_71000_3_ + p_71000_5_ * p_71000_5_) * 100.0F);
             if (j > 0) {
                this.awardStat(Stats.WALK_UNDER_WATER_ONE_CM, j);
-               this.causeFoodExhaustion(0.01F * (float)j * 0.01F);
+               this.causeFoodExhaustion(level.spigotConfig.swimMultiplier * (float)j * 0.01F);
             }
          } else if (this.isInWater()) {
             int k = Math.round(MathHelper.sqrt(p_71000_1_ * p_71000_1_ + p_71000_5_ * p_71000_5_) * 100.0F);
             if (k > 0) {
                this.awardStat(Stats.WALK_ON_WATER_ONE_CM, k);
-               this.causeFoodExhaustion(0.01F * (float)k * 0.01F);
+               this.causeFoodExhaustion(level.spigotConfig.swimMultiplier * (float)k * 0.01F);
             }
          } else if (this.onClimbable()) {
             if (p_71000_3_ > 0.0D) {
@@ -1380,13 +_,13 @@
             if (l > 0) {
                if (this.isSprinting()) {
                   this.awardStat(Stats.SPRINT_ONE_CM, l);
-                  this.causeFoodExhaustion(0.1F * (float)l * 0.01F);
+                  this.causeFoodExhaustion(level.spigotConfig.sprintMultiplier * (float)l * 0.01F);
                } else if (this.isCrouching()) {
                   this.awardStat(Stats.CROUCH_ONE_CM, l);
-                  this.causeFoodExhaustion(0.0F * (float)l * 0.01F);
+                  this.causeFoodExhaustion(level.spigotConfig.otherMultiplier * (float)l * 0.01F);
                } else {
                   this.awardStat(Stats.WALK_ONE_CM, l);
-                  this.causeFoodExhaustion(0.0F * (float)l * 0.01F);
+                  this.causeFoodExhaustion(level.spigotConfig.otherMultiplier * (float)l * 0.01F);
                }
             }
          } else if (this.isFallFlying()) {
@@ -1425,6 +_,7 @@
 
    public boolean causeFallDamage(float p_225503_1_, float p_225503_2_) {
       if (this.abilities.mayfly) {
+         net.minecraftforge.event.ForgeEventFactory.onPlayerFall(this, p_225503_1_, p_225503_2_);
          return false;
       } else {
          if (p_225503_1_ >= 2.0F) {
@@ -1438,7 +_,7 @@
    public boolean tryToStartFallFlying() {
       if (!this.onGround && !this.isFallFlying() && !this.isInWater() && !this.hasEffect(Effects.LEVITATION)) {
          ItemStack itemstack = this.getItemBySlot(EquipmentSlotType.CHEST);
-         if (itemstack.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(itemstack)) {
+         if (itemstack.canElytraFly(this)) {
             this.startFallFlying();
             return true;
          }
@@ -1448,12 +_,24 @@
    }
 
    public void startFallFlying() {
-      this.setSharedFlag(7, true);
+      // CraftBukkit start
+      if (!org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory.callToggleGlideEvent(this, true).isCancelled()) {
+         this.setSharedFlag(7, true);
+      } else {
+         // SPIGOT-5542: must toggle like below
+         this.setSharedFlag(7, true);
+         this.setSharedFlag(7, false);
+      }
+      // CraftBukkit end
    }
 
    public void stopFallFlying() {
-      this.setSharedFlag(7, true);
-      this.setSharedFlag(7, false);
+      // CraftBukkit start
+      if (!org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
+         this.setSharedFlag(7, true);
+         this.setSharedFlag(7, false);
+      }
+      // CraftBukkit end
    }
 
    protected void doWaterSplashEffect() {
@@ -1479,6 +_,10 @@
    }
 
    public void giveExperiencePoints(int p_195068_1_) {
+      net.minecraftforge.event.entity.player.PlayerXpEvent.XpChange event = new net.minecraftforge.event.entity.player.PlayerXpEvent.XpChange(this, p_195068_1_);
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return;
+      p_195068_1_ = event.getAmount();
+
       this.increaseScore(p_195068_1_);
       this.experienceProgress += (float)p_195068_1_ / (float)this.getXpNeededForNextLevel();
       this.totalExperience = MathHelper.clamp(this.totalExperience + p_195068_1_, 0, Integer.MAX_VALUE);
@@ -1507,7 +_,7 @@
    }
 
    public void onEnchantmentPerformed(ItemStack p_192024_1_, int p_192024_2_) {
-      this.experienceLevel -= p_192024_2_;
+      giveExperienceLevels(-p_192024_2_);
       if (this.experienceLevel < 0) {
          this.experienceLevel = 0;
          this.experienceProgress = 0.0F;
@@ -1518,6 +_,10 @@
    }
 
    public void giveExperienceLevels(int p_82242_1_) {
+      net.minecraftforge.event.entity.player.PlayerXpEvent.LevelChange event = new net.minecraftforge.event.entity.player.PlayerXpEvent.LevelChange(this, p_82242_1_);
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return;
+      p_82242_1_ = event.getLevels();
+
       this.experienceLevel += p_82242_1_;
       if (this.experienceLevel < 0) {
          this.experienceLevel = 0;
@@ -1541,14 +_,26 @@
       }
    }
 
+   // CatServer start
+   public AtomicReference<EntityExhaustionEvent.ExhaustionReason> catserver$foodExhaustionReason = new AtomicReference<>(EntityExhaustionEvent.ExhaustionReason.UNKNOWN);
+
+   public void causeFoodExhaustion(float f, EntityExhaustionEvent.ExhaustionReason reason) {
+      this.catserver$foodExhaustionReason.set(reason);
+      this.causeFoodExhaustion(f);
+   }
+
    public void causeFoodExhaustion(float p_71020_1_) {
       if (!this.abilities.invulnerable) {
          if (!this.level.isClientSide) {
-            this.foodData.addExhaustion(p_71020_1_);
+            EntityExhaustionEvent.ExhaustionReason reason = this.catserver$foodExhaustionReason.getAndSet(EntityExhaustionEvent.ExhaustionReason.UNKNOWN); // CatServer
+            EntityExhaustionEvent event = CraftEventFactory.callPlayerExhaustionEvent(this, reason, p_71020_1_);
+            if (!event.isCancelled()) {
+               this.foodData.addExhaustion(event.getExhaustion()); // PAIL rename addExhaustion
+            }
          }
-
       }
    }
+   // CatServer end
 
    public FoodStats getFoodData() {
       return this.foodData;
@@ -1623,17 +_,22 @@
    }
 
    public void setItemSlot(EquipmentSlotType p_184201_1_, ItemStack p_184201_2_) {
-      if (p_184201_1_ == EquipmentSlotType.MAINHAND) {
-         this.playEquipSound(p_184201_2_);
-         this.inventory.items.set(this.inventory.selected, p_184201_2_);
-      } else if (p_184201_1_ == EquipmentSlotType.OFFHAND) {
-         this.playEquipSound(p_184201_2_);
-         this.inventory.offhand.set(0, p_184201_2_);
-      } else if (p_184201_1_.getType() == EquipmentSlotType.Group.ARMOR) {
-         this.playEquipSound(p_184201_2_);
-         this.inventory.armor.set(p_184201_1_.getIndex(), p_184201_2_);
-      }
+      // CraftBukkit start
+      this.setItemStackToSlot(p_184201_1_, p_184201_2_, false);
+   }
 
+   public void setItemStackToSlot(EquipmentSlotType slotIn, ItemStack stack, boolean silent) {
+      if (slotIn == EquipmentSlotType.MAINHAND) {
+         this.playEquipSound(stack, silent);
+         this.inventory.items.set(this.inventory.selected, stack);
+      } else if (slotIn == EquipmentSlotType.OFFHAND) {
+         this.playEquipSound(stack, silent);
+         this.inventory.offhand.set(0, stack);
+      } else if (slotIn.getType() == EquipmentSlotType.Group.ARMOR) {
+         this.playEquipSound(stack, silent);
+         this.inventory.armor.set(slotIn.getIndex(), stack);
+      }
+      // CraftBukkit end
    }
 
    public boolean addItem(ItemStack p_191521_1_) {
@@ -1679,16 +_,15 @@
 
    private void respawnEntityOnShoulder(CompoundNBT p_192026_1_) {
       if (!this.level.isClientSide && !p_192026_1_.isEmpty()) {
-         EntityType.create(p_192026_1_, this.level).ifPresent((p_226562_1_) -> {
+          EntityType.create(p_192026_1_, this.level).ifPresent((p_226562_1_) -> {
             if (p_226562_1_ instanceof TameableEntity) {
                ((TameableEntity)p_226562_1_).setOwnerUUID(this.uuid);
             }
 
             p_226562_1_.setPos(this.getX(), this.getY() + (double)0.7F, this.getZ());
-            ((ServerWorld)this.level).addWithUUID(p_226562_1_);
+            ((ServerWorld) this.level).addEntity(p_226562_1_, CreatureSpawnEvent.SpawnReason.SHOULDER_ENTITY); // CraftBukkit
          });
       }
-
    }
 
    public abstract boolean isSpectator();
@@ -1708,7 +_,11 @@
    }
 
    public ITextComponent getDisplayName() {
-      IFormattableTextComponent iformattabletextcomponent = ScorePlayerTeam.formatNameForTeam(this.getTeam(), this.getName());
+      if (this.displayname == null) this.displayname = net.minecraftforge.event.ForgeEventFactory.getPlayerDisplayName(this, this.getName());
+      IFormattableTextComponent iformattabletextcomponent = new StringTextComponent("");
+      iformattabletextcomponent = prefixes.stream().reduce(iformattabletextcomponent, IFormattableTextComponent::append);
+      iformattabletextcomponent = iformattabletextcomponent.append(ScorePlayerTeam.formatNameForTeam(this.getTeam(), this.displayname));
+      iformattabletextcomponent = suffixes.stream().reduce(iformattabletextcomponent, IFormattableTextComponent::append);
       return this.decorateDisplayNameComponent(iformattabletextcomponent);
    }
 
@@ -1720,7 +_,7 @@
    }
 
    public String getScoreboardName() {
-      return this.getGameProfile().getName();
+      return this.getGameProfile() != null ? this.getGameProfile().getName() : this.getUUID().toString();
    }
 
    public float getStandingEyeHeight(Pose p_213348_1_, EntitySize p_213348_2_) {
@@ -1841,7 +_,7 @@
       return this.entityData.get(DATA_SHOULDER_LEFT);
    }
 
-   protected void setShoulderEntityLeft(CompoundNBT p_192029_1_) {
+   public void setShoulderEntityLeft(CompoundNBT p_192029_1_) {
       this.entityData.set(DATA_SHOULDER_LEFT, p_192029_1_);
    }
 
@@ -1849,7 +_,7 @@
       return this.entityData.get(DATA_SHOULDER_RIGHT);
    }
 
-   protected void setShoulderEntityRight(CompoundNBT p_192031_1_) {
+   public void setShoulderEntityRight(CompoundNBT p_192031_1_) {
       this.entityData.set(DATA_SHOULDER_RIGHT, p_192031_1_);
    }
 
@@ -1986,5 +_,63 @@
       public ITextComponent getMessage() {
          return this.message;
       }
+   }
+
+   // =========== FORGE START ==============//
+   public Collection<IFormattableTextComponent> getPrefixes() {
+       return this.prefixes;
+   }
+
+   public Collection<IFormattableTextComponent> getSuffixes() {
+       return this.suffixes;
+   }
+
+   private ITextComponent displayname = null;
+   /**
+    * Force the displayed name to refresh, by firing {@link net.minecraftforge.event.entity.player.PlayerEvent.NameFormat}, using the real player name as event parameter.
+    */
+   public void refreshDisplayName() {
+      this.displayname = net.minecraftforge.event.ForgeEventFactory.getPlayerDisplayName(this, this.getName());
+   }
+
+   private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+         playerMainHandler = net.minecraftforge.common.util.LazyOptional.of(
+               () -> new net.minecraftforge.items.wrapper.PlayerMainInvWrapper(inventory));
+
+   private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+         playerEquipmentHandler = net.minecraftforge.common.util.LazyOptional.of(
+               () -> new net.minecraftforge.items.wrapper.CombinedInvWrapper(
+                     new net.minecraftforge.items.wrapper.PlayerArmorInvWrapper(inventory),
+                     new net.minecraftforge.items.wrapper.PlayerOffhandInvWrapper(inventory)));
+
+   private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+         playerJoinedHandler = net.minecraftforge.common.util.LazyOptional.of(
+               () -> new net.minecraftforge.items.wrapper.PlayerInvWrapper(inventory));
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (this.isAlive() && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
+         if (facing == null) return playerJoinedHandler.cast();
+         else if (facing.getAxis().isVertical()) return playerMainHandler.cast();
+         else if (facing.getAxis().isHorizontal()) return playerEquipmentHandler.cast();
+      }
+      return super.getCapability(capability, facing);
+   }
+
+   /**
+    * Force a pose for the player. If set, the vanilla pose determination and clearance check is skipped. Make sure the pose is clear yourself (e.g. in PlayerTick).
+    * This has to be set just once, do not set it every tick.
+    * Make sure to clear (null) the pose if not required anymore and only use if necessary.
+    */
+   public void setForcedPose(@Nullable Pose pose) {
+      this.forcedPose = pose;
+   }
+
+   /**
+    * @return The forced pose if set, null otherwise
+    */
+   @Nullable
+   public Pose getForcedPose() {
+      return this.forcedPose;
    }
 }
