--- a/net/minecraft/entity/player/ServerPlayerEntity.java
+++ b/net/minecraft/entity/player/ServerPlayerEntity.java
@@ -3,18 +_,18 @@
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Optional;
-import java.util.OptionalInt;
-import java.util.Random;
-import java.util.UUID;
+
+import java.lang.reflect.Array;
+import java.util.*;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.event.packet.PlayerChunkLoadEvent;
+import io.papermc.paper.event.packet.PlayerChunkUnloadEvent;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.advancements.PlayerAdvancements;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
+import net.minecraft.block.ChestBlock.DoubleInventory;
 import net.minecraft.block.HorizontalBlock;
 import net.minecraft.block.NetherPortalBlock;
 import net.minecraft.block.PortalInfo;
@@ -22,6 +_,7 @@
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
+import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.IAngerable;
 import net.minecraft.entity.LivingEntity;
@@ -49,41 +_,13 @@
 import net.minecraft.network.IPacket;
 import net.minecraft.network.play.ServerPlayNetHandler;
 import net.minecraft.network.play.client.CClientSettingsPacket;
-import net.minecraft.network.play.server.SAnimateHandPacket;
-import net.minecraft.network.play.server.SCameraPacket;
-import net.minecraft.network.play.server.SChangeGameStatePacket;
-import net.minecraft.network.play.server.SChatPacket;
-import net.minecraft.network.play.server.SCloseWindowPacket;
-import net.minecraft.network.play.server.SCombatPacket;
-import net.minecraft.network.play.server.SDestroyEntitiesPacket;
-import net.minecraft.network.play.server.SEntityStatusPacket;
-import net.minecraft.network.play.server.SMerchantOffersPacket;
-import net.minecraft.network.play.server.SOpenBookWindowPacket;
-import net.minecraft.network.play.server.SOpenHorseWindowPacket;
-import net.minecraft.network.play.server.SOpenSignMenuPacket;
-import net.minecraft.network.play.server.SOpenWindowPacket;
-import net.minecraft.network.play.server.SPlayEntityEffectPacket;
-import net.minecraft.network.play.server.SPlaySoundEffectPacket;
-import net.minecraft.network.play.server.SPlaySoundEventPacket;
-import net.minecraft.network.play.server.SPlayerAbilitiesPacket;
-import net.minecraft.network.play.server.SPlayerLookPacket;
-import net.minecraft.network.play.server.SRemoveEntityEffectPacket;
-import net.minecraft.network.play.server.SRespawnPacket;
-import net.minecraft.network.play.server.SSendResourcePackPacket;
-import net.minecraft.network.play.server.SServerDifficultyPacket;
-import net.minecraft.network.play.server.SSetExperiencePacket;
-import net.minecraft.network.play.server.SSetSlotPacket;
-import net.minecraft.network.play.server.SSpawnPlayerPacket;
-import net.minecraft.network.play.server.SUnloadChunkPacket;
-import net.minecraft.network.play.server.SUpdateHealthPacket;
-import net.minecraft.network.play.server.SUpdateTileEntityPacket;
-import net.minecraft.network.play.server.SWindowItemsPacket;
-import net.minecraft.network.play.server.SWindowPropertyPacket;
+import net.minecraft.network.play.server.*;
 import net.minecraft.potion.EffectInstance;
 import net.minecraft.potion.Effects;
 import net.minecraft.scoreboard.Score;
 import net.minecraft.scoreboard.ScoreCriteria;
 import net.minecraft.scoreboard.ScorePlayerTeam;
+import net.minecraft.scoreboard.Scoreboard;
 import net.minecraft.scoreboard.Team;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.PlayerInteractionManager;
@@ -94,10 +_,12 @@
 import net.minecraft.tileentity.CommandBlockTileEntity;
 import net.minecraft.tileentity.SignTileEntity;
 import net.minecraft.tileentity.TileEntity;
+import net.minecraft.util.CombatTracker;
 import net.minecraft.util.CooldownTracker;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.Direction;
 import net.minecraft.util.EntityDamageSource;
+import net.minecraft.util.FoodStats;
 import net.minecraft.util.Hand;
 import net.minecraft.util.HandSide;
 import net.minecraft.util.NonNullList;
@@ -122,21 +_,42 @@
 import net.minecraft.util.text.TranslationTextComponent;
 import net.minecraft.util.text.event.HoverEvent;
 import net.minecraft.util.text.filter.IChatFilter;
+import net.minecraft.world.DimensionType;
 import net.minecraft.world.GameRules;
 import net.minecraft.world.GameType;
 import net.minecraft.world.World;
 import net.minecraft.world.biome.BiomeManager;
 import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.storage.IWorldInfo;
+import net.minecraftforge.event.ForgeEventFactory;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.WeatherType;
+import org.bukkit.craftbukkit.v1_16_R3.CraftWorld;
+import org.bukkit.craftbukkit.v1_16_R3.entity.CraftPlayer;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftPortalEvent;
+import org.bukkit.craftbukkit.v1_16_R3.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.v1_16_R3.util.CraftChatMessage;
+import org.bukkit.event.entity.PlayerDeathEvent;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.event.player.PlayerBedLeaveEvent;
+import org.bukkit.event.player.PlayerChangedMainHandEvent;
+import org.bukkit.event.player.PlayerChangedWorldEvent;
+import org.bukkit.event.player.PlayerLocaleChangeEvent;
+import org.bukkit.event.player.PlayerPortalEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+import org.bukkit.inventory.MainHand;
 
 public class ServerPlayerEntity extends PlayerEntity implements IContainerListener {
    private static final Logger LOGGER = LogManager.getLogger();
    public ServerPlayNetHandler connection;
    public final MinecraftServer server;
    public final PlayerInteractionManager gameMode;
-   private final List<Integer> entitiesToRemove = Lists.newLinkedList();
+   public final List<Integer> entitiesToRemove = Lists.newLinkedList();
    private final PlayerAdvancements advancements;
    private final ServerStatisticsManager stats;
    private float lastRecordedHealthAndAbsorption = Float.MIN_VALUE;
@@ -148,8 +_,8 @@
    private float lastSentHealth = -1.0E8F;
    private int lastSentFood = -99999999;
    private boolean lastFoodSaturationZero = true;
-   private int lastSentExp = -99999999;
-   private int spawnInvulnerableTime = 60;
+   public int lastSentExp = -99999999;
+   public int spawnInvulnerableTime = 60;
    private ChatVisibility chatVisibility;
    private boolean canChatColor = true;
    private long lastActionTime = Util.getMillis();
@@ -175,6 +_,21 @@
    public int latency;
    public boolean wonGame;
 
+   // CraftBukkit start
+   public String displayName;
+   public ITextComponent listName;
+   public org.bukkit.Location compassTarget;
+   public int newExp = 0;
+   public int newLevel = 0;
+   public int newTotalExp = 0;
+   public boolean keepLevel = false;
+   public double maxHealthCache;
+   public boolean joining = true;
+   public boolean sentListPacket = false;
+   public Integer clientViewDistance;
+   // CraftBukkit end
+   private boolean initialized = false;
+
    public ServerPlayerEntity(MinecraftServer p_i45285_1_, ServerWorld p_i45285_2_, GameProfile p_i45285_3_, PlayerInteractionManager p_i45285_4_) {
       super(p_i45285_2_, p_i45285_2_.getSharedSpawnPos(), p_i45285_2_.getSharedSpawnAngle(), p_i45285_3_);
       p_i45285_4_.player = this;
@@ -185,7 +_,45 @@
       this.maxUpStep = 1.0F;
       this.fudgeSpawnLocation(p_i45285_2_);
       this.textFilter = p_i45285_1_.createTextFilterForPlayer(this);
-   }
+
+      // CraftBukkit start
+      this.displayName = this.getScoreboardName();
+      this.canPickUpLoot = true;
+      this.maxHealthCache = this.getMaxHealth();
+      this.initialized = true;
+   }
+
+   // Yes, this doesn't match Vanilla, but it's the best we can do for now.
+   // If this is an issue, PRs are welcome
+   public final BlockPos getSpawnPoint(ServerWorld worldserver) {
+      final BlockPos blockposition = worldserver.getSharedSpawnPos();
+      if (worldserver.dimensionType().hasSkyLight() && worldserver.getServerWorldInfo().getGameType() != GameType.ADVENTURE) {
+         int i = Math.max(0, this.server.getSpawnRadius(worldserver));
+         int j = MathHelper.floor(worldserver.getWorldBorder().getDistanceToBorder(blockposition.getX(), blockposition.getZ()));
+         if (j < i) {
+            i = j;
+         }
+         if (j <= 1) {
+            i = 1;
+         }
+         long k = (long) (i * 2 + 1);
+         long l = k * k;
+         int i1 = (l > 2147483647L) ? Integer.MAX_VALUE : (int) l;
+         int j1 = this.getCoprime(i1);
+         int k1 = new Random().nextInt(i1);
+         for (int l2 = 0; l2 < i1; ++l2) {
+            int i2 = (k1 + j1 * l2) % i1;
+            int j2 = i2 % (i * 2 + 1);
+            int k2 = i2 / (i * 2 + 1);
+            BlockPos blockposition1 = SpawnLocationHelper.getOverworldRespawnPos(worldserver, blockposition.getX() + j2 - i, blockposition.getZ() + k2 - i, false);
+            if (blockposition1 != null) {
+               return blockposition1;
+            }
+         }
+      }
+      return blockposition;
+   }
+   // CraftBukkit end
 
    private void fudgeSpawnLocation(ServerWorld p_205734_1_) {
       BlockPos blockpos = p_205734_1_.getSharedSpawnPos();
@@ -234,6 +_,7 @@
 
    public void readAdditionalSaveData(CompoundNBT p_70037_1_) {
       super.readAdditionalSaveData(p_70037_1_);
+      if (this.getY() > 300) this.setPosRaw(getX(), 257, getZ()); // Paper - bring down to a saner Y level if out of world
       if (p_70037_1_.contains("playerGameType", 99)) {
          if (this.getServer().getForceGameType()) {
             this.gameMode.setGameModeForPlayer(this.getServer().getDefaultGameType(), GameType.NOT_SET);
@@ -251,11 +_,20 @@
       if (p_70037_1_.contains("recipeBook", 10)) {
          this.recipeBook.fromNbt(p_70037_1_.getCompound("recipeBook"), this.server.getRecipeManager());
       }
+      this.getBukkitEntity().readExtraData(p_70037_1_); // CraftBukkit
 
       if (this.isSleeping()) {
          this.stopSleeping();
       }
 
+      // CraftBukkit start
+      String spawnWorld = p_70037_1_.getString("SpawnWorld");
+      CraftWorld oldWorld = (CraftWorld) Bukkit.getWorld(spawnWorld);
+      if (oldWorld != null) {
+         this.respawnDimension = oldWorld.getHandle().dimension();
+      }
+      // CraftBukkit end
+
       if (p_70037_1_.contains("SpawnX", 99) && p_70037_1_.contains("SpawnY", 99) && p_70037_1_.contains("SpawnZ", 99)) {
          this.respawnPosition = new BlockPos(p_70037_1_.getInt("SpawnX"), p_70037_1_.getInt("SpawnY"), p_70037_1_.getInt("SpawnZ"));
          this.respawnForced = p_70037_1_.getBoolean("SpawnForced");
@@ -282,7 +_,20 @@
 
       Entity entity1 = this.getRootVehicle();
       Entity entity = this.getVehicle();
-      if (entity != null && entity1 != this && entity1.hasOnePlayerPassenger()) {
+      // CraftBukkit start - handle non-persistent vehicles
+      boolean persistVehicle = true;
+      if (entity != null) {
+         Entity vehicle;
+         for (vehicle = entity; vehicle != null; vehicle = vehicle.getVehicle()) {
+            if (!vehicle.persist) {
+               persistVehicle = false;
+               break;
+            }
+         }
+      }
+
+      if (persistVehicle && entity != null && entity1 != this && entity1.hasOnePlayerPassenger()) {
+         // CraftBukkit end
          CompoundNBT compoundnbt1 = new CompoundNBT();
          CompoundNBT compoundnbt2 = new CompoundNBT();
          entity1.save(compoundnbt2);
@@ -303,8 +_,31 @@
             p_213281_1_.put("SpawnDimension", p_241148_1_);
          });
       }
+      this.getBukkitEntity().setExtraData(p_213281_1_); // CraftBukkit
+   }
 
+   // CraftBukkit start - World fallback code, either respawn location or global spawn
+   public void setLevel(World world) {
+      super.setLevel(world);
+      if (world == null) {
+         this.dead = false;
+         Vector3d position = null;
+         if (this.respawnDimension != null) {
+            world = this.getLevel().getCBServer().getHandle().getServer().getLevel(this.respawnDimension);
+            if (world != null && this.getRespawnPosition() != null) {
+               position = PlayerEntity.findRespawnPositionAndUseSpawnBlock((ServerWorld) world, this.getRespawnPosition(), this.getRespawnAngle(), false, false).orElse(null);
+            }
+         }
+         if (world == null || position == null) {
+            world = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
+            position = Vector3d.atCenterOf(((ServerWorld) world).getSharedSpawnPos());
+         }
+         this.level = world;
+         this.setPos(position.x(), position.y(), position.z());
+      }
+      this.gameMode.setLevel((ServerWorld) world);
    }
+   // CraftBukkit end
 
    public void setExperiencePoints(int p_195394_1_) {
       float f = (float)this.getXpNeededForNextLevel();
@@ -351,6 +_,11 @@
    }
 
    public void tick() {
+      // CraftBukkit start
+      if (this.joining) {
+         this.joining = false;
+      }
+      // CraftBukkit end
       this.gameMode.tick();
       --this.spawnInvulnerableTime;
       if (this.invulnerableTime > 0) {
@@ -415,7 +_,7 @@
          }
 
          if (this.getHealth() != this.lastSentHealth || this.lastSentFood != this.foodData.getFoodLevel() || this.foodData.getSaturationLevel() == 0.0F != this.lastFoodSaturationZero) {
-            this.connection.send(new SUpdateHealthPacket(this.getHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel()));
+            this.connection.send(new SUpdateHealthPacket(this.getBukkitEntity().getScaledHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel())); // CraftBukkit
             this.lastSentHealth = this.getHealth();
             this.lastSentFood = this.foodData.getFoodLevel();
             this.lastFoodSaturationZero = this.foodData.getSaturationLevel() == 0.0F;
@@ -446,6 +_,12 @@
             this.updateScoreForCriteria(ScoreCriteria.EXPERIENCE, MathHelper.ceil((float)this.lastRecordedExperience));
          }
 
+         // CraftBukkit start - Force max health updates
+         if (this.maxHealthCache != this.getMaxHealth()) {
+            this.getBukkitEntity().updateScaledHealth();
+         }
+         // CraftBukkit end
+
          if (this.experienceLevel != this.lastRecordedLevel) {
             this.lastRecordedLevel = this.experienceLevel;
             this.updateScoreForCriteria(ScoreCriteria.LEVEL, MathHelper.ceil((float)this.lastRecordedLevel));
@@ -460,6 +_,16 @@
             CriteriaTriggers.LOCATION.trigger(this);
          }
 
+         // CraftBukkit start - initialize oldLevel and fire PlayerLevelChangeEvent
+         if (this.oldLevel == -1) {
+            this.oldLevel = this.experienceLevel;
+         }
+         if (this.oldLevel != this.experienceLevel) {
+            CraftEventFactory.callPlayerLevelChangeEvent(this.level.getCBServer().getPlayer((ServerPlayerEntity) this), this.oldLevel, this.experienceLevel);
+            this.oldLevel = this.experienceLevel;
+         }
+         // CraftBukkit end
+
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking player");
          CrashReportCategory crashreportcategory = crashreport.addCategory("Player being ticked");
@@ -469,15 +_,59 @@
    }
 
    private void updateScoreForCriteria(ScoreCriteria p_184849_1_, int p_184849_2_) {
-      this.getScoreboard().forAllObjectives(p_184849_1_, this.getScoreboardName(), (p_195397_1_) -> {
+      // CraftBukkit - Use our scores instead
+      this.level.getCBServer().getScoreboardManager().getScoreboardScores(p_184849_1_, this.getScoreboardName(), (p_195397_1_) -> {
          p_195397_1_.setScore(p_184849_2_);
       });
    }
 
    public void die(DamageSource p_70645_1_) {
+      if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this, p_70645_1_)) return;
       boolean flag = this.level.getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
-      if (flag) {
-         ITextComponent itextcomponent = this.getCombatTracker().getDeathMessage();
+
+      if (this.dead) {
+         return;
+      }
+
+      int lootingLevel = net.minecraftforge.common.ForgeHooks.getLootingLevel(this, p_70645_1_.getEntity(), p_70645_1_);
+
+      java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<>(this.inventory.getContainerSize());
+      boolean keepInventory = this.level.getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) || this.isSpectator();
+
+      if (!keepInventory) {
+         for (ItemStack item : this.inventory.getContents()) {
+            if (!item.isEmpty() && !EnchantmentHelper.hasVanishingCurse(item)) {
+               loot.add(CraftItemStack.asCraftMirror(item));
+            }
+         }
+      }
+
+      captureDrops(new java.util.ArrayList<>());
+      dropFromLootTable(p_70645_1_, lastHurtByPlayerTime > 0);
+      for (ItemEntity captureDrop : captureDrops(null)) {
+         loot.add(CraftItemStack.asCraftMirror(captureDrop.getItem()));
+      }
+
+      ITextComponent defaultMessage = this.getCombatTracker().getDeathMessage();
+
+      String deathmessage = defaultMessage.getString();
+      PlayerDeathEvent event = CraftEventFactory.callPlayerDeathEvent(this, loot, deathmessage, keepInventory);
+
+      // SPIGOT-943 - only call if they have an inventory open
+      if (this.containerMenu != this.inventoryMenu) {
+         this.closeContainer();
+      }
+
+      String deathMessage = event.getDeathMessage();
+
+      if (deathMessage != null && deathMessage.length() > 0 && flag) { // TODO: allow plugins to override?
+         ITextComponent itextcomponent;
+         if (deathMessage.equals(deathmessage)) {
+            itextcomponent = this.getCombatTracker().getDeathMessage();
+         } else {
+            itextcomponent = org.bukkit.craftbukkit.v1_16_R3.util.CraftChatMessage.fromStringOrNull(deathMessage);
+         }
+
          this.connection.send(new SCombatPacket(this.getCombatTracker(), SCombatPacket.Event.ENTITY_DIED, itextcomponent), (p_212356_2_) -> {
             if (!p_212356_2_.isSuccess()) {
                int i = 256;
@@ -509,11 +_,30 @@
          this.tellNeutralMobsThatIDied();
       }
 
-      if (!this.isSpectator()) {
-         this.dropAllDeathLoot(p_70645_1_);
-      }
-
-      this.getScoreboard().forAllObjectives(ScoreCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
+      // SPIGOT-5478 must be called manually now
+      this.dropExperience();
+      // we clean the player's inventory after the EntityDeathEvent is called so plugins can get the exact state of the inventory.
+      if (!event.getKeepInventory()) {
+         this.inventory.clearContent();
+      }
+
+      if (!keepInventory || !event.getKeepInventory()) {
+         java.util.List<ItemEntity> drops = new java.util.ArrayList<>(event.getDrops().size());
+         for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
+            if (stack == null || stack.getType() == org.bukkit.Material.AIR) continue;
+
+            drops.add(new ItemEntity(this.level, this.getX(), this.getY(), this.getZ(), CraftItemStack.asNMSCopy(stack)));
+         }
+
+         if (!net.minecraftforge.common.ForgeHooks.onLivingDrops(this, p_70645_1_, drops, lootingLevel, lastHurtByPlayerTime > 0)) {
+            for (ItemEntity drop : drops) {
+               this.level.addFreshEntity(drop);
+            }
+         }
+      }
+
+      // CraftBukkit - Get our scores instead
+      this.level.getCBServer().getScoreboardManager().getScoreboardScores(ScoreCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
       LivingEntity livingentity = this.getKillCredit();
       if (livingentity != null) {
          this.awardStat(Stats.ENTITY_KILLED_BY.get(livingentity.getType()));
@@ -545,10 +_,12 @@
          this.increaseScore(p_191956_2_);
          String s = this.getScoreboardName();
          String s1 = p_191956_1_.getScoreboardName();
-         this.getScoreboard().forAllObjectives(ScoreCriteria.KILL_COUNT_ALL, s, Score::increment);
+         // CraftBukkit - Get our scores instead
+         this.level.getCBServer().getScoreboardManager().getScoreboardScores(ScoreCriteria.KILL_COUNT_ALL, s, Score::increment);
          if (p_191956_1_ instanceof PlayerEntity) {
             this.awardStat(Stats.PLAYER_KILLS);
-            this.getScoreboard().forAllObjectives(ScoreCriteria.KILL_COUNT_PLAYERS, s, Score::increment);
+            // CraftBukkit - Get our scores instead
+            this.level.getCBServer().getScoreboardManager().getScoreboardScores(ScoreCriteria.KILL_COUNT_PLAYERS, s, Score::increment);
          } else {
             this.awardStat(Stats.MOB_KILLS);
          }
@@ -564,7 +_,8 @@
       if (scoreplayerteam != null) {
          int i = scoreplayerteam.getColor().getId();
          if (i >= 0 && i < p_195398_3_.length) {
-            this.getScoreboard().forAllObjectives(p_195398_3_[i], p_195398_1_, Score::increment);
+            // CraftBukkit - Get our scores instead
+            this.level.getCBServer().getScoreboardManager().getScoreboardScores(p_195398_3_[i], p_195398_1_, Score::increment);
          }
       }
 
@@ -603,78 +_,128 @@
    }
 
    private boolean isPvpAllowed() {
-      return this.server.isPvpAllowed();
+      // CraftBukkit - this.server.isPVPEnabled() -> this.world.pvpMode
+      return this.level.pvpMode;
    }
 
    @Nullable
    protected PortalInfo findDimensionEntryPoint(ServerWorld p_241829_1_) {
       PortalInfo portalinfo = super.findDimensionEntryPoint(p_241829_1_);
-      if (portalinfo != null && this.level.dimension() == World.OVERWORLD && p_241829_1_.dimension() == World.END) {
+      p_241829_1_ = (portalinfo == null) ? p_241829_1_ : portalinfo.world; // CraftBukkit
+
+      if (portalinfo != null && this.level.getTypeKey() == DimensionType.OVERWORLD_LOCATION && p_241829_1_ != null && p_241829_1_.getTypeKey() == DimensionType.END_LOCATION) { // CraftBukkit
          Vector3d vector3d = portalinfo.pos.add(0.0D, -1.0D, 0.0D);
-         return new PortalInfo(vector3d, Vector3d.ZERO, 90.0F, 0.0F);
+         return new PortalInfo(vector3d, Vector3d.ZERO, 90.0F, 0.0F).putCB(p_241829_1_, portalinfo.portalEventInfo); // CatServer
       } else {
          return portalinfo;
       }
    }
 
    @Nullable
-   public Entity changeDimension(ServerWorld p_241206_1_) {
+   public Entity changeDimension(ServerWorld p_241206_1_, net.minecraftforge.common.util.ITeleporter teleporter) {
+      // CraftBukkit - start
+      return changeDimension(p_241206_1_, teleporter, TeleportCause.UNKNOWN);
+   }
+
+   @Nullable
+   public Entity changeDimension(ServerWorld server, net.minecraftforge.common.util.ITeleporter teleporter, PlayerTeleportEvent.TeleportCause cause) {
+      // CraftBukkit end
+      if (!net.minecraftforge.common.ForgeHooks.onTravelToDimension(this, server.dimension())) {
+         return null;
+      }
+      if (this.isSleeping()) {
+         return this; // CraftBukkit - SPIGOT-3154
+      }
+      PortalInfo portalinfo = teleporter.getPortalInfo(this, server, this::findDimensionEntryPoint);
+      if (portalinfo == null)
+         return null;
+      // CraftBukkit - start
+      Location enter = this.getBukkitEntity().getLocation();
+      Location exit = (server == null) ? null : new Location(server.getWorld(), portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z, portalinfo.yRot, portalinfo.xRot);
+      final PlayerTeleportEvent tpEvent = new PlayerTeleportEvent(this.getBukkitEntity(), enter, exit, cause);
+      Bukkit.getServer().getPluginManager().callEvent(tpEvent);
+      if (tpEvent.isCancelled() || tpEvent.getTo() == null) {
+         return null;
+      }
+      // CraftBukkit end
       this.isChangingDimension = true;
       ServerWorld serverworld = this.getLevel();
       RegistryKey<World> registrykey = serverworld.dimension();
-      if (registrykey == World.END && p_241206_1_.dimension() == World.OVERWORLD) {
+      if (registrykey == World.END && server.dimension() == World.OVERWORLD && teleporter.isVanilla()) { //Forge: Fix non-vanilla teleporters triggering end credits
          this.unRide();
-         this.getLevel().removePlayerImmediately(this);
+         this.getLevel().removePlayer(this, true); //Forge: The player entity is cloned so keep the data until after cloning calls copyFrom
          if (!this.wonGame) {
             this.wonGame = true;
             this.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.WIN_GAME, this.seenCredits ? 0.0F : 1.0F));
             this.seenCredits = true;
          }
-
          return this;
       } else {
-         IWorldInfo iworldinfo = p_241206_1_.getLevelData();
-         this.connection.send(new SRespawnPacket(p_241206_1_.dimensionType(), p_241206_1_.dimension(), BiomeManager.obfuscateSeed(p_241206_1_.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), p_241206_1_.isDebug(), p_241206_1_.isFlat(), true));
+         IWorldInfo iworldinfo = server.getLevelData();
+         this.connection.send(new SRespawnPacket(server.dimensionType(), server.dimension(), BiomeManager.obfuscateSeed(server.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), server.isDebug(), server.isFlat(), true));
          this.connection.send(new SServerDifficultyPacket(iworldinfo.getDifficulty(), iworldinfo.isDifficultyLocked()));
          PlayerList playerlist = this.server.getPlayerList();
          playerlist.sendPlayerPermissionLevel(this);
-         serverworld.removePlayerImmediately(this);
-         this.removed = false;
-         PortalInfo portalinfo = this.findDimensionEntryPoint(p_241206_1_);
+         serverworld.removeEntity(this, true); //Forge: the player entity is moved to the new world, NOT cloned. So keep the data alive with no matching invalidate call.
+         this.revive();
          if (portalinfo != null) {
+            Entity e = teleporter.placeEntity(this, serverworld, server, this.yRot, spawnPortal -> {//Forge: Start vanilla logic
             serverworld.getProfiler().push("moving");
-            if (registrykey == World.OVERWORLD && p_241206_1_.dimension() == World.NETHER) {
+            if (registrykey == World.OVERWORLD && server.dimension() == World.NETHER) {
                this.enteredNetherPosition = this.position();
-            } else if (p_241206_1_.dimension() == World.END) {
-               this.createEndPlatform(p_241206_1_, new BlockPos(portalinfo.pos));
+            } else if (spawnPortal && server.dimension() == World.END) {
+               this.createEndPlatform(server, new BlockPos(portalinfo.pos));
             }
-
-            serverworld.getProfiler().pop();
-            serverworld.getProfiler().push("placing");
-            this.setLevel(p_241206_1_);
-            p_241206_1_.addDuringPortalTeleport(this);
-            this.setRot(portalinfo.yRot, portalinfo.xRot);
-            this.moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z);
-            serverworld.getProfiler().pop();
-            this.triggerDimensionChangeTriggers(serverworld);
-            this.gameMode.setLevel(p_241206_1_);
+               serverworld.getProfiler().pop();
+               serverworld.getProfiler().push("placing");
+               this.setLevel(server);
+               server.addDuringPortalTeleport(this);
+               this.setRot(portalinfo.yRot, portalinfo.xRot);
+               this.moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z);
+               serverworld.getProfiler().pop();
+               this.triggerDimensionChangeTriggers(serverworld);
+               return this;//forge: this is part of the ITeleporter patch
+            });//Forge: End vanilla logic
+            if (e != this) throw new java.lang.IllegalArgumentException(String.format("Teleporter %s returned not the player entity but instead %s, expected PlayerEntity %s", teleporter, e, this));
+            this.gameMode.setLevel(server);
             this.connection.send(new SPlayerAbilitiesPacket(this.abilities));
-            playerlist.sendLevelInfo(this, p_241206_1_);
+            playerlist.sendLevelInfo(this, server);
             playerlist.sendAllPlayerInfo(this);
 
-            for(EffectInstance effectinstance : this.getActiveEffects()) {
+            for (EffectInstance effectinstance : this.getActiveEffects()) {
                this.connection.send(new SPlayEntityEffectPacket(this.getId(), effectinstance));
             }
 
+            if (teleporter.playTeleportSound(this, serverworld, server))
             this.connection.send(new SPlaySoundEventPacket(1032, BlockPos.ZERO, 0, false));
             this.lastSentExp = -1;
             this.lastSentHealth = -1.0F;
             this.lastSentFood = -1;
+            setShiftKeyDown(false); // Paper - fix MC-10657
+            net.minecraftforge.fml.hooks.BasicEventHooks.firePlayerChangedDimensionEvent(this, registrykey, server.dimension());
+            // CraftBukkit start
+            PlayerChangedWorldEvent changeEvent = new PlayerChangedWorldEvent(this.getBukkitEntity(), serverworld.getWorld());
+            this.level.getCBServer().getPluginManager().callEvent(changeEvent);
+            // CraftBukkit end
          }
 
          return this;
       }
    }
+
+   // CraftBukkit start
+   @Override
+   protected CraftPortalEvent callPortalEvent(Entity entity, ServerWorld exitWorldServer, BlockPos exitPosition, TeleportCause cause, int searchRadius, int creationRadius) {
+      Location enter = this.getBukkitEntity().getLocation();
+      Location exit = new Location(exitWorldServer.getWorld(), exitPosition.getX(), exitPosition.getY(), exitPosition.getZ(), yRot, xRot);
+      PlayerPortalEvent event = new PlayerPortalEvent(this.getBukkitEntity(), enter, exit, cause, searchRadius, true, creationRadius);
+      Bukkit.getServer().getPluginManager().callEvent(event);
+      if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null) {
+         return null;
+      }
+      return new CraftPortalEvent(event);
+   }
+   // CraftBukkit end
 
    private void createEndPlatform(ServerWorld p_242110_1_, BlockPos p_242110_2_) {
       BlockPos.Mutable blockpos$mutable = p_242110_2_.mutable();
@@ -690,22 +_,22 @@
 
    }
 
-   protected Optional<TeleportationRepositioner.Result> getExitPortal(ServerWorld p_241830_1_, BlockPos p_241830_2_, boolean p_241830_3_) {
-      Optional<TeleportationRepositioner.Result> optional = super.getExitPortal(p_241830_1_, p_241830_2_, p_241830_3_);
+   protected Optional<TeleportationRepositioner.Result> getExitPortal(ServerWorld p_241830_1_, BlockPos p_241830_2_, boolean p_241830_3_, int radius, boolean canCreatePortal, int createRadius) { // CraftBukkit
+      Optional<TeleportationRepositioner.Result> optional = super.getExitPortal(p_241830_1_, p_241830_2_, p_241830_3_, radius, canCreatePortal, createRadius); // CraftBukkit
       if (optional.isPresent()) {
          return optional;
       } else {
          Direction.Axis direction$axis = this.level.getBlockState(this.portalEntrancePos).getOptionalValue(NetherPortalBlock.AXIS).orElse(Direction.Axis.X);
          Optional<TeleportationRepositioner.Result> optional1 = p_241830_1_.getPortalForcer().createPortal(p_241830_2_, direction$axis);
          if (!optional1.isPresent()) {
-            LOGGER.error("Unable to create a portal, likely target out of worldborder");
+            //LOGGER.error("Unable to create a portal, likely target out of worldborder");
          }
 
          return optional1;
       }
    }
 
-   private void triggerDimensionChangeTriggers(ServerWorld p_213846_1_) {
+   public void triggerDimensionChangeTriggers(ServerWorld p_213846_1_) { // private->public CraftBukkit
       RegistryKey<World> registrykey = p_213846_1_.dimension();
       RegistryKey<World> registrykey1 = this.level.dimension();
       CriteriaTriggers.CHANGED_DIMENSION.trigger(this, registrykey, registrykey1);
@@ -742,43 +_,94 @@
       this.containerMenu.broadcastChanges();
    }
 
-   public Either<PlayerEntity.SleepResult, Unit> startSleepInBed(BlockPos p_213819_1_) {
-      Direction direction = this.level.getBlockState(p_213819_1_).getValue(HorizontalBlock.FACING);
+   // CraftBukkit start - moved bed result checks from below into separate method
+   public Either<PlayerEntity.SleepResult, Unit> getBedResult(BlockPos at, Direction direction) {
+      java.util.Optional<BlockPos> optAt = java.util.Optional.of(at);
+      PlayerEntity.SleepResult ret = net.minecraftforge.event.ForgeEventFactory.onPlayerSleepInBed(this, optAt);
+      if (ret != null) {
+         return Either.left(ret);
+      }
       if (!this.isSleeping() && this.isAlive()) {
          if (!this.level.dimensionType().natural()) {
             return Either.left(PlayerEntity.SleepResult.NOT_POSSIBLE_HERE);
-         } else if (!this.bedInRange(p_213819_1_, direction)) {
+         } else if (!this.bedInRange(at, direction)) {
             return Either.left(PlayerEntity.SleepResult.TOO_FAR_AWAY);
-         } else if (this.bedBlocked(p_213819_1_, direction)) {
+         } else if (this.bedBlocked(at, direction)) {
             return Either.left(PlayerEntity.SleepResult.OBSTRUCTED);
          } else {
-            this.setRespawnPosition(this.level.dimension(), p_213819_1_, this.yRot, false, true);
-            if (this.level.isDay()) {
+            this.setRespawnPosition(this.level.dimension(), at, this.yRot, false, true);
+            if (!net.minecraftforge.event.ForgeEventFactory.fireSleepingTimeCheck(this, optAt)) {
                return Either.left(PlayerEntity.SleepResult.NOT_POSSIBLE_NOW);
             } else {
                if (!this.isCreative()) {
                   double d0 = 8.0D;
                   double d1 = 5.0D;
-                  Vector3d vector3d = Vector3d.atBottomCenterOf(p_213819_1_);
-                  List<MonsterEntity> list = this.level.getEntitiesOfClass(MonsterEntity.class, new AxisAlignedBB(vector3d.x() - 8.0D, vector3d.y() - 5.0D, vector3d.z() - 8.0D, vector3d.x() + 8.0D, vector3d.y() + 5.0D, vector3d.z() + 8.0D), (p_241146_1_) -> {
-                     return p_241146_1_.isPreventingPlayerRest(this);
-                  });
+                  Vector3d vector3d = Vector3d.atBottomCenterOf(at);
+                  List<MonsterEntity> list = this.level.getEntitiesOfClass(MonsterEntity.class,
+                      new AxisAlignedBB(vector3d.x() - 8.0D, vector3d.y() - 5.0D, vector3d.z() - 8.0D, vector3d.x() + 8.0D, vector3d.y() + 5.0D, vector3d.z() + 8.0D),
+                      (p_241146_1_) -> {
+                         return p_241146_1_.isPreventingPlayerRest(this);
+                      });
                   if (!list.isEmpty()) {
                      return Either.left(PlayerEntity.SleepResult.NOT_SAFE);
                   }
                }
 
-               Either<PlayerEntity.SleepResult, Unit> either = super.startSleepInBed(p_213819_1_).ifRight((p_241144_1_) -> {
+                   //          Either<PlayerEntity.SleepResult, Unit> either = super.trySleep(at).ifRight((p_241144_1_) -> {
+               return Either.right(Unit.INSTANCE);
+            }
+         }
+      } else {
+         return Either.left(PlayerEntity.SleepResult.OTHER_PROBLEM);
+      }
+   }
+
+   @SuppressWarnings("unused")
+   public Either<PlayerEntity.SleepResult, Unit> startSleepInBed(BlockPos p_213819_1_) {
+      Optional<?> optAt = null;
+      PlayerEntity.SleepResult ret = null;
+      Direction direction = null;
+      double d0 = 0;
+      double d1 = 0;
+      Vector3d vector3d = Vector3d.atBottomCenterOf(p_213819_1_);
+      List<MonsterEntity> list = this.level.getEntitiesOfClass(
+         MonsterEntity.class,
+         new AxisAlignedBB(vector3d.x() - 8.0D, vector3d.y() - 5.0D, vector3d.z() - 8.0D, vector3d.x() + 8.0D, vector3d.y() + 5.0D, vector3d.z() + 8.0D),
+         (p_241146_1_) -> {
+            return p_241146_1_.isPreventingPlayerRest(this);
+         }
+      );
+      return this.sleep(p_213819_1_, false);
+   }
+
+   @Override
+   public Either<PlayerEntity.SleepResult, Unit> sleep(BlockPos blockposition, boolean force) {
+      Direction enumdirection = (Direction) this.level.getBlockState(blockposition).getValue(HorizontalBlock.FACING);
+      Either<PlayerEntity.SleepResult, Unit> bedResult = this.getBedResult(blockposition, enumdirection);
+      if (bedResult.left().orElse(null) == PlayerEntity.SleepResult.OTHER_PROBLEM) {
+         return bedResult; // return immediately if the result is not bypassable by plugins
+      }
+      if (force) {
+         bedResult = Either.right(Unit.INSTANCE);
+      }
+      bedResult = org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory.callPlayerBedEnterEvent(this, blockposition, bedResult);
+      if (bedResult.left().isPresent()) {
+         return bedResult;
+      }
+      {
+         {
+            {
+               Either<PlayerEntity.SleepResult, Unit> either = super.sleep(blockposition, force).ifRight((unit) -> {
                   this.awardStat(Stats.SLEEP_IN_BED);
                   CriteriaTriggers.SLEPT_IN_BED.trigger(this);
                });
-               ((ServerWorld)this.level).updateSleepingPlayerList();
+               ((ServerWorld) this.level).updateSleepingPlayerList();
                return either;
             }
          }
-      } else {
-         return Either.left(PlayerEntity.SleepResult.OTHER_PROBLEM);
+
       }
+      // CraftBukkit end
    }
 
    public void startSleeping(BlockPos p_213342_1_) {
@@ -787,6 +_,7 @@
    }
 
    private boolean bedInRange(BlockPos p_241147_1_, Direction p_241147_2_) {
+      if (p_241147_2_ == null) return false;
       return this.isReachableBedBlock(p_241147_1_) || this.isReachableBedBlock(p_241147_1_.relative(p_241147_2_.getOpposite()));
    }
 
@@ -801,6 +_,24 @@
    }
 
    public void stopSleepInBed(boolean p_225652_1_, boolean p_225652_2_) {
+      if (!this.isSleeping()) return; // CraftBukkit - Can't leave bed if not in one!
+      // CraftBukkit start - fire PlayerBedLeaveEvent
+      CraftPlayer player = this.getBukkitEntity();
+      BlockPos bedPosition = this.getSleepingPos().orElse(null);
+
+      org.bukkit.block.Block bed;
+      if (bedPosition != null) {
+         bed = this.level.getWorld().getBlockAt(bedPosition.getX(), bedPosition.getY(), bedPosition.getZ());
+      } else {
+         bed = this.level.getWorld().getBlockAt(player.getLocation());
+      }
+
+      PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed, true);
+      this.level.getCBServer().getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return;
+      }
+      // CraftBukkit end
       if (this.isSleeping()) {
          this.getLevel().getChunkSource().broadcastAndSend(this, new SAnimateHandPacket(this, 2));
       }
@@ -859,6 +_,7 @@
 
    public void openTextEdit(SignTileEntity p_175141_1_) {
       p_175141_1_.setAllowedPlayerEditor(this);
+      if (this.connection == null) return;
       this.connection.send(new SOpenSignMenuPacket(p_175141_1_.getBlockPos()));
    }
 
@@ -866,6 +_,13 @@
       this.containerCounter = this.containerCounter % 100 + 1;
    }
 
+   // CraftBukkit start
+   public int nextContainerCounterCB() {
+      nextContainerCounter();
+      return containerCounter;
+   }
+   // CraftBukkit end
+
    public OptionalInt openMenu(@Nullable INamedContainerProvider p_213829_1_) {
       if (p_213829_1_ == null) {
          return OptionalInt.empty();
@@ -876,16 +_,37 @@
 
          this.nextContainerCounter();
          Container container = p_213829_1_.createMenu(this.containerCounter, this.inventory, this);
+         // CraftBukkit start - Inventory open hook
+         if (container != null) {
+            container.setTitle(p_213829_1_.getDisplayName());
+
+            boolean cancelled = false;
+            container = CraftEventFactory.callInventoryOpenEvent(this, container, cancelled);
+            if (container == null && !cancelled) { // Let pre-cancelled events fall through
+               // SPIGOT-5263 - close chest if cancelled
+               if (p_213829_1_ instanceof IInventory) {
+                  ((IInventory) p_213829_1_).stopOpen(this);
+               } else if (p_213829_1_ instanceof DoubleInventory) {
+                  // SPIGOT-5355 - double chests too :(
+                  ((DoubleInventory) p_213829_1_).inventorylargechest.stopOpen(this);
+               }
+               return OptionalInt.empty();
+            }
+         }
+         // CraftBukkit end
          if (container == null) {
             if (this.isSpectator()) {
                this.displayClientMessage((new TranslationTextComponent("container.spectatorCantOpen")).withStyle(TextFormatting.RED), true);
             }
 
             return OptionalInt.empty();
-         } else {
-            this.connection.send(new SOpenWindowPacket(container.containerId, container.getType(), p_213829_1_.getDisplayName()));
-            container.addSlotListener(this);
+         }  else {
+            // CraftBukkit start
             this.containerMenu = container;
+            this.connection.send(new SOpenWindowPacket(container.containerId, container.getType(), container.getTitle()));
+            // CraftBukkit end
+            container.addSlotListener(this);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.player.PlayerContainerEvent.Open(this, this.containerMenu));
             return OptionalInt.of(this.containerCounter);
          }
       }
@@ -896,14 +_,26 @@
    }
 
    public void openHorseInventory(AbstractHorseEntity p_184826_1_, IInventory p_184826_2_) {
-      if (this.containerMenu != this.inventoryMenu) {
-         this.closeContainer();
-      }
-
+      // CraftBukkit start - Inventory open hook
       this.nextContainerCounter();
+      Container container = new HorseInventoryContainer(this.containerCounter, this.inventory, p_184826_2_, p_184826_1_);
+      container.setTitle(p_184826_1_.getDisplayName());
+      container = CraftEventFactory.callInventoryOpenEvent(this, container);
+      if (container == null) {
+         p_184826_2_.stopOpen(this);
+         return;
+      }
+      // CraftBukkit end
+
+      if (this.containerMenu != this.inventoryMenu) {
+         this.closeContainer();
+      }
+
+      // this.getNextWindowId(); // CraftBukkit - Moved up
       this.connection.send(new SOpenHorseWindowPacket(this.containerCounter, p_184826_2_.getContainerSize(), p_184826_1_.getId()));
-      this.containerMenu = new HorseInventoryContainer(this.containerCounter, this.inventory, p_184826_2_, p_184826_1_);
+      this.containerMenu = container; // CraftBukkit
       this.containerMenu.addSlotListener(this);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.player.PlayerContainerEvent.Open(this, this.containerMenu));
    }
 
    public void openItemGui(ItemStack p_184814_1_, Hand p_184814_2_) {
@@ -940,8 +_,14 @@
    }
 
    public void refreshContainer(Container p_71110_1_, NonNullList<ItemStack> p_71110_2_) {
+      if (this.connection == null) return;
       this.connection.send(new SWindowItemsPacket(p_71110_1_.containerId, p_71110_2_));
       this.connection.send(new SSetSlotPacket(-1, -1, this.inventory.getCarried()));
+      // CraftBukkit start - Send a Set Slot to update the crafting result slot
+      if (java.util.EnumSet.of(InventoryType.CRAFTING, InventoryType.WORKBENCH).contains(inventoryMenu.getBukkitView().getType())) {
+         this.connection.send(new SSetSlotPacket(inventoryMenu.containerId, 0, inventoryMenu.getSlot(0).getItem()));
+      }
+      // CraftBukkit end
    }
 
    public void setContainerData(Container p_71112_1_, int p_71112_2_, int p_71112_3_) {
@@ -949,6 +_,7 @@
    }
 
    public void closeContainer() {
+      CraftEventFactory.handleInventoryCloseEvent(this); // CraftBukkit
       this.connection.send(new SCloseWindowPacket(this.containerMenu.containerId));
       this.doCloseContainer();
    }
@@ -961,6 +_,7 @@
 
    public void doCloseContainer() {
       this.containerMenu.removed(this);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.player.PlayerContainerEvent.Close(this, this.containerMenu));
       this.containerMenu = this.inventoryMenu;
    }
 
@@ -982,14 +_,14 @@
 
    public void awardStat(Stat<?> p_71064_1_, int p_71064_2_) {
       this.stats.increment(this, p_71064_1_, p_71064_2_);
-      this.getScoreboard().forAllObjectives(p_71064_1_, this.getScoreboardName(), (p_195396_1_) -> {
+      this.level.getCBServer().getScoreboardManager().getScoreboardScores(p_71064_1_, this.getScoreboardName(), (p_195396_1_) -> {  // CraftBukkit - Get our scores instead
          p_195396_1_.add(p_71064_2_);
       });
    }
 
    public void resetStat(Stat<?> p_175145_1_) {
       this.stats.setValue(this, p_175145_1_, 0);
-      this.getScoreboard().forAllObjectives(p_175145_1_, this.getScoreboardName(), Score::reset);
+      this.level.getCBServer().getScoreboardManager().getScoreboardScores(p_175145_1_, this.getScoreboardName(), Score::reset); // CraftBukkit - Get our scores instead
    }
 
    public int awardRecipes(Collection<IRecipe<?>> p_195065_1_) {
@@ -1030,7 +_,16 @@
 
    public void resetSentInfo() {
       this.lastSentHealth = -1.0E8F;
-   }
+      this.lastSentExp = -1; // CraftBukkit - Added to reset
+   }
+
+   // CraftBukkit start - Support multi-line messages
+   public void sendMessage(UUID uuid, ITextComponent[] ichatbasecomponent) {
+      for (ITextComponent component : ichatbasecomponent) {
+         this.sendMessage(component, (uuid == null) ? Util.NIL_UUID : uuid);
+      }
+   }
+   // CraftBukkit end
 
    public void displayClientMessage(ITextComponent p_146105_1_, boolean p_146105_2_) {
       this.connection.send(new SChatPacket(p_146105_1_, p_146105_2_ ? ChatType.GAME_INFO : ChatType.CHAT, Util.NIL_UUID));
@@ -1072,6 +_,25 @@
          this.experienceProgress = p_193104_1_.experienceProgress;
          this.setScore(p_193104_1_.getScore());
       }
+      // CatServer start
+      else {
+         this.inventory.replaceWith(p_193104_1_.inventory);
+
+         if (p_193104_1_.keepLevel) {
+            this.newLevel = p_193104_1_.experienceLevel;
+            this.newTotalExp = p_193104_1_.totalExperience;
+         }
+
+         this.experienceLevel = this.newLevel;
+         this.totalExperience = this.newTotalExp;
+
+         if (p_193104_1_.keepLevel) {
+            this.experienceProgress = p_193104_1_.experienceProgress;
+         } else {
+            this.giveExperienceLevels(p_193104_1_.newExp);
+         }
+      }
+      // CatServer end
 
       this.enchantmentSeed = p_193104_1_.enchantmentSeed;
       this.enderChestInventory = p_193104_1_.enderChestInventory;
@@ -1079,12 +_,19 @@
       this.lastSentExp = -1;
       this.lastSentHealth = -1.0F;
       this.lastSentFood = -1;
-      this.recipeBook.copyOverData(p_193104_1_.recipeBook);
+      this.recipeBook.copyOverData(p_193104_1_.recipeBook); // LoliServer - Keep forge logic
       this.entitiesToRemove.addAll(p_193104_1_.entitiesToRemove);
       this.seenCredits = p_193104_1_.seenCredits;
       this.enteredNetherPosition = p_193104_1_.enteredNetherPosition;
       this.setShoulderEntityLeft(p_193104_1_.getShoulderEntityLeft());
       this.setShoulderEntityRight(p_193104_1_.getShoulderEntityRight());
+
+      //Copy over a section of the Entity Data from the old player.
+      //Allows mods to specify data that persists after players respawn.
+      CompoundNBT old = p_193104_1_.getPersistentData();
+      if (old.contains(PERSISTED_NBT_TAG))
+          getPersistentData().put(PERSISTED_NBT_TAG, old.get(PERSISTED_NBT_TAG));
+      net.minecraftforge.event.ForgeEventFactory.onPlayerClone(this, p_193104_1_, !p_193104_2_);
    }
 
    protected void onEffectAdded(EffectInstance p_70670_1_) {
@@ -1143,6 +_,8 @@
    }
 
    public void setGameMode(GameType p_71033_1_) {
+      if (!net.minecraftforge.common.ForgeHooks.onChangeGameMode(this, this.gameMode.getGameModeForPlayer(), p_71033_1_)) return;
+
       this.gameMode.setGameModeForPlayer(p_71033_1_);
       this.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.CHANGE_GAME_MODE, (float)p_71033_1_.getId()));
       if (p_71033_1_ == GameType.SPECTATOR) {
@@ -1187,10 +_,22 @@
    }
 
    public void updateOptions(CClientSettingsPacket p_147100_1_) {
+      // CraftBukkit start
+      if (getMainArm() != p_147100_1_.getMainHand()) {
+         PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(getBukkitEntity(), getMainArm() == HandSide.LEFT ? MainHand.LEFT : MainHand.RIGHT);
+         this.server.server.getPluginManager().callEvent(event);
+      }
+      if (!this.language.equals(p_147100_1_.language)) {
+         PlayerLocaleChangeEvent event = new PlayerLocaleChangeEvent(getBukkitEntity(), p_147100_1_.language);
+         this.server.server.getPluginManager().callEvent(event);
+      }
+      this.clientViewDistance = p_147100_1_.viewDistance;
+      // CraftBukkit end
       this.chatVisibility = p_147100_1_.getChatVisibility();
       this.canChatColor = p_147100_1_.getChatColors();
       this.getEntityData().set(DATA_PLAYER_MODE_CUSTOMISATION, (byte)p_147100_1_.getModelCustomisation());
       this.getEntityData().set(DATA_PLAYER_MAIN_HAND, (byte)(p_147100_1_.getMainHand() == HandSide.LEFT ? 0 : 1));
+      this.language = p_147100_1_.getLanguage();
    }
 
    public ChatVisibility getChatVisibility() {
@@ -1249,7 +_,7 @@
       this.camera = (Entity)(p_175399_1_ == null ? this : p_175399_1_);
       if (entity != this.camera) {
          this.connection.send(new SCameraPacket(this.camera));
-         this.teleportTo(this.camera.getX(), this.camera.getY(), this.camera.getZ());
+         this.connection.teleport(this.camera.getX(), this.camera.getY(), this.camera.getZ(), this.yRot, this.xRot, TeleportCause.SPECTATE); // CraftBukkit
       }
 
    }
@@ -1276,7 +_,7 @@
 
    @Nullable
    public ITextComponent getTabListDisplayName() {
-      return null;
+      return listName; // CraftBukkit
    }
 
    public void swing(Hand p_184609_1_) {
@@ -1296,19 +_,20 @@
       return this.advancements;
    }
 
+
    public void teleportTo(ServerWorld p_200619_1_, double p_200619_2_, double p_200619_4_, double p_200619_6_, float p_200619_8_, float p_200619_9_) {
       this.setCamera(this);
       this.stopRiding();
       if (p_200619_1_ == this.level) {
          this.connection.teleport(p_200619_2_, p_200619_4_, p_200619_6_, p_200619_8_, p_200619_9_);
-      } else {
+      } else if (net.minecraftforge.common.ForgeHooks.onTravelToDimension(this, p_200619_1_.dimension())) {
          ServerWorld serverworld = this.getLevel();
          IWorldInfo iworldinfo = p_200619_1_.getLevelData();
          this.connection.send(new SRespawnPacket(p_200619_1_.dimensionType(), p_200619_1_.dimension(), BiomeManager.obfuscateSeed(p_200619_1_.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), p_200619_1_.isDebug(), p_200619_1_.isFlat(), true));
          this.connection.send(new SServerDifficultyPacket(iworldinfo.getDifficulty(), iworldinfo.isDifficultyLocked()));
          this.server.getPlayerList().sendPlayerPermissionLevel(this);
-         serverworld.removePlayerImmediately(this);
-         this.removed = false;
+         serverworld.removePlayer(this, true); //Forge: The player entity itself is moved, and not cloned. So we need to keep the data alive with no matching invalidate call later.
+         this.revive();
          this.moveTo(p_200619_2_, p_200619_4_, p_200619_6_, p_200619_8_, p_200619_9_);
          this.setLevel(p_200619_1_);
          p_200619_1_.addDuringCommandTeleport(this);
@@ -1317,6 +_,7 @@
          this.gameMode.setLevel(p_200619_1_);
          this.server.getPlayerList().sendLevelInfo(this, p_200619_1_);
          this.server.getPlayerList().sendAllPlayerInfo(this);
+         net.minecraftforge.fml.hooks.BasicEventHooks.firePlayerChangedDimensionEvent(this, serverworld.dimension(), p_200619_1_.dimension());
       }
 
    }
@@ -1339,6 +_,7 @@
    }
 
    public void setRespawnPosition(RegistryKey<World> p_242111_1_, @Nullable BlockPos p_242111_2_, float p_242111_3_, boolean p_242111_4_, boolean p_242111_5_) {
+      if (net.minecraftforge.event.ForgeEventFactory.onPlayerSpawnSet(this, p_242111_2_ == null ? World.OVERWORLD : p_242111_1_, p_242111_2_, p_242111_4_)) return;
       if (p_242111_2_ != null) {
          boolean flag = p_242111_2_.equals(this.respawnPosition) && p_242111_1_.equals(this.respawnDimension);
          if (p_242111_5_ && !flag) {
@@ -1361,11 +_,29 @@
    public void trackChunk(ChunkPos p_213844_1_, IPacket<?> p_213844_2_, IPacket<?> p_213844_3_) {
       this.connection.send(p_213844_3_);
       this.connection.send(p_213844_2_);
+      // Paper start
+      if (PlayerChunkLoadEvent.getHandlerList().getRegisteredListeners().length > 0) {
+         PlayerChunkLoadEvent event = new PlayerChunkLoadEvent(
+                 this.getBukkitEntity().getWorld().getChunkAt(p_213844_1_.x, p_213844_1_.z),
+                 this.getBukkitEntity()
+         );
+         Bukkit.getServer().getPluginManager().callEvent(event);
+      }
+      // Paper end
    }
 
    public void untrackChunk(ChunkPos p_213845_1_) {
       if (this.isAlive()) {
          this.connection.send(new SUnloadChunkPacket(p_213845_1_.x, p_213845_1_.z));
+         // Paper start
+         if (PlayerChunkUnloadEvent.getHandlerList().getRegisteredListeners().length > 0) {
+            PlayerChunkUnloadEvent event = new PlayerChunkUnloadEvent(
+                    this.getBukkitEntity().getWorld().getChunkAt(p_213845_1_.x, p_213845_1_.z),
+                    this.getBukkitEntity()
+            );
+            Bukkit.getServer().getPluginManager().callEvent(event);
+         }
+         // Paper end
       }
 
    }
@@ -1391,6 +_,8 @@
       if (itementity == null) {
          return null;
       } else {
+         if (captureDrops() != null) captureDrops().add(itementity);
+         else
          this.level.addFreshEntity(itementity);
          ItemStack itemstack = itementity.getItem();
          if (p_146097_3_) {
@@ -1405,8 +_,156 @@
       }
    }
 
+   public String language = "en_us"; // private->public CraftBukkit
+   /**
+    * Returns the language last reported by the player as their local language.
+    * Defaults to en_us if the value is unknown.
+    */
+   public String getLanguage() {
+      return this.language;
+   }
+
+   // We need this as tablistDisplayname may be null even if the the event was fired.
+   private boolean hasTabListName = false;
+   private ITextComponent tabListDisplayName = null;
+   /**
+    * Force the name displayed in the tab list to refresh, by firing {@link net.minecraftforge.event.entity.player.PlayerEvent.TabListNameFormat}.
+    */
+   public void refreshTabListName(){
+      ITextComponent oldName = this.tabListDisplayName;
+      this.tabListDisplayName = ForgeEventFactory.getPlayerTabListDisplayName(this);
+      if (!Objects.equals(oldName, this.tabListDisplayName))
+      {
+         this.getServer().getPlayerList().broadcastAll(new SPlayerListItemPacket(SPlayerListItemPacket.Action.UPDATE_DISPLAY_NAME, this));
+      }
+   }
+
    @Nullable
    public IChatFilter getTextFilter() {
       return this.textFilter;
+   }
+
+   // CraftBukkit start - Add per-player time and weather.
+   public long timeOffset = 0;
+   public boolean relativeTime = true;
+   public long getPlayerTime() {
+      if (this.relativeTime) {
+         // Adds timeOffset to the current server time.
+         return this.level.getDayTime() + this.timeOffset;
+      } else {
+         // Adds timeOffset to the beginning of this day.
+         return this.level.getDayTime() - (this.level.getDayTime() % 24000) + this.timeOffset;
+      }
+   }
+   public WeatherType weather = null;
+   public WeatherType getPlayerWeather() {
+      return this.weather;
+   }
+   public void setPlayerWeather(WeatherType type, boolean plugin) {
+      if (!plugin && this.weather != null) {
+         return;
+      }
+      if (plugin) {
+         this.weather = type;
+      }
+      // Fixed SPIGOT-5849: Constantly Raining in World 1.16
+      if (type == WeatherType.DOWNFALL) {
+         this.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.STOP_RAINING, 0));
+      } else {
+         this.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.START_RAINING, 0));
+      }
+   }
+   private float pluginRainPosition;
+   private float pluginRainPositionPrevious;
+   public void updateWeather(float oldRain, float newRain, float oldThunder, float newThunder) {
+      if (this.weather == null) {
+         // Vanilla
+         if (oldRain != newRain) {
+            this.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.RAIN_LEVEL_CHANGE, newRain));
+         }
+      } else {
+         // Plugin
+         if (pluginRainPositionPrevious != pluginRainPosition) {
+            this.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.RAIN_LEVEL_CHANGE, pluginRainPosition));
+         }
+      }
+      if (oldThunder != newThunder) {
+         if (weather == WeatherType.DOWNFALL || weather == null) {
+            this.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.THUNDER_LEVEL_CHANGE, newThunder));
+         } else {
+            this.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.THUNDER_LEVEL_CHANGE, 0));
+         }
+      }
+   }
+   public void tickWeather() {
+      if (this.weather == null) return;
+      pluginRainPositionPrevious = pluginRainPosition;
+      if (weather == WeatherType.DOWNFALL) {
+         pluginRainPosition += 0.01;
+      } else {
+         pluginRainPosition -= 0.01;
+      }
+      pluginRainPosition = MathHelper.clamp(pluginRainPosition, 0.0F, 1.0F);
+   }
+   public void resetPlayerWeather() {
+      this.weather = null;
+      this.setPlayerWeather(this.level.getLevelData().isRaining() ? WeatherType.DOWNFALL : WeatherType.CLEAR, false);
+   }
+   @Override
+   public String toString() {
+      return super.toString() + "(" + this.getName() + " at " + this.getX() + "," + this.getY() + "," + this.getZ() + ")";
+   }
+   // SPIGOT-1903, MC-98153
+   public void forceSetPositionRotation(double x, double y, double z, float yaw, float pitch) {
+      this.moveTo(x, y, z, yaw, pitch);
+      this.connection.resetPosition();
+   }
+   @Override
+   public boolean isImmobile() {
+      return super.isImmobile() || !getBukkitEntity().isOnline();
+   }
+   @Override
+   public Scoreboard getScoreboard() {
+      return getBukkitEntity().getScoreboard().getHandle();
+   }
+   public void reset() {
+      float exp = 0;
+      boolean keepInventory = this.level.getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY);
+      if (this.keepLevel || keepInventory) {
+         exp = this.experienceProgress;
+         this.newTotalExp = this.totalExperience;
+         this.newLevel = this.experienceLevel;
+      }
+      this.setHealth(this.getMaxHealth());
+      this.remainingFireTicks = 0;
+      this.fallDistance = 0;
+      this.foodData = new FoodStats(this);
+      this.experienceLevel = this.newLevel;
+      this.totalExperience = this.newTotalExp;
+      this.experienceProgress = 0;
+      this.deathTime = 0;
+      this.setArrowCountInEntity(0, true);
+      this.clearActivePotions(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.DEATH);
+      this.effectsDirty = true;
+      this.containerMenu = this.inventoryMenu;
+      this.lastHurtByPlayer = null;
+      this.lastHurtByMob = null;
+      this.combatTracker = new CombatTracker(this);
+      this.lastSentExp = -1;
+      if (this.keepLevel || keepInventory) {
+         this.experienceProgress = exp;
+      } else {
+         this.giveExperienceLevels(this.newExp);
+      }
+      this.keepLevel = false;
+   }
+   @Override
+   public CraftPlayer getBukkitEntity() {
+      return (CraftPlayer) super.getBukkitEntity();
+   }
+   // CraftBukkit end
+
+   public boolean initialized() {
+      return this.initialized;
    }
 }
