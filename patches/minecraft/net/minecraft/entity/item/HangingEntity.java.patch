--- a/net/minecraft/entity/item/HangingEntity.java
+++ b/net/minecraft/entity/item/HangingEntity.java
@@ -4,6 +_,7 @@
 import javax.annotation.Nullable;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.RedstoneDiodeBlock;
+import net.minecraft.block.material.Material;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.MoverType;
@@ -13,6 +_,7 @@
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.Direction;
+import net.minecraft.util.IndirectEntityDamageSource;
 import net.minecraft.util.Mirror;
 import net.minecraft.util.Rotation;
 import net.minecraft.util.math.AxisAlignedBB;
@@ -22,13 +_,16 @@
 import net.minecraft.world.World;
 import net.minecraft.world.server.ServerWorld;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.entity.Hanging;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.event.hanging.HangingBreakEvent;
 
 public abstract class HangingEntity extends Entity {
    protected static final Predicate<Entity> HANGING_ENTITY = (p_210144_0_) -> {
       return p_210144_0_ instanceof HangingEntity;
    };
    private int checkInterval;
-   protected BlockPos pos;
+   public BlockPos pos; // protected->public CraftBukkit
    protected Direction direction = Direction.SOUTH;
 
    protected HangingEntity(EntityType<? extends HangingEntity> p_i48561_1_, World p_i48561_2_) {
@@ -43,7 +_,7 @@
    protected void defineSynchedData() {
    }
 
-   protected void setDirection(Direction p_174859_1_) {
+   public void setDirection(Direction p_174859_1_) { // protected->public CraftBukkit
       Validate.notNull(p_174859_1_);
       Validate.isTrue(p_174859_1_.getAxis().isHorizontal());
       this.direction = p_174859_1_;
@@ -54,23 +_,34 @@
 
    protected void recalculateBoundingBox() {
       if (this.direction != null) {
-         double d0 = (double)this.pos.getX() + 0.5D;
-         double d1 = (double)this.pos.getY() + 0.5D;
-         double d2 = (double)this.pos.getZ() + 0.5D;
+         // CraftBukkit start code moved in to calculateBoundingBox
+         this.setBoundingBox(calculateBoundingBox(this, this.pos, this.direction, this.getWidth(), this.getHeight()));
+         // CraftBukkit ebd
+      }
+   }
+
+   public static AxisAlignedBB calculateBoundingBox(@Nullable Entity entity, BlockPos blockPosition, Direction direction, int width, int height) {
+      double d0 = (double) blockPosition.getX() + 0.5D;
+      double d1 = (double) blockPosition.getY() + 0.5D;
+      double d2 = (double) blockPosition.getZ() + 0.5D;
          double d3 = 0.46875D;
-         double d4 = this.offs(this.getWidth());
-         double d5 = this.offs(this.getHeight());
-         d0 = d0 - (double)this.direction.getStepX() * 0.46875D;
-         d2 = d2 - (double)this.direction.getStepZ() * 0.46875D;
+      double d4 = offs(width);
+      double d5 = offs(height);
+      d0 = d0 - (double) direction.getStepX() * 0.46875D;
+      d2 = d2 - (double) direction.getStepZ() * 0.46875D;
          d1 = d1 + d5;
-         Direction direction = this.direction.getCounterClockWise();
-         d0 = d0 + d4 * (double)direction.getStepX();
-         d2 = d2 + d4 * (double)direction.getStepZ();
-         this.setPosRaw(d0, d1, d2);
-         double d6 = (double)this.getWidth();
-         double d7 = (double)this.getHeight();
-         double d8 = (double)this.getWidth();
-         if (this.direction.getAxis() == Direction.Axis.Z) {
+      Direction direction1 = direction.getCounterClockWise();
+      d0 = d0 + d4 * (double) direction1.getStepX();
+      d2 = d2 + d4 * (double) direction1.getStepZ();
+
+      if (entity != null) {
+         entity.setPosRaw(d0, d1, d2);
+      }
+      double d6 = (double) width;
+      double d7 = (double) height;
+      double d8 = (double) width;
+
+      if (direction.getAxis() == Direction.Axis.Z) {
             d8 = 1.0D;
          } else {
             d6 = 1.0D;
@@ -79,11 +_,11 @@
          d6 = d6 / 32.0D;
          d7 = d7 / 32.0D;
          d8 = d8 / 32.0D;
-         this.setBoundingBox(new AxisAlignedBB(d0 - d6, d1 - d7, d2 - d8, d0 + d6, d1 + d7, d2 + d8));
+         return new AxisAlignedBB(d0 - d6, d1 - d7, d2 - d8, d0 + d6, d1 + d7, d2 + d8);
       }
-   }
+   // CraftBukkit end
 
-   private double offs(int p_190202_1_) {
+   private static double offs(int p_190202_1_) { // CraftBukkit - static
       return p_190202_1_ % 32 == 0 ? 0.5D : 0.0D;
    }
 
@@ -93,15 +_,29 @@
             this.outOfWorld();
          }
 
-         if (this.checkInterval++ == 100) {
+         if (this.checkInterval++ == this.level.spigotConfig.hangingTickFrequency) { // Spigot
             this.checkInterval = 0;
             if (!this.removed && !this.survives()) {
+               // CraftBukkit start - fire break events
+               Material material = this.level.getBlockState(new BlockPos(this)).getMaterial();
+               HangingBreakEvent.RemoveCause cause;
+               if (!material.equals(Material.AIR)) {
+                  // TODO: This feels insufficient to catch 100% of suffocation cases
+                  cause = HangingBreakEvent.RemoveCause.OBSTRUCTION;
+               } else {
+                  cause = HangingBreakEvent.RemoveCause.PHYSICS;
+               }
+               HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), cause);
+               this.level.getCBServer().getPluginManager().callEvent(event);
+               if (removed || event.isCancelled()) {
+                  return;
+               }
+               // CraftBukkit end
                this.remove();
-               this.dropItem((Entity)null);
+               this.dropItem((Entity) null);
             }
          }
       }
-
    }
 
    public boolean survives() {
@@ -120,6 +_,8 @@
                int j1 = (j - 1) / -2;
                blockpos$mutable.set(blockpos).move(direction, k + i1).move(Direction.UP, l + j1);
                BlockState blockstate = this.level.getBlockState(blockpos$mutable);
+               if (net.minecraft.block.Block.canSupportCenter(this.level, blockpos$mutable, this.direction))
+                  continue;
                if (!blockstate.getMaterial().isSolid() && !RedstoneDiodeBlock.isDiode(blockstate)) {
                   return false;
                }
@@ -152,6 +_,19 @@
          return false;
       } else {
          if (!this.removed && !this.level.isClientSide) {
+            // CraftBukkit start - fire break events
+            Entity damager = (p_70097_1_ instanceof IndirectEntityDamageSource) ? ((IndirectEntityDamageSource) p_70097_1_).getProximateDamageSource() : p_70097_1_.getEntity();
+            HangingBreakEvent event;
+            if (damager != null) {
+               event = new HangingBreakByEntityEvent((Hanging) this.getBukkitEntity(), damager.getBukkitEntity(), p_70097_1_.isExplosion() ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.ENTITY);
+            } else {
+               event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), p_70097_1_.isExplosion() ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.DEFAULT);
+            }
+            this.level.getCBServer().getPluginManager().callEvent(event);
+            if (this.removed || event.isCancelled()) {
+               return true;
+            }
+            // CraftBukkit end
             this.remove();
             this.markHurt();
             this.dropItem(p_70097_1_.getEntity());
@@ -163,6 +_,17 @@
 
    public void move(MoverType p_213315_1_, Vector3d p_213315_2_) {
       if (!this.level.isClientSide && !this.removed && p_213315_2_.lengthSqr() > 0.0D) {
+         if (this.removed) return; // CraftBukkit
+
+         // CraftBukkit start - fire break events
+         // TODO - Does this need its own cause? Seems to only be triggered by pistons
+         HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.PHYSICS);
+         this.level.getCBServer().getPluginManager().callEvent(event);
+         if (this.removed || event.isCancelled()) {
+            return;
+         }
+         // CraftBukkit end
+
          this.remove();
          this.dropItem((Entity)null);
       }
@@ -170,7 +_,7 @@
    }
 
    public void push(double p_70024_1_, double p_70024_3_, double p_70024_5_) {
-      if (!this.level.isClientSide && !this.removed && p_70024_1_ * p_70024_1_ + p_70024_3_ * p_70024_3_ + p_70024_5_ * p_70024_5_ > 0.0D) {
+      if (false && !this.level.isClientSide && !this.removed && p_70024_1_ * p_70024_1_ + p_70024_3_ * p_70024_3_ + p_70024_5_ * p_70024_5_ > 0.0D) { // Craftbukkit - not needed
          this.remove();
          this.dropItem((Entity)null);
       }
@@ -178,6 +_,7 @@
    }
 
    public void addAdditionalSaveData(CompoundNBT p_213281_1_) {
+      p_213281_1_.putByte("Facing", (byte)this.direction.get2DDataValue());
       BlockPos blockpos = this.getPos();
       p_213281_1_.putInt("TileX", blockpos.getX());
       p_213281_1_.putInt("TileY", blockpos.getY());
@@ -186,6 +_,7 @@
 
    public void readAdditionalSaveData(CompoundNBT p_70037_1_) {
       this.pos = new BlockPos(p_70037_1_.getInt("TileX"), p_70037_1_.getInt("TileY"), p_70037_1_.getInt("TileZ"));
+      this.direction = Direction.from2DDataValue(p_70037_1_.getByte("Facing"));
    }
 
    public abstract int getWidth();
