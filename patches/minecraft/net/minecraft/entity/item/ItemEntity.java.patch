--- a/net/minecraft/entity/item/ItemEntity.java
+++ b/net/minecraft/entity/item/ItemEntity.java
@@ -16,6 +_,7 @@
 import net.minecraft.network.datasync.DataSerializers;
 import net.minecraft.network.datasync.EntityDataManager;
 import net.minecraft.network.play.server.SSpawnObjectPacket;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.DamageSource;
@@ -29,15 +_,23 @@
 import net.minecraft.world.server.ServerWorld;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityPickupItemEvent;
+import org.bukkit.event.player.PlayerPickupItemEvent;
 
 public class ItemEntity extends Entity {
    private static final DataParameter<ItemStack> DATA_ITEM = EntityDataManager.defineId(ItemEntity.class, DataSerializers.ITEM_STACK);
-   private int age;
-   private int pickupDelay;
+   public int age;
+   public int pickupDelay;
    private int health = 5;
    private UUID thrower;
    private UUID owner;
    public final float bobOffs;
+   /**
+    * The maximum age of this EntityItem.  The item is expired once this is reached.
+    */
+   public int lifespan = 6000;
+   private int lastTick = MinecraftServer.currentTick - 1; // CraftBukkit
 
    public ItemEntity(EntityType<? extends ItemEntity> p_i50217_1_, World p_i50217_2_) {
       super(p_i50217_1_, p_i50217_2_);
@@ -54,6 +_,7 @@
    public ItemEntity(World p_i1710_1_, double p_i1710_2_, double p_i1710_4_, double p_i1710_6_, ItemStack p_i1710_8_) {
       this(p_i1710_1_, p_i1710_2_, p_i1710_4_, p_i1710_6_);
       this.setItem(p_i1710_8_);
+      this.lifespan = (p_i1710_8_.getItem() == null ? 6000 : p_i1710_8_.getEntityLifespan(p_i1710_1_));
    }
 
    @OnlyIn(Dist.CLIENT)
@@ -74,13 +_,17 @@
    }
 
    public void tick() {
+      if (getItem().onEntityItemUpdate(this)) return;
       if (this.getItem().isEmpty()) {
          this.remove();
       } else {
          super.tick();
-         if (this.pickupDelay > 0 && this.pickupDelay != 32767) {
-            --this.pickupDelay;
-         }
+         // CraftBukkit start - Use wall time for pickup and despawn timers
+         int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+         if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
+         if (this.age != -32768) this.age += elapsedTicks;
+         this.lastTick = MinecraftServer.currentTick;
+         // CraftBukkit end
 
          this.xo = this.getX();
          this.yo = this.getY();
@@ -104,11 +_,11 @@
             }
          }
 
-         if (!this.onGround || getHorizontalDistanceSqr(this.getDeltaMovement()) > (double)1.0E-5F || (this.tickCount + this.getId()) % 4 == 0) {
+         if (!this.onGround || getHorizontalDistanceSqr(this.getDeltaMovement()) > (double)1.0E-5F || this.tickCount % 4 == 0) { // Paper - Ensure checking item movement is always offset from Spigot's entity activation range check
             this.move(MoverType.SELF, this.getDeltaMovement());
             float f1 = 0.98F;
             if (this.onGround) {
-               f1 = this.level.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0D, this.getZ())).getBlock().getFriction() * 0.98F;
+               f1 = this.level.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0D, this.getZ())).getSlipperiness(level, new BlockPos(this.getX(), getY() - 1.0D, getZ()), this) * 0.98F;
             }
 
             this.setDeltaMovement(this.getDeltaMovement().multiply((double)f1, 0.98D, (double)f1));
@@ -132,9 +_,11 @@
             }
          }
 
+         /* CraftBukkit start - moved up
          if (this.age != -32768) {
             ++this.age;
          }
+         // CraftBukkit end */
 
          this.hasImpulse |= this.updateInWaterStateAndDoFluidPushing();
          if (!this.level.isClientSide) {
@@ -144,12 +_,46 @@
             }
          }
 
-         if (!this.level.isClientSide && this.age >= 6000) {
+         ItemStack item = this.getItem();
+         if (!this.level.isClientSide && this.age >= level.spigotConfig.itemDespawnRate) { // Spigot
+            // CraftBukkit start - fire ItemDespawnEvent
+            if (CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
+               this.age = 0;
+               return;
+            }
+            // CraftBukkit end
+             int hook = net.minecraftforge.event.ForgeEventFactory.onItemExpire(this, item);
+             if (hook < 0) this.remove();
+             else          this.lifespan += hook;
+         }
+
+         if (item.isEmpty()) {
             this.remove();
          }
 
       }
    }
+
+   // Spigot start - copied from above
+   @Override
+   public void inactiveTick() {
+      // CraftBukkit start - Use wall time for pickup and despawn timers
+      int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+      if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
+      if (this.age != -32768) this.age += elapsedTicks;
+      this.lastTick = MinecraftServer.currentTick;
+      // CraftBukkit end
+      if (!this.level.isClientSide && this.age >= level.spigotConfig.itemDespawnRate) { // Spigot
+         // CraftBukkit start - fire ItemDespawnEvent
+         if (org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
+            this.age = 0;
+            return;
+         }
+         // CraftBukkit end
+         this.remove();
+      }
+   }
+   // Spigot end
 
    private void setUnderwaterMovement() {
       Vector3d vector3d = this.getDeltaMovement();
@@ -161,9 +_,32 @@
       this.setDeltaMovement(vector3d.x * (double)0.95F, vector3d.y + (double)(vector3d.y < (double)0.06F ? 5.0E-4F : 0.0F), vector3d.z * (double)0.95F);
    }
 
+   private static final double[] vanillaMergeRadius = new double[]{ 0.5D };
+   private void mergeWithNeighbours(){
+      if (this.isMergable()){
+         double pehkuiRadius = 0.5D;
+         // Spigot start
+         double radius = pehkuiRadius == vanillaMergeRadius[0] ? level.spigotConfig.itemMerge : pehkuiRadius;
+         for(ItemEntity itementity : this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(radius, radius, radius), (p_213859_1_) -> {
+            return p_213859_1_ != this && p_213859_1_.isMergable();
+         })){
+            if (itementity.isMergable()){
+               this.tryToMerge(itementity);
+               if (this.removed){
+                  break;
+               }
+            }
+         }
+      }
+   }
+
+   /*
    private void mergeWithNeighbours() {
       if (this.isMergable()) {
-         for(ItemEntity itementity : this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(0.5D, 0.0D, 0.5D), (p_213859_1_) -> {
+         // Spigot start
+         double radius = level.spigotConfig.itemMerge;
+         for(ItemEntity itementity : this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(radius, radius, radius), (p_213859_1_) -> {
+            // Spigot end
             return p_213859_1_ != this && p_213859_1_.isMergable();
          })) {
             if (itementity.isMergable()) {
@@ -176,6 +_,7 @@
 
       }
    }
+    -- LoliServer # Backup mergeWithNeighbours() */
 
    private boolean isMergable() {
       ItemStack itemstack = this.getItem();
@@ -202,6 +_,8 @@
          return false;
       } else if (p_226532_1_.hasTag() ^ p_226532_0_.hasTag()) {
          return false;
+      } else if (!p_226532_0_.areCapsCompatible(p_226532_1_)) {
+         return false;
       } else {
          return !p_226532_1_.hasTag() || p_226532_1_.getTag().equals(p_226532_0_.getTag());
       }
@@ -217,10 +_,11 @@
 
    private static void merge(ItemEntity p_226531_0_, ItemStack p_226531_1_, ItemStack p_226531_2_) {
       ItemStack itemstack = merge(p_226531_1_, p_226531_2_, 64);
-      p_226531_0_.setItem(itemstack);
+      if (!itemstack.isEmpty()) p_226531_0_.setItem(itemstack); // CraftBukkit - don't set empty stacks
    }
 
    private static void merge(ItemEntity p_213858_0_, ItemStack p_213858_1_, ItemEntity p_213858_2_, ItemStack p_213858_3_) {
+      if (CraftEventFactory.callItemMergeEvent(p_213858_2_, p_213858_0_).isCancelled()) return; // CraftBukkit
       merge(p_213858_0_, p_213858_1_, p_213858_3_);
       p_213858_0_.pickupDelay = Math.max(p_213858_0_.pickupDelay, p_213858_2_.pickupDelay);
       p_213858_0_.age = Math.min(p_213858_0_.age, p_213858_2_.age);
@@ -235,6 +_,7 @@
    }
 
    public boolean hurt(DamageSource p_70097_1_, float p_70097_2_) {
+      if (this.level.isClientSide || this.removed) return false; //Forge: Fixes MC-53850
       if (this.isInvulnerableTo(p_70097_1_)) {
          return false;
       } else if (!this.getItem().isEmpty() && this.getItem().getItem() == Items.NETHER_STAR && p_70097_1_.isExplosion()) {
@@ -242,6 +_,11 @@
       } else if (!this.getItem().getItem().canBeHurtBy(p_70097_1_)) {
          return false;
       } else {
+         // CraftBukkit start
+         if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, p_70097_1_, p_70097_2_)) {
+            return false;
+         }
+         // CraftBukkit end
          this.markHurt();
          this.health = (int)((float)this.health - p_70097_2_);
          if (this.health <= 0) {
@@ -256,6 +_,7 @@
       p_213281_1_.putShort("Health", (short)this.health);
       p_213281_1_.putShort("Age", (short)this.age);
       p_213281_1_.putShort("PickupDelay", (short)this.pickupDelay);
+      p_213281_1_.putInt("Lifespan", lifespan);
       if (this.getThrower() != null) {
          p_213281_1_.putUUID("Thrower", this.getThrower());
       }
@@ -276,6 +_,7 @@
       if (p_70037_1_.contains("PickupDelay")) {
          this.pickupDelay = p_70037_1_.getShort("PickupDelay");
       }
+      if (p_70037_1_.contains("Lifespan")) lifespan = p_70037_1_.getInt("Lifespan");
 
       if (p_70037_1_.hasUUID("Owner")) {
          this.owner = p_70037_1_.getUUID("Owner");
@@ -295,10 +_,53 @@
 
    public void playerTouch(PlayerEntity p_70100_1_) {
       if (!this.level.isClientSide) {
+         if (this.pickupDelay > 0) return;
          ItemStack itemstack = this.getItem();
          Item item = itemstack.getItem();
          int i = itemstack.getCount();
-         if (this.pickupDelay == 0 && (this.owner == null || this.owner.equals(p_70100_1_.getUUID())) && p_70100_1_.inventory.add(itemstack)) {
+
+         // CraftBukkit start - fire PlayerPickupItemEvent
+         int canHold = p_70100_1_.inventory.canHold(itemstack);
+         int remaining = i - canHold;
+         if (this.pickupDelay <= 0 && canHold > 0) {
+            itemstack.setCount(canHold);
+            PlayerPickupItemEvent playerEvent = new PlayerPickupItemEvent((org.bukkit.entity.Player)p_70100_1_.getBukkitEntity(), (org.bukkit.entity.Item)this.getBukkitEntity(), remaining);
+            playerEvent.setCancelled(!p_70100_1_.canPickUpLoot);
+            this.level.getCBServer().getPluginManager().callEvent(playerEvent);
+            if (playerEvent.isCancelled()) {
+               itemstack.setCount(i);
+               return;
+            }
+            EntityPickupItemEvent entityEvent = new EntityPickupItemEvent(p_70100_1_.getBukkitEntity(), (org.bukkit.entity.Item)this.getBukkitEntity(), remaining);
+            entityEvent.setCancelled(!p_70100_1_.canPickUpLoot);
+            this.level.getCBServer().getPluginManager().callEvent(entityEvent);
+            if (entityEvent.isCancelled()) {
+               itemstack.setCount(i);
+               return;
+            }
+
+            // Update the ItemStack if it was changed in the event
+            ItemStack current = this.getItem();
+            if (!itemstack.equals(current)) {
+               itemstack = current;
+            } else {
+               itemstack.setCount(canHold + remaining); // = i
+            }
+
+            this.pickupDelay = 0;
+         }
+         else if (this.pickupDelay == 0) {
+            this.pickupDelay = -1;
+         }
+         // CraftBukkit end
+
+         int hook = net.minecraftforge.event.ForgeEventFactory.onItemPickup(this, p_70100_1_);
+         if (hook < 0) return;
+
+         ItemStack copy = itemstack.copy();
+         if (this.pickupDelay == 0 && (this.owner == null || lifespan - this.age <= 200 || this.owner.equals(p_70100_1_.getUUID())) && (hook == 1 || i <= 0 || p_70100_1_.inventory.add(itemstack))) {
+            copy.setCount(copy.getCount() - getItem().getCount());
+            net.minecraftforge.fml.hooks.BasicEventHooks.firePlayerItemPickupEvent(p_70100_1_, this, copy);
             p_70100_1_.take(this, i);
             if (itemstack.isEmpty()) {
                this.remove();
@@ -322,8 +_,8 @@
    }
 
    @Nullable
-   public Entity changeDimension(ServerWorld p_241206_1_) {
-      Entity entity = super.changeDimension(p_241206_1_);
+   public Entity changeDimension(ServerWorld p_241206_1_, net.minecraftforge.common.util.ITeleporter teleporter) {
+      Entity entity = super.changeDimension(p_241206_1_, teleporter);
       if (!this.level.isClientSide && entity instanceof ItemEntity) {
          ((ItemEntity)entity).mergeWithNeighbours();
       }
@@ -396,7 +_,7 @@
 
    public void makeFakeItem() {
       this.setNeverPickUp();
-      this.age = 5999;
+      this.age = getItem().getEntityLifespan(level) - 1;
    }
 
    @OnlyIn(Dist.CLIENT)
