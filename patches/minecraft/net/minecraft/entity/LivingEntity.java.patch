--- a/net/minecraft/entity/LivingEntity.java
+++ b/net/minecraft/entity/LivingEntity.java
@@ -114,21 +_,43 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
+import com.google.common.base.Function;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.v1_16_R3.SpigotTimings;
+import org.bukkit.craftbukkit.v1_16_R3.attribute.CraftAttributeMap;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_16_R3.inventory.CraftItemStack;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.ArrowBodyCountChangeEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityDropItemEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityResurrectEvent;
+import org.bukkit.event.entity.EntityTeleportEvent;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.event.entity.EntityPotionEffectEvent.Cause;
+import org.bukkit.event.player.PlayerItemConsumeEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import io.papermc.paper.event.entity.EntityMoveEvent;
+
 public abstract class LivingEntity extends Entity {
    private static final UUID SPEED_MODIFIER_SPRINTING_UUID = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
    private static final UUID SPEED_MODIFIER_SOUL_SPEED_UUID = UUID.fromString("87f46a96-686f-4796-b035-22e16ee9e038");
+   private static final UUID SLOW_FALLING_ID = UUID.fromString("A5B6CF2A-2F7C-31EF-9022-7C3E7D5E6ABA");
    private static final AttributeModifier SPEED_MODIFIER_SPRINTING = new AttributeModifier(SPEED_MODIFIER_SPRINTING_UUID, "Sprinting speed boost", (double)0.3F, AttributeModifier.Operation.MULTIPLY_TOTAL);
+   private static final AttributeModifier SLOW_FALLING = new AttributeModifier(SLOW_FALLING_ID, "Slow falling acceleration reduction", -0.07, AttributeModifier.Operation.ADDITION); // Add -0.07 to 0.08 so we get the vanilla default of 0.01
    protected static final DataParameter<Byte> DATA_LIVING_ENTITY_FLAGS = EntityDataManager.defineId(LivingEntity.class, DataSerializers.BYTE);
-   private static final DataParameter<Float> DATA_HEALTH_ID = EntityDataManager.defineId(LivingEntity.class, DataSerializers.FLOAT);
+   public static final DataParameter<Float> DATA_HEALTH_ID = EntityDataManager.defineId(LivingEntity.class, DataSerializers.FLOAT); // private->public CraftBukkit
    private static final DataParameter<Integer> DATA_EFFECT_COLOR_ID = EntityDataManager.defineId(LivingEntity.class, DataSerializers.INT);
    private static final DataParameter<Boolean> DATA_EFFECT_AMBIENCE_ID = EntityDataManager.defineId(LivingEntity.class, DataSerializers.BOOLEAN);
-   private static final DataParameter<Integer> DATA_ARROW_COUNT_ID = EntityDataManager.defineId(LivingEntity.class, DataSerializers.INT);
+   public static final DataParameter<Integer> DATA_ARROW_COUNT_ID = EntityDataManager.defineId(LivingEntity.class, DataSerializers.INT);
    private static final DataParameter<Integer> DATA_STINGER_COUNT_ID = EntityDataManager.defineId(LivingEntity.class, DataSerializers.INT);
    private static final DataParameter<Optional<BlockPos>> SLEEPING_POS_ID = EntityDataManager.defineId(LivingEntity.class, DataSerializers.OPTIONAL_BLOCK_POS);
    protected static final EntitySize SLEEPING_DIMENSIONS = EntitySize.fixed(0.2F, 0.2F);
    private final AttributeModifierManager attributes;
-   private final CombatTracker combatTracker = new CombatTracker(this);
-   private final Map<Effect, EffectInstance> activeEffects = Maps.newHashMap();
+   public CombatTracker combatTracker = new CombatTracker(this); // private->public CraftBukkit
+   public final Map<Effect, EffectInstance> activeEffects = Maps.newHashMap(); // private->public CraftBukkit
    private final NonNullList<ItemStack> lastHandItemStacks = NonNullList.withSize(2, ItemStack.EMPTY);
    private final NonNullList<ItemStack> lastArmorItemStacks = NonNullList.withSize(4, ItemStack.EMPTY);
    public boolean swinging;
@@ -146,7 +_,7 @@
    public float animationSpeedOld;
    public float animationSpeed;
    public float animationPosition;
-   public final int invulnerableDuration = 20;
+   public int invulnerableDuration = 20;
    public final float timeOffs;
    public final float rotA;
    public float yBodyRot;
@@ -155,7 +_,7 @@
    public float yHeadRotO;
    public float flyingSpeed = 0.02F;
    @Nullable
-   protected PlayerEntity lastHurtByPlayer;
+   public PlayerEntity lastHurtByPlayer;
    protected int lastHurtByPlayerTime;
    protected boolean dead;
    protected int noActionTime;
@@ -165,7 +_,7 @@
    protected float animStepO;
    protected float rotOffs;
    protected int deathScore;
-   protected float lastHurt;
+   public float lastHurt;
    protected boolean jumping;
    public float xxa;
    public float yya;
@@ -178,10 +_,10 @@
    protected double lerpXRot;
    protected double lyHeadRot;
    protected int lerpHeadSteps;
-   private boolean effectsDirty = true;
+   public boolean effectsDirty = true;
    @Nullable
-   private LivingEntity lastHurtByMob;
-   private int lastHurtByMobTimestamp;
+   public LivingEntity lastHurtByMob;
+   public int lastHurtByMobTimestamp;
    private LivingEntity lastHurtMob;
    private int lastHurtMobTimestamp;
    private float speed;
@@ -199,10 +_,36 @@
    private float swimAmountO;
    protected Brain<?> brain;
 
+   // CraftBukkit start
+   public int expToDrop;
+   public int maxAirTicks = 300;
+   public boolean forceDrops;
+   // public java.util.ArrayList<org.bukkit.inventory.ItemStack> drops = new java.util.ArrayList<org.bukkit.inventory.ItemStack>(); // CatServer - Don't use it
+   public CraftAttributeMap craftAttributes;
+   public boolean collides = true;
+   public java.util.Set<UUID> collidableExemptions = new java.util.HashSet<>();
+   public boolean canPickUpLoot;
+
+   @Override
+   public float getBukkitYaw() {
+      return getYHeadRot();
+   }
+   // CraftBukkit end
+   // Spigot start
+   public void inactiveTick()
+   {
+      super.inactiveTick();
+      ++this.noActionTime; // Above all the floats
+   }
+   // Spigot end
+
    protected LivingEntity(EntityType<? extends LivingEntity> p_i48577_1_, World p_i48577_2_) {
       super(p_i48577_1_, p_i48577_2_);
       this.attributes = new AttributeModifierManager(GlobalEntityTypeAttributes.getSupplier(p_i48577_1_));
       this.setHealth(this.getMaxHealth());
+      this.craftAttributes = new CraftAttributeMap(attributes); // CraftBukkit
+      // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
+      this.entityData.set(LivingEntity.DATA_HEALTH_ID, (float) this.getAttribute(Attributes.MAX_HEALTH).getValue());
       this.blocksBuilding = true;
       this.rotA = (float)((Math.random() + 1.0D) * (double)0.01F);
       this.reapplyPosition();
@@ -227,7 +_,7 @@
    }
 
    public void kill() {
-      this.hurt(DamageSource.OUT_OF_WORLD, Float.MAX_VALUE);
+      this.hurt(DamageSource.OUT_OF_WORLD, Float.MAX_VALUE / 3);
    }
 
    public boolean canAttackType(EntityType<?> p_213358_1_) {
@@ -245,7 +_,7 @@
    }
 
    public static AttributeModifierMap.MutableAttribute createLivingAttributes() {
-      return AttributeModifierMap.builder().add(Attributes.MAX_HEALTH).add(Attributes.KNOCKBACK_RESISTANCE).add(Attributes.MOVEMENT_SPEED).add(Attributes.ARMOR).add(Attributes.ARMOR_TOUGHNESS);
+      return AttributeModifierMap.builder().add(Attributes.MAX_HEALTH).add(Attributes.KNOCKBACK_RESISTANCE).add(Attributes.MOVEMENT_SPEED).add(Attributes.ARMOR).add(Attributes.ARMOR_TOUGHNESS).add(net.minecraftforge.common.ForgeMod.SWIM_SPEED.get()).add(net.minecraftforge.common.ForgeMod.NAMETAG_DISTANCE.get()).add(net.minecraftforge.common.ForgeMod.ENTITY_GRAVITY.get());
    }
 
    protected void checkFallDamage(double p_184231_1_, boolean p_184231_3_, BlockState p_184231_4_, BlockPos p_184231_5_) {
@@ -260,10 +_,13 @@
 
       if (!this.level.isClientSide && this.fallDistance > 3.0F && p_184231_3_) {
          float f = (float)MathHelper.ceil(this.fallDistance - 3.0F);
-         if (!p_184231_4_.isAir()) {
+         if (!p_184231_4_.isAir(level, p_184231_5_)) {
             double d0 = Math.min((double)(0.2F + f / 15.0F), 2.5D);
             int i = (int)(150.0D * d0);
-            ((ServerWorld)this.level).sendParticles(new BlockParticleData(ParticleTypes.BLOCK, p_184231_4_), this.getX(), this.getY(), this.getZ(), i, 0.0D, 0.0D, 0.0D, (double)0.15F);
+            if (!p_184231_4_.addLandingEffects((ServerWorld) this.level, p_184231_5_, p_184231_4_, this, i)) {
+                  ((ServerWorld) this.level).sendParticles(new BlockParticleData(ParticleTypes.BLOCK, p_184231_4_).setPos(p_184231_5_), this.getX(), this.getY(), this.getZ(), i, 0.0D, 0.0D, 0.0D, (double) 0.15F);
+               // CraftBukkit end
+            }
          }
       }
 
@@ -330,7 +_,7 @@
                }
             }
 
-            if (!this.level.isClientSide && this.isPassenger() && this.getVehicle() != null && !this.getVehicle().rideableUnderWater()) {
+            if (!this.level.isClientSide && this.isPassenger() && this.getVehicle() != null && !this.getVehicle().canBeRiddenInWater(this)) {
                this.stopRiding();
             }
          } else if (this.getAirSupply() < this.getMaxAirSupply()) {
@@ -474,8 +_,8 @@
 
    protected void tickDeath() {
       ++this.deathTime;
-      if (this.deathTime == 20) {
-         this.remove();
+      if (this.deathTime >= 20 && !this.removed) { // CraftBukkit - (this.deathTime == 20) -> (this.deathTime >= 20 && !this.removed)
+         this.remove(this instanceof net.minecraft.entity.player.ServerPlayerEntity); //Forge keep data until we revive player
 
          for(int i = 0; i < 20; ++i) {
             double d0 = this.random.nextGaussian() * 0.02D;
@@ -563,9 +_,13 @@
    }
 
    protected void playEquipSound(ItemStack p_184606_1_) {
-      if (!p_184606_1_.isEmpty()) {
+      this.playEquipSound(p_184606_1_, false);
+   }
+
+   protected void playEquipSound(ItemStack stack, boolean silent) {
+      if (!stack.isEmpty() && !silent) {
          SoundEvent soundevent = SoundEvents.ARMOR_EQUIP_GENERIC;
-         Item item = p_184606_1_.getItem();
+         Item item = stack.getItem();
          if (item instanceof ArmorItem) {
             soundevent = ((ArmorItem)item).getMaterial().getEquipSound();
          } else if (item == Items.ELYTRA) {
@@ -623,6 +_,17 @@
          }
       }
 
+      // CraftBukkit start
+      if (p_70037_1_.contains("Bukkit.MaxHealth")) {
+         INBT nbtbase = p_70037_1_.get("Bukkit.MaxHealth");
+         if (nbtbase.getId() == 5) {
+            this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(((net.minecraft.nbt.FloatNBT) nbtbase).getAsDouble());
+         } else if (nbtbase.getId() == 3) {
+            this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(((net.minecraft.nbt.IntNBT) nbtbase).getAsDouble());
+         }
+      }
+      // CraftBukkit end
+
       if (p_70037_1_.contains("Health", 99)) {
          this.setHealth(p_70037_1_.getFloat("Health"));
       }
@@ -658,9 +_,32 @@
 
    }
 
+   // CraftBukkit start
+   private boolean isTickingEffects = false;
+   private List<ProcessableEffect> effectsToProcess = Lists.newArrayList();
+
+   private static class ProcessableEffect {
+
+      private Effect type;
+      private EffectInstance effect;
+      private final EntityPotionEffectEvent.Cause cause;
+
+      private ProcessableEffect(EffectInstance effect, EntityPotionEffectEvent.Cause cause) {
+         this.effect = effect;
+         this.cause = cause;
+      }
+
+      private ProcessableEffect(Effect type, EntityPotionEffectEvent.Cause cause) {
+         this.type = type;
+         this.cause = cause;
+      }
+   }
+   // CraftBukkit end
+
    protected void tickEffects() {
       Iterator<Effect> iterator = this.activeEffects.keySet().iterator();
 
+      isTickingEffects = true; // CraftBukkit
       try {
          while(iterator.hasNext()) {
             Effect effect = iterator.next();
@@ -668,7 +_,13 @@
             if (!effectinstance.tick(this, () -> {
                this.onEffectUpdated(effectinstance, true);
             })) {
-               if (!this.level.isClientSide) {
+               if (!this.level.isClientSide && !net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionExpiryEvent(this, effectinstance))) {
+                  // CraftBukkit start
+                  EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effectinstance, null, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.EXPIRATION);
+                  if (event.isCancelled()) {
+                     continue;
+                  }
+                  // CraftBukkit end
                   iterator.remove();
                   this.onEffectRemoved(effectinstance);
                }
@@ -678,6 +_,17 @@
          }
       } catch (ConcurrentModificationException concurrentmodificationexception) {
       }
+      // CraftBukkit start
+      isTickingEffects = false;
+      for (ProcessableEffect e : effectsToProcess) {
+         if (e.effect != null) {
+            addEffect(e.effect, e.cause);
+         } else {
+            removeEffect(e.type, e.cause);
+         }
+      }
+      effectsToProcess.clear();
+      // CraftBukkit end
 
       if (this.effectsDirty) {
          if (!this.level.isClientSide) {
@@ -717,8 +_,10 @@
          this.setInvisible(false);
       } else {
          Collection<EffectInstance> collection = this.activeEffects.values();
-         this.entityData.set(DATA_EFFECT_AMBIENCE_ID, areAllEffectsAmbient(collection));
-         this.entityData.set(DATA_EFFECT_COLOR_ID, PotionUtils.getColor(collection));
+         net.minecraftforge.event.entity.living.PotionColorCalculationEvent event = new net.minecraftforge.event.entity.living.PotionColorCalculationEvent(this, PotionUtils.getColor(collection), areAllEffectsAmbient(collection), collection);
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+         this.entityData.set(DATA_EFFECT_AMBIENCE_ID, event.areParticlesHidden());
+         this.entityData.set(DATA_EFFECT_COLOR_ID, event.getColor());
          this.setInvisible(this.hasEffect(Effects.INVISIBILITY));
       }
 
@@ -748,6 +_,7 @@
          }
       }
 
+      d0 = net.minecraftforge.common.ForgeHooks.getEntityVisibilityMultiplier(this, p_213340_1_, d0);
       return d0;
    }
 
@@ -774,7 +_,13 @@
       this.entityData.set(DATA_EFFECT_COLOR_ID, 0);
    }
 
+   // CraftBukkit start
    public boolean removeAllEffects() {
+      return clearActivePotions(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+   }
+
+   public boolean clearActivePotions(EntityPotionEffectEvent.Cause cause) {
+      // CraftBukkit end
       if (this.level.isClientSide) {
          return false;
       } else {
@@ -782,7 +_,15 @@
 
          boolean flag;
          for(flag = false; iterator.hasNext(); flag = true) {
-            this.onEffectRemoved(iterator.next());
+            // CraftBukkit start
+            EffectInstance effect = (EffectInstance) iterator.next();
+            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause, EntityPotionEffectEvent.Action.CLEARED);
+            if (event.isCancelled()) {
+               continue;
+            }
+            // CraftBukkit end
+            if(net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionRemoveEvent(this, effect))) continue;
+            this.onEffectRemoved(effect);
             iterator.remove();
          }
 
@@ -808,16 +_,44 @@
    }
 
    public boolean addEffect(EffectInstance p_195064_1_) {
-      if (!this.canBeAffected(p_195064_1_)) {
+      // CraftBkkit start
+      return addEffect(p_195064_1_, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+   }
+
+   public boolean addEffect(EffectInstance effectInstanceIn, EntityPotionEffectEvent.Cause cause) {
+      if (isTickingEffects) {
+         effectsToProcess.add(new ProcessableEffect(effectInstanceIn, cause));
+         return true;
+      }
+      // CraftBukkit end
+      if (!this.canBeAffected(effectInstanceIn)) {
          return false;
       } else {
-         EffectInstance effectinstance = this.activeEffects.get(p_195064_1_.getEffect());
+         EffectInstance effectinstance = this.activeEffects.get(effectInstanceIn.getEffect());
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionAddedEvent(this, effectinstance, effectInstanceIn));
+
+         // CraftBukkit start
+         boolean override = false;
+         if (effectinstance != null) {
+            override = new EffectInstance(effectinstance).update(effectInstanceIn);
+         }
+
+         EntityPotionEffectEvent event =  CraftEventFactory.callEntityPotionEffectChangeEvent(this, effectinstance, effectInstanceIn, cause, override);
+         if (event.isCancelled()) {
+            return false;
+         }
+         // CraftBukkit end
+
          if (effectinstance == null) {
-            this.activeEffects.put(p_195064_1_.getEffect(), p_195064_1_);
-            this.onEffectAdded(p_195064_1_);
+            this.activeEffects.put(effectInstanceIn.getEffect(), effectInstanceIn);
+            this.onEffectAdded(effectInstanceIn);
             return true;
-         } else if (effectinstance.update(p_195064_1_)) {
+            // CraftBukkit start
+         // } else if (effectinstance.combine(effectInstanceIn)) {
+         } else if (event.isOverride()) {
+            effectinstance.update(effectInstanceIn);
             this.onEffectUpdated(effectinstance, true);
+            // CraftBukkit end
             return true;
          } else {
             return false;
@@ -826,6 +_,9 @@
    }
 
    public boolean canBeAffected(EffectInstance p_70687_1_) {
+      net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent event = new net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent(this, p_70687_1_);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+      if (event.getResult() != net.minecraftforge.eventbus.api.Event.Result.DEFAULT) return event.getResult() == net.minecraftforge.eventbus.api.Event.Result.ALLOW;
       if (this.getMobType() == CreatureAttribute.UNDEAD) {
          Effect effect = p_70687_1_.getEffect();
          if (effect == Effects.REGENERATION || effect == Effects.POISON) {
@@ -853,13 +_,39 @@
       return this.getMobType() == CreatureAttribute.UNDEAD;
    }
 
+   //CraftBukkit start
    @Nullable
    public EffectInstance removeEffectNoUpdate(@Nullable Effect p_184596_1_) {
-      return this.activeEffects.remove(p_184596_1_);
+      return removeActivePotionEffect(p_184596_1_, EntityPotionEffectEvent.Cause.UNKNOWN);
+   }
+
+   @Nullable
+   public EffectInstance removeActivePotionEffect(@Nullable Effect potioneffectin, EntityPotionEffectEvent.Cause cause) {
+      if (isTickingEffects) {
+         effectsToProcess.add(new ProcessableEffect(potioneffectin, cause));
+         return null;
+      }
+
+      EffectInstance effect = this.activeEffects.get(potioneffectin);
+      if (effect == null) {
+         return null;
+      }
+
+      EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
+      if(event.isCancelled()) {
+         return null;
+      }
+      return this.activeEffects.remove(potioneffectin);
    }
 
    public boolean removeEffect(Effect p_195063_1_) {
-      EffectInstance effectinstance = this.removeEffectNoUpdate(p_195063_1_);
+      return removeEffect(p_195063_1_, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+   }
+
+   public boolean removeEffect(Effect effectIn, EntityPotionEffectEvent.Cause cause) {
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionRemoveEvent(this, effectIn))) return false;
+      EffectInstance effectinstance = this.removeEffectNoUpdate(effectIn);
+      // CraftBukkit end
       if (effectinstance != null) {
          this.onEffectRemoved(effectinstance);
          return true;
@@ -894,19 +_,50 @@
 
    }
 
+   // CatServer start
    public void heal(float p_70691_1_) {
+      heal(p_70691_1_, EntityRegainHealthEvent.RegainReason.CUSTOM);
+   }
+
+   public void heal(float p_70691_1_, EntityRegainHealthEvent.RegainReason regainReason) {
+      p_70691_1_ = net.minecraftforge.event.ForgeEventFactory.onLivingHeal(this, p_70691_1_);
+      if (p_70691_1_ <= 0) return;
       float f = this.getHealth();
       if (f > 0.0F) {
-         this.setHealth(f + p_70691_1_);
+         // this.setHealth(f + p_70691_1_);
+         EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), p_70691_1_, regainReason);
+         // Suppress during worldGen
+         if (this.valid) {
+            this.level.getCBServer().getPluginManager().callEvent(event);
+         }
+         if (!event.isCancelled()) {
+            this.setHealth((float) (this.getHealth() + event.getAmount()));
+         }
       }
-
    }
+   // CatServer end
 
    public float getHealth() {
+      // CraftBukkit start - Use unscaled health
+      if (this instanceof ServerPlayerEntity && ((ServerPlayerEntity) this).initialized()) {
+         return (float) ((ServerPlayerEntity) this).getBukkitEntity().getHealth();
+      }
+      // CraftBukkit end
       return this.entityData.get(DATA_HEALTH_ID);
    }
 
    public void setHealth(float p_70606_1_) {
+      // CraftBukkit start - Handle scaled health
+      if (this instanceof ServerPlayerEntity && ((ServerPlayerEntity)this).initialized()) {
+         org.bukkit.craftbukkit.v1_16_R3.entity.CraftPlayer player = ((ServerPlayerEntity) this).getBukkitEntity();
+         // Squeeze
+         double realHealth = MathHelper.clamp(p_70606_1_, 0.0F, player.getMaxHealth());
+         player.setRealHealth(realHealth);
+         player.updateScaledHealth(false);
+         player.setRealHealth(realHealth);
+         return;
+      }
+      // CraftBukkit end
       this.entityData.set(DATA_HEALTH_ID, MathHelper.clamp(p_70606_1_, 0.0F, this.getMaxHealth()));
    }
 
@@ -915,11 +_,12 @@
    }
 
    public boolean hurt(DamageSource p_70097_1_, float p_70097_2_) {
+      if (!net.minecraftforge.common.ForgeHooks.onLivingAttack(this, p_70097_1_, p_70097_2_)) return false;
       if (this.isInvulnerableTo(p_70097_1_)) {
          return false;
       } else if (this.level.isClientSide) {
          return false;
-      } else if (this.isDeadOrDying()) {
+      } else if (this.removed || this.dead || this.isDeadOrDying()) {
          return false;
       } else if (p_70097_1_.isFire() && this.hasEffect(Effects.FIRE_RESISTANCE)) {
          return false;
@@ -930,16 +_,19 @@
 
          this.noActionTime = 0;
          float f = p_70097_2_;
-         if ((p_70097_1_ == DamageSource.ANVIL || p_70097_1_ == DamageSource.FALLING_BLOCK) && !this.getItemBySlot(EquipmentSlotType.HEAD).isEmpty()) {
+
+         // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+         if (false && (p_70097_1_ == DamageSource.ANVIL || p_70097_1_ == DamageSource.FALLING_BLOCK) && !this.getItemBySlot(EquipmentSlotType.HEAD).isEmpty()) {
             this.getItemBySlot(EquipmentSlotType.HEAD).hurtAndBreak((int)(p_70097_2_ * 4.0F + this.random.nextFloat() * p_70097_2_ * 2.0F), this, (p_233653_0_) -> {
                p_233653_0_.broadcastBreakEvent(EquipmentSlotType.HEAD);
             });
             p_70097_2_ *= 0.75F;
          }
 
-         boolean flag = false;
+         boolean flag = p_70097_2_ > 0.0F && this.isDamageSourceBlocked(p_70097_1_); // Copied from below
          float f1 = 0.0F;
-         if (p_70097_2_ > 0.0F && this.isDamageSourceBlocked(p_70097_1_)) {
+         // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+         if (false && p_70097_2_ > 0.0F && this.isDamageSourceBlocked(p_70097_1_)) {
             this.hurtCurrentlyUsedShield(p_70097_2_);
             f1 = p_70097_2_;
             p_70097_2_ = 0.0F;
@@ -955,22 +_,40 @@
 
          this.animationSpeed = 1.5F;
          boolean flag1 = true;
-         if ((float)this.invulnerableTime > 10.0F) {
+         if ((float)this.invulnerableTime > (float) this.invulnerableDuration / 2.0F) { // CraftBukkit - restore use of maxNoDamageTicks
             if (p_70097_2_ <= this.lastHurt) {
+               this.forceExplosionKnockback = true; // CraftBukkit - SPIGOT-949 - for vanilla consistency, cooldown does not prevent explosion knockback
                return false;
             }
 
-            this.actuallyHurt(p_70097_1_, p_70097_2_ - this.lastHurt);
+            // CraftBukkit start
+            if(!this.damageEntity0(p_70097_1_, p_70097_2_ - this.lastHurt)){
+               return false;
+            }
+            // CraftBukkit end
             this.lastHurt = p_70097_2_;
             flag1 = false;
          } else {
+            // CraftBukkit start
+            if (!this.damageEntity0(p_70097_1_, p_70097_2_)) {
+               return false;
+            }
+            // CraftBukkit end
             this.lastHurt = p_70097_2_;
-            this.invulnerableTime = 20;
-            this.actuallyHurt(p_70097_1_, p_70097_2_);
+            this.invulnerableTime = this.invulnerableDuration; // CraftBukkit - restore use of maxNoDamageTicks
             this.hurtDuration = 10;
             this.hurtTime = this.hurtDuration;
          }
 
+         // CraftBukkit start
+         if (this instanceof net.minecraft.entity.passive.AnimalEntity) {
+            ((net.minecraft.entity.passive.AnimalEntity) this).resetLove();
+            if (this instanceof net.minecraft.entity.passive.TameableEntity) {
+               ((net.minecraft.entity.passive.TameableEntity) this).setOrderedToSit(false);
+            }
+         }
+         // CraftBukkit end
+
          this.hurtDir = 0.0F;
          Entity entity1 = p_70097_1_.getEntity();
          if (entity1 != null) {
@@ -981,8 +_,8 @@
             if (entity1 instanceof PlayerEntity) {
                this.lastHurtByPlayerTime = 100;
                this.lastHurtByPlayer = (PlayerEntity)entity1;
-            } else if (entity1 instanceof WolfEntity) {
-               WolfEntity wolfentity = (WolfEntity)entity1;
+            } else if (entity1 instanceof net.minecraft.entity.passive.TameableEntity) {
+               net.minecraft.entity.passive.TameableEntity wolfentity = (net.minecraft.entity.passive.TameableEntity)entity1;
                if (wolfentity.isTame()) {
                   this.lastHurtByPlayerTime = 100;
                   LivingEntity livingentity = wolfentity.getOwner();
@@ -1081,32 +_,43 @@
          return false;
       } else {
          ItemStack itemstack = null;
+         // CraftBukkit start
+         ItemStack itemstack1 = ItemStack.EMPTY;
 
          for(Hand hand : Hand.values()) {
-            ItemStack itemstack1 = this.getItemInHand(hand);
+            itemstack1 = this.getItemInHand(hand);
             if (itemstack1.getItem() == Items.TOTEM_OF_UNDYING) {
                itemstack = itemstack1.copy();
+               // itemstack1.shrink(1);  // CraftBukkit
+               break;
+            }
+         }
+
+         EntityResurrectEvent event = new EntityResurrectEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity());
+         event.setCancelled(itemstack == null);
+         this.level.getCBServer().getPluginManager().callEvent(event);
+         if (!event.isCancelled()) {
+            if (!itemstack1.isEmpty()) {
                itemstack1.shrink(1);
-               break;
             }
-         }
-
-         if (itemstack != null) {
-            if (this instanceof ServerPlayerEntity) {
+            if (itemstack != null && this instanceof ServerPlayerEntity) {
+               // CraftBukkit end
                ServerPlayerEntity serverplayerentity = (ServerPlayerEntity)this;
                serverplayerentity.awardStat(Stats.ITEM_USED.get(Items.TOTEM_OF_UNDYING));
                CriteriaTriggers.USED_TOTEM.trigger(serverplayerentity, itemstack);
             }
 
             this.setHealth(1.0F);
-            this.removeAllEffects();
-            this.addEffect(new EffectInstance(Effects.REGENERATION, 900, 1));
-            this.addEffect(new EffectInstance(Effects.ABSORPTION, 100, 1));
-            this.addEffect(new EffectInstance(Effects.FIRE_RESISTANCE, 800, 0));
+            // CraftBukkit start
+            this.clearActivePotions(Cause.TOTEM);
+            this.addEffect(new EffectInstance(Effects.REGENERATION, 900, 1), Cause.TOTEM);
+            this.addEffect(new EffectInstance(Effects.ABSORPTION, 100, 1), Cause.TOTEM);
+            this.addEffect(new EffectInstance(Effects.FIRE_RESISTANCE, 800, 0), Cause.TOTEM);
+            // CraftBukkit end
             this.level.broadcastEntityEvent(this, (byte)35);
          }
 
-         return itemstack != null;
+         return !event.isCancelled();
       }
    }
 
@@ -1127,6 +_,10 @@
 
    }
 
+   protected boolean isDamageSourceBlocked1(DamageSource damageSource) {
+      return this.isDamageSourceBlocked(damageSource);
+   }
+
    private boolean isDamageSourceBlocked(DamageSource p_184583_1_) {
       Entity entity = p_184583_1_.getDirectEntity();
       boolean flag = false;
@@ -1165,6 +_,7 @@
    }
 
    public void die(DamageSource p_70645_1_) {
+      if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this, p_70645_1_)) return;
       if (!this.removed && !this.dead) {
          Entity entity = p_70645_1_.getEntity();
          LivingEntity livingentity = this.getKillCredit();
@@ -1196,10 +_,10 @@
       if (!this.level.isClientSide) {
          boolean flag = false;
          if (p_226298_1_ instanceof WitherEntity) {
-            if (this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+            if (net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.level, this)) {
                BlockPos blockpos = this.blockPosition();
                BlockState blockstate = Blocks.WITHER_ROSE.defaultBlockState();
-               if (this.level.getBlockState(blockpos).isAir() && blockstate.canSurvive(this.level, blockpos)) {
+               if (this.level.isEmptyBlock(blockpos) && blockstate.canSurvive(this.level, blockpos)) {
                   this.level.setBlock(blockpos, blockstate, 3);
                   flag = true;
                }
@@ -1207,6 +_,14 @@
 
             if (!flag) {
                ItemEntity itementity = new ItemEntity(this.level, this.getX(), this.getY(), this.getZ(), new ItemStack(Items.WITHER_ROSE));
+
+               // CraftBukkit start
+               org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) itementity.getBukkitEntity());
+               CraftEventFactory.callEvent(event);
+               if (event.isCancelled()) {
+                  return;
+               }
+               // CraftBukkit end
                this.level.addFreshEntity(itementity);
             }
          }
@@ -1216,36 +_,69 @@
 
    protected void dropAllDeathLoot(DamageSource p_213345_1_) {
       Entity entity = p_213345_1_.getEntity();
-      int i;
-      if (entity instanceof PlayerEntity) {
-         i = EnchantmentHelper.getMobLooting((LivingEntity)entity);
-      } else {
-         i = 0;
-      }
+
+      int i = net.minecraftforge.common.ForgeHooks.getLootingLevel(this, entity, p_213345_1_);
+      this.captureDrops(new java.util.ArrayList<>());
 
       boolean flag = this.lastHurtByPlayerTime > 0;
+      this.dropEquipment(); // CraftBukkit - from below
       if (this.shouldDropLoot() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
          this.dropFromLootTable(p_213345_1_, flag);
          this.dropCustomDeathLoot(p_213345_1_, i, flag);
       }
-
-      this.dropEquipment();
-      this.dropExperience();
+      Collection<ItemEntity> drops = captureDrops(null);
+      // CatServer start - capture drops for plugins then fire event
+      if (!(this instanceof ServerPlayerEntity)) {
+         this.expToDrop = this.getExpReward();
+         if (!net.minecraftforge.common.ForgeHooks.onLivingDrops(this, p_213345_1_, drops, i, lastHurtByPlayerTime > 0)) {
+            List<org.bukkit.inventory.ItemStack> bukkitDrops = new java.util.ArrayList<>();
+            for (ItemEntity drop : drops) {
+               bukkitDrops.add(CraftItemStack.asCraftMirror(drop.getItem()));
+            }
+            // CatServer - handle ArmorStand
+            if (this instanceof net.minecraft.entity.item.ArmorStandEntity) {
+               bukkitDrops.addAll(((net.minecraft.entity.item.ArmorStandEntity) this).drops);
+               ((net.minecraft.entity.item.ArmorStandEntity) this).drops.clear();
+            }
+            CraftEventFactory.callEntityDeathEvent(this, bukkitDrops);
+         }
+      } else {
+         // Shouldn't arrive here
+         if (!net.minecraftforge.common.ForgeHooks.onLivingDrops(this, p_213345_1_, drops, i, lastHurtByPlayerTime > 0)) {
+            drops.forEach(e -> level.addFreshEntity(e));
+         }
+      }
+      // CatServer end
    }
 
    protected void dropEquipment() {
    }
 
-   protected void dropExperience() {
+   // CraftBukkit start
+   public int getExpReward() {
       if (!this.level.isClientSide && (this.isAlwaysExperienceDropper() || this.lastHurtByPlayerTime > 0 && this.shouldDropExperience() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT))) {
          int i = this.getExperienceReward(this.lastHurtByPlayer);
-
+         return i;
+      } else {
+         return 0;
+      }
+   }
+   // CraftBukkit end
+
+   public void dropExperience() {
+      // CraftBukkit start - Update getExpReward() above if the removed if() changes!
+      if (true) {
+         int i = this.expToDrop;
+
+         i = net.minecraftforge.event.ForgeEventFactory.getExperienceDrop(this, this.lastHurtByPlayer, i);
          while(i > 0) {
             int j = ExperienceOrbEntity.getExperienceValue(i);
             i -= j;
             this.level.addFreshEntity(new ExperienceOrbEntity(this.level, this.getX(), this.getY(), this.getZ(), j));
          }
+         this.expToDrop = 0;
       }
+      // CraftBukkit end
 
    }
 
@@ -1260,7 +_,8 @@
       ResourceLocation resourcelocation = this.getLootTable();
       LootTable loottable = this.level.getServer().getLootTables().get(resourcelocation);
       LootContext.Builder lootcontext$builder = this.createLootContext(p_213354_2_, p_213354_1_);
-      loottable.getRandomItems(lootcontext$builder.create(LootParameterSets.ENTITY), this::spawnAtLocation);
+      LootContext ctx = lootcontext$builder.create(LootParameterSets.ENTITY);
+      loottable.getRandomItems(ctx).forEach(this::spawnAtLocation);
    }
 
    protected LootContext.Builder createLootContext(boolean p_213363_1_, DamageSource p_213363_2_) {
@@ -1272,7 +_,13 @@
       return lootcontext$builder;
    }
 
+
    public void knockback(float p_233627_1_, double p_233627_2_, double p_233627_4_) {
+      net.minecraftforge.event.entity.living.LivingKnockBackEvent event = net.minecraftforge.common.ForgeHooks.onLivingKnockBack(this, p_233627_1_, p_233627_2_, p_233627_4_);
+      if(event.isCanceled()) return;
+      p_233627_1_ = event.getStrength();
+      p_233627_2_ = event.getRatioX();
+      p_233627_4_ = event.getRatioZ();
       p_233627_1_ = (float)((double)p_233627_1_ * (1.0D - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE)));
       if (!(p_233627_1_ <= 0.0F)) {
          this.hasImpulse = true;
@@ -1322,16 +_,9 @@
       } else {
          BlockPos blockpos = this.blockPosition();
          BlockState blockstate = this.getFeetBlockState();
-         Block block = blockstate.getBlock();
-         if (block.is(BlockTags.CLIMBABLE)) {
-            this.lastClimbablePos = Optional.of(blockpos);
-            return true;
-         } else if (block instanceof TrapDoorBlock && this.trapdoorUsableAsLadder(blockpos, blockstate)) {
-            this.lastClimbablePos = Optional.of(blockpos);
-            return true;
-         } else {
-            return false;
-         }
+         Optional<BlockPos> ladderPos = net.minecraftforge.common.ForgeHooks.isLivingOnLadderPos(blockstate, level, blockpos, this);
+         if (ladderPos.isPresent()) this.lastClimbablePos = ladderPos;
+         return ladderPos.isPresent();
       }
    }
 
@@ -1355,12 +_,22 @@
    }
 
    public boolean causeFallDamage(float p_225503_1_, float p_225503_2_) {
+      float[] ret = net.minecraftforge.common.ForgeHooks.onLivingFall(this, p_225503_1_, p_225503_2_);
+      if (ret == null) return false;
+      p_225503_1_ = ret[0];
+      p_225503_2_ = ret[1];
+
       boolean flag = super.causeFallDamage(p_225503_1_, p_225503_2_);
       int i = this.calculateFallDamage(p_225503_1_, p_225503_2_);
       if (i > 0) {
+         // CraftBukkit start
+         if (!this.hurt(DamageSource.FALL, (float) i)) {
+            return true;
+         }
+         // CraftBukkit end
          this.playSound(this.getFallDamageSound(i), 1.0F, 1.0F);
          this.playBlockFallSound();
-         this.hurt(DamageSource.FALL, (float)i);
+         // this.attackEntityFrom(DamageSource.FALL, (float)i); // CraftBukkit - moved up
          return true;
       } else {
          return flag;
@@ -1378,9 +_,10 @@
          int i = MathHelper.floor(this.getX());
          int j = MathHelper.floor(this.getY() - (double)0.2F);
          int k = MathHelper.floor(this.getZ());
-         BlockState blockstate = this.level.getBlockState(new BlockPos(i, j, k));
-         if (!blockstate.isAir()) {
-            SoundType soundtype = blockstate.getSoundType();
+         BlockPos pos = new BlockPos(i, j, k);
+         BlockState blockstate = this.level.getBlockState(pos);
+         if (!blockstate.isAir(this.level, pos)) {
+            SoundType soundtype = blockstate.getSoundType(level, pos, this);
             this.playSound(soundtype.getFallSound(), soundtype.getVolume() * 0.5F, soundtype.getPitch() * 0.75F);
          }
 
@@ -1404,15 +_,23 @@
    protected void hurtCurrentlyUsedShield(float p_184590_1_) {
    }
 
-   protected float getDamageAfterArmorAbsorb(DamageSource p_70655_1_, float p_70655_2_) {
+   // CatServer start - if event is cancelled, prevent break armor
+   protected float getDamageAfterArmorAbsorb(DamageSource p_70655_1_, float p_70655_2_, boolean flag) {
       if (!p_70655_1_.isBypassArmor()) {
-         this.hurtArmor(p_70655_1_, p_70655_2_);
+         if (!flag) {
+            this.hurtArmor(p_70655_1_, p_70655_2_);
+         }
          p_70655_2_ = CombatRules.getDamageAfterAbsorb(p_70655_2_, (float)this.getArmorValue(), (float)this.getAttributeValue(Attributes.ARMOR_TOUGHNESS));
       }
 
       return p_70655_2_;
    }
 
+    protected float getDamageAfterArmorAbsorb(DamageSource p_70655_1_, float p_70655_2_) {
+        return this.getDamageAfterArmorAbsorb(p_70655_1_, p_70655_2_, false);
+    }
+    // CatServer end
+
    protected float getDamageAfterMagicAbsorb(DamageSource p_70672_1_, float p_70672_2_) {
       if (p_70672_1_.isBypassMagic()) {
          return p_70672_2_;
@@ -1447,7 +_,11 @@
    }
 
    protected void actuallyHurt(DamageSource p_70665_1_, float p_70665_2_) {
+      this.damageEntity0(p_70665_1_, p_70665_2_);
+      /*
       if (!this.isInvulnerableTo(p_70665_1_)) {
+         p_70665_2_ = net.minecraftforge.common.ForgeHooks.onLivingHurt(this, p_70665_1_, p_70665_2_);
+         if (p_70665_2_ <= 0) return;
          p_70665_2_ = this.getDamageAfterArmorAbsorb(p_70665_1_, p_70665_2_);
          p_70665_2_ = this.getDamageAfterMagicAbsorb(p_70665_1_, p_70665_2_);
          float f2 = Math.max(p_70665_2_ - this.getAbsorptionAmount(), 0.0F);
@@ -1457,13 +_,170 @@
             ((ServerPlayerEntity)p_70665_1_.getEntity()).awardStat(Stats.DAMAGE_DEALT_ABSORBED, Math.round(f * 10.0F));
          }
 
+         f2 = net.minecraftforge.common.ForgeHooks.onLivingDamage(this, p_70665_1_, f2);
          if (f2 != 0.0F) {
             float f1 = this.getHealth();
-            this.setHealth(f1 - f2);
             this.getCombatTracker().recordDamage(p_70665_1_, f1, f2);
+            this.setHealth(f1 - f2); // Forge: moved to fix MC-121048
             this.setAbsorptionAmount(this.getAbsorptionAmount() - f2);
          }
       }
+      */
+   }
+
+   // CraftBukkit start
+   protected boolean damageEntity0(final DamageSource damagesource, float f) { // void -> boolean, add final
+      if (!this.isInvulnerableTo(damagesource)) {
+         final boolean human = this instanceof PlayerEntity;
+         float originalDamage = f;
+
+         if (!human || f > 0) { // filter out 0 damage (from EntityPlayer.attackEntityFrom)
+            f = net.minecraftforge.common.ForgeHooks.onLivingHurt(this, damagesource, f);
+         }
+
+         float originalDamage_CB = f;
+
+         Function<Double, Double> hardHat = f21 -> {
+            if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && !LivingEntity.this.getItemBySlot(EquipmentSlotType.HEAD).isEmpty()) {
+               return -(f21 - (f21 * 0.75F));
+            }
+            return -0.0;
+         };
+         float hardHatModifier = hardHat.apply((double) f).floatValue();
+         f += hardHatModifier;
+
+         Function<Double, Double> blocking = f22 -> -((LivingEntity.this.isDamageSourceBlocked(damagesource)) ? f22 : 0.0);
+         float blockingModifier = blocking.apply((double) f).floatValue();
+         f += blockingModifier;
+
+         Function<Double, Double> armor = f23 -> -(f23 - LivingEntity.this.getDamageAfterArmorAbsorb(damagesource, f23.floatValue(), true));
+         float armorModifier = armor.apply((double) f).floatValue();
+         f += armorModifier;
+
+         Function<Double, Double> resistance = f24 -> {
+            if (!damagesource.isBypassMagic() && LivingEntity.this.hasEffect(Effects.DAMAGE_RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
+               int i = (LivingEntity.this.getEffect(Effects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
+               int j = 25 - i;
+               float f1 = f24.floatValue() * (float) j;
+               return -(f24 - (f1 / 25.0F));
+            }
+            return -0.0;
+         };
+         float resistanceModifier = resistance.apply((double) f).floatValue();
+         f += resistanceModifier;
+
+         Function<Double, Double> magic = f25 -> -(f25 - LivingEntity.this.getDamageAfterMagicAbsorb(damagesource, f25.floatValue()));
+         float magicModifier = magic.apply((double) f).floatValue();
+         f += magicModifier;
+
+         Function<Double, Double> absorption = f26 -> -(Math.max(f26 - Math.max(f26 - LivingEntity.this.getAbsorptionAmount(), 0.0F), 0.0F));
+         float absorptionModifier = absorption.apply((double) f).floatValue();
+
+         EntityDamageEvent event = CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage_CB, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
+         if (damagesource.getEntity() instanceof PlayerEntity) {
+            ((PlayerEntity) damagesource.getEntity()).resetAttackStrengthTicker(); // Moved from EntityHuman in order to make the cooldown reset get called after the damage event is fired
+         }
+         if (event.isCancelled()) {
+            return false;
+         }
+
+         f = (float) event.getFinalDamage();
+
+         // Resistance
+         if (event.getDamage(EntityDamageEvent.DamageModifier.RESISTANCE) < 0) {
+            float f3 = (float) -event.getDamage(EntityDamageEvent.DamageModifier.RESISTANCE);
+            if (f3 > 0.0F && f3 < 3.4028235E37F) {
+               if (this instanceof ServerPlayerEntity) {
+                  ((ServerPlayerEntity) this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
+               } else if (damagesource.getEntity() instanceof ServerPlayerEntity) {
+                  ((ServerPlayerEntity) damagesource.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
+               }
+            }
+         }
+
+         // Apply damage to helmet
+         if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && this.getItemBySlot(EquipmentSlotType.HEAD) != null) {
+            this.getItemBySlot(EquipmentSlotType.HEAD).hurtAndBreak((int) (event.getDamage() * 4.0F + this.random.nextFloat() * event.getDamage() * 2.0F), this, (entityliving) -> {
+               entityliving.broadcastBreakEvent(EquipmentSlotType.HEAD);
+            });
+         }
+
+         // Apply damage to armor
+         if (!damagesource.isBypassArmor()) {
+            float armorDamage = (float) (event.getDamage() + event.getDamage(EntityDamageEvent.DamageModifier.BLOCKING) + event.getDamage(EntityDamageEvent.DamageModifier.HARD_HAT));
+            this.hurtArmor(damagesource, armorDamage);
+         }
+
+         // Apply blocking code // PAIL: steal from above
+         if (event.getDamage(EntityDamageEvent.DamageModifier.BLOCKING) < 0) {
+            this.level.broadcastEntityEvent(this, (byte) 29); // SPIGOT-4635 - shield damage sound
+            this.hurtCurrentlyUsedShield((float) -event.getDamage(EntityDamageEvent.DamageModifier.BLOCKING));
+            Entity entity = damagesource.getDirectEntity();
+
+            if (entity instanceof LivingEntity) {
+               this.blockUsingShield((LivingEntity) entity);
+            }
+         }
+
+         if (originalDamage_CB > 0 || f > 0) {
+            absorptionModifier = (float) -event.getDamage(EntityDamageEvent.DamageModifier.ABSORPTION);
+            if (!human || (event.getDamage() - -event.getDamage(EntityDamageEvent.DamageModifier.ARMOR)) > 0) {
+               this.setAbsorptionAmount(Math.max(this.getAbsorptionAmount() - absorptionModifier, 0.0F));
+            }
+
+            float f2 = absorptionModifier;
+            if (f2 > 0.0F && f2 < 3.4028235E37F && this instanceof PlayerEntity) {
+               ((PlayerEntity) this).awardStat(Stats.DAMAGE_ABSORBED, Math.round(f2 * 10.0F));
+            }
+            if (f2 > 0.0F && f2 < 3.4028235E37F && damagesource.getEntity() instanceof ServerPlayerEntity) {
+               ((ServerPlayerEntity) damagesource.getEntity()).awardStat(Stats.DAMAGE_DEALT_ABSORBED, Math.round(f2 * 10.0F));
+            }
+         }
+
+         if (!human || f > 0) {
+            if (f > 0) f = net.minecraftforge.common.ForgeHooks.onLivingDamage(this, damagesource, f);
+            if (human) {
+               // PAIL: Be sure to drag all this code from the EntityPlayer subclass each update.
+               ((PlayerEntity) this).causeFoodExhaustion(damagesource.getFoodExhaustion(), org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.DAMAGED);
+               if (f < 3.4028235E37F) {
+                  ((PlayerEntity) this).awardStat(Stats.DAMAGE_TAKEN, Math.round(f * 10.0F));
+               }
+            }
+            // CraftBukkit end
+            float f3 = this.getHealth();
+
+            this.getCombatTracker().recordDamage(damagesource, f3, f);
+            this.setHealth(f3 - f); // Forge: moved to fix MC-121048
+            // CraftBukkit start
+
+            if (!human) {
+               this.setAbsorptionAmount(this.getAbsorptionAmount() - f);
+            }
+
+            return true;
+         } else {
+            // Duplicate triggers if blocking
+            if (event.getDamage(EntityDamageEvent.DamageModifier.BLOCKING) < 0) {
+               if (this instanceof ServerPlayerEntity) {
+                  CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayerEntity) this, damagesource, f, originalDamage, true);
+                  float f2 = (float) -event.getDamage(EntityDamageEvent.DamageModifier.BLOCKING);
+                  if (f2 > 0.0F && f2 < 3.4028235E37F) {
+                     ((ServerPlayerEntity) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(originalDamage * 10.0F));
+                  }
+               }
+
+               if (damagesource.getEntity() instanceof ServerPlayerEntity) {
+                  CriteriaTriggers.PLAYER_HURT_ENTITY.trigger((ServerPlayerEntity) damagesource.getEntity(), this, damagesource, f, originalDamage, true);
+               }
+
+               return false;
+            } else {
+               return originalDamage > 0;
+            }
+            // CraftBukkit end
+         }
+      }
+      return false; // CraftBukkit
    }
 
    public CombatTracker getCombatTracker() {
@@ -1490,7 +_,16 @@
    }
 
    public final void setArrowCount(int p_85034_1_) {
-      this.entityData.set(DATA_ARROW_COUNT_ID, p_85034_1_);
+      // CraftBukkit start
+      setArrowCountInEntity(p_85034_1_, false);
+   }
+
+   public final void setArrowCountInEntity(int count, boolean flag) {
+      ArrowBodyCountChangeEvent event = CraftEventFactory.callArrowBodyCountChangeEvent(this, getArrowCount(), count, flag);
+      if(event.isCancelled()){
+         return;
+      }
+      this.entityData.set(DATA_ARROW_COUNT_ID, count);
    }
 
    public final int getStingerCount() {
@@ -1514,6 +_,8 @@
    }
 
    public void swing(Hand p_226292_1_, boolean p_226292_2_) {
+      ItemStack stack = this.getItemInHand(p_226292_1_);
+      if (!stack.isEmpty() && stack.onEntitySwing(this)) return;
       if (!this.swinging || this.swingTime >= this.getCurrentSwingDuration() / 2 || this.swingTime < 0) {
          this.swingTime = -1;
          this.swinging = true;
@@ -1764,6 +_,12 @@
 
    public abstract ItemStack getItemBySlot(EquipmentSlotType p_184582_1_);
 
+   // CraftBukkit start
+   public void setItemStackToSlot(EquipmentSlotType slotIn, ItemStack stack, boolean silent) {
+      this.setItemSlot(slotIn, stack);
+   }
+   // CraftBukkit end
+
    public abstract void setItemSlot(EquipmentSlotType p_184201_1_, ItemStack p_184201_2_);
 
    public float getArmorCoverPercentage() {
@@ -1848,15 +_,16 @@
       }
 
       this.hasImpulse = true;
+      net.minecraftforge.common.ForgeHooks.onLivingJump(this);
    }
 
    @OnlyIn(Dist.CLIENT)
    protected void goDownInWater() {
-      this.setDeltaMovement(this.getDeltaMovement().add(0.0D, (double)-0.04F, 0.0D));
+      this.setDeltaMovement(this.getDeltaMovement().add(0.0D, (double)-0.04F * this.getAttribute(net.minecraftforge.common.ForgeMod.SWIM_SPEED.get()).getValue(), 0.0D));
    }
 
    protected void jumpInLiquid(ITag<Fluid> p_180466_1_) {
-      this.setDeltaMovement(this.getDeltaMovement().add(0.0D, (double)0.04F, 0.0D));
+      this.setDeltaMovement(this.getDeltaMovement().add(0.0D, (double)0.04F * this.getAttribute(net.minecraftforge.common.ForgeMod.SWIM_SPEED.get()).getValue(), 0.0D));
    }
 
    protected float getWaterSlowDown() {
@@ -1870,11 +_,15 @@
    public void travel(Vector3d p_213352_1_) {
       if (this.isEffectiveAi() || this.isControlledByLocalInstance()) {
          double d0 = 0.08D;
+         ModifiableAttributeInstance gravity = this.getAttribute(net.minecraftforge.common.ForgeMod.ENTITY_GRAVITY.get());
          boolean flag = this.getDeltaMovement().y <= 0.0D;
          if (flag && this.hasEffect(Effects.SLOW_FALLING)) {
-            d0 = 0.01D;
+            if (!gravity.hasModifier(SLOW_FALLING)) gravity.addTransientModifier(SLOW_FALLING);
             this.fallDistance = 0.0F;
+         } else if (gravity.hasModifier(SLOW_FALLING)) {
+            gravity.removeModifier(SLOW_FALLING);
          }
+         d0 = gravity.getValue();
 
          FluidState fluidstate = this.level.getFluidState(this.blockPosition());
          if (this.isInWater() && this.isAffectedByFluids() && !this.canStandOnFluid(fluidstate.getType())) {
@@ -1899,6 +_,7 @@
                f5 = 0.96F;
             }
 
+            f6 *= (float)this.getAttribute(net.minecraftforge.common.ForgeMod.SWIM_SPEED.get()).getValue();
             this.moveRelative(f6, p_213352_1_);
             this.move(MoverType.SELF, this.getDeltaMovement());
             Vector3d vector3d6 = this.getDeltaMovement();
@@ -1973,11 +_,12 @@
             }
 
             if (this.onGround && !this.level.isClientSide) {
-               this.setSharedFlag(7, false);
+               if (getSharedFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) // CraftBukkit
+                  this.setSharedFlag(7, false);
             }
          } else {
             BlockPos blockpos = this.getBlockPosBelowThatAffectsMyMovement();
-            float f3 = this.level.getBlockState(blockpos).getBlock().getFriction();
+            float f3 = this.level.getBlockState(this.getBlockPosBelowThatAffectsMyMovement()).getSlipperiness(level, this.getBlockPosBelowThatAffectsMyMovement(), this);
             float f4 = this.onGround ? f3 * 0.91F : 0.91F;
             Vector3d vector3d5 = this.handleRelativeFrictionAndCalculateMovement(p_213352_1_, f3);
             double d2 = vector3d5.y;
@@ -2049,7 +_,7 @@
          double d0 = MathHelper.clamp(p_213362_1_.x, (double)-0.15F, (double)0.15F);
          double d1 = MathHelper.clamp(p_213362_1_.z, (double)-0.15F, (double)0.15F);
          double d2 = Math.max(p_213362_1_.y, (double)-0.15F);
-         if (d2 < 0.0D && !this.getFeetBlockState().is(Blocks.SCAFFOLDING) && this.isSuppressingSlidingDownLadder() && this instanceof PlayerEntity) {
+         if (d2 < 0.0D && !this.getFeetBlockState().isScaffolding(this) && this.isSuppressingSlidingDownLadder() && this instanceof PlayerEntity) {
             d2 = 0.0D;
          }
 
@@ -2077,6 +_,8 @@
    }
 
    public void tick() {
+      SpigotTimings.timerEntityBaseTick.startTiming(); // Spigot
+      if (net.minecraftforge.common.ForgeHooks.onLivingUpdate(this)) return;
       super.tick();
       this.updatingUsingItem();
       this.updateSwimAmount();
@@ -2122,7 +_,9 @@
          }
       }
 
+      SpigotTimings.timerEntityBaseTick.stopTiming(); // Spigot
       this.aiStep();
+      SpigotTimings.timerEntityTickRest.startTiming(); // Spigot
       double d0 = this.getX() - this.xo;
       double d1 = this.getZ() - this.zo;
       float f = (float)(d0 * d0 + d1 * d1);
@@ -2200,9 +_,10 @@
          this.xRot = 0.0F;
       }
 
+      SpigotTimings.timerEntityTickRest.stopTiming(); // Spigot
    }
 
-   private void detectEquipmentUpdates() {
+   public void detectEquipmentUpdates() {
       Map<EquipmentSlotType, ItemStack> map = this.collectEquipmentChanges();
       if (map != null) {
          this.handleHandSwap(map);
@@ -2232,6 +_,7 @@
 
          ItemStack itemstack1 = this.getItemBySlot(equipmentslottype);
          if (!ItemStack.matches(itemstack1, itemstack)) {
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.LivingEquipmentChangeEvent(this, equipmentslottype, itemstack, itemstack1));
             if (map == null) {
                map = Maps.newEnumMap(EquipmentSlotType.class);
             }
@@ -2368,6 +_,7 @@
 
       this.setDeltaMovement(d1, d3, d5);
       this.level.getProfiler().push("ai");
+      SpigotTimings.timerEntityAI.startTiming(); // Spigot
       if (this.isImmobile()) {
          this.jumping = false;
          this.xxa = 0.0F;
@@ -2377,6 +_,7 @@
          this.serverAiStep();
          this.level.getProfiler().pop();
       }
+      SpigotTimings.timerEntityAI.stopTiming(); // Spigot
 
       this.level.getProfiler().pop();
       this.level.getProfiler().push("jump");
@@ -2412,7 +_,9 @@
       this.zza *= 0.98F;
       this.updateFallFlying();
       AxisAlignedBB axisalignedbb = this.getBoundingBox();
+      SpigotTimings.timerEntityAIMove.startTiming(); // Spigot
       this.travel(new Vector3d((double)this.xxa, (double)this.yya, (double)this.zza));
+      SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot
       this.level.getProfiler().pop();
       this.level.getProfiler().push("push");
       if (this.autoSpinAttackTicks > 0) {
@@ -2420,8 +_,42 @@
          this.checkAutoSpinAttack(axisalignedbb, this.getBoundingBox());
       }
 
+      SpigotTimings.timerEntityAICollision.startTiming(); // Spigot
       this.pushEntities();
+      SpigotTimings.timerEntityAICollision.stopTiming(); // Spigot
       this.level.getProfiler().pop();
+      // Paper
+      if (this.xOld != getX() || this.yOld != getY() || this.zOld != getZ()
+              || this.getViewYRot(0.0F) != this.getViewYRot(1.0F)
+              || this.getViewXRot(0.0F) != this.getViewXRot(1.0F)) {
+         Location from = new Location(level.getWorld(),
+                 this.xOld,
+                 this.yOld,
+                 this.zOld,
+                 this.getViewYRot(0.0F),
+                 this.getViewXRot(0.0F));
+         Location to = new Location(level.getWorld(),
+                 getX(),
+                 getY(),
+                 getZ(),
+                 this.getViewYRot(1.0F),
+                 this.getViewXRot(1.0F));
+         EntityMoveEvent event = new EntityMoveEvent(
+                 (org.bukkit.entity.LivingEntity) this.getBukkitEntity(),
+                 from.clone(),
+                 to.clone());
+         Bukkit.getServer().getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            this.setPos(from.getX(), from.getY(), from.getZ());
+            this.setRot(from.getYaw(), from.getPitch());
+         } else if (!to.equals(event.getTo())){
+            this.setPos(event.getTo().getX(),
+                    event.getTo().getY(),
+                    event.getTo().getZ());
+            this.setRot(event.getTo().getYaw(), event.getTo().getPitch());
+         }
+      }
+      // Paper
       if (!this.level.isClientSide && this.isSensitiveToWater() && this.isInWaterRainOrBubble()) {
          this.hurt(DamageSource.DROWN, 1.0F);
       }
@@ -2436,6 +_,8 @@
       boolean flag = this.getSharedFlag(7);
       if (flag && !this.onGround && !this.isPassenger() && !this.hasEffect(Effects.LEVITATION)) {
          ItemStack itemstack = this.getItemBySlot(EquipmentSlotType.CHEST);
+         flag = itemstack.canElytraFly(this) && itemstack.elytraFlightTick(this, this.fallFlyTicks);
+         if (false) //Forge: Moved to ElytraItem
          if (itemstack.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(itemstack)) {
             flag = true;
             if (!this.level.isClientSide && (this.fallFlyTicks + 1) % 20 == 0) {
@@ -2451,7 +_,8 @@
       }
 
       if (!this.level.isClientSide) {
-         this.setSharedFlag(7, flag);
+         if (flag != this.getSharedFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, flag).isCancelled()) // CraftBukkit
+            this.setSharedFlag(7, flag);
       }
 
    }
@@ -2581,6 +_,7 @@
    public boolean canSee(Entity p_70685_1_) {
       Vector3d vector3d = new Vector3d(this.getX(), this.getEyeY(), this.getZ());
       Vector3d vector3d1 = new Vector3d(p_70685_1_.getX(), p_70685_1_.getEyeY(), p_70685_1_.getZ());
+      if (p_70685_1_.level != this.level || vector3d1.distanceToSqr(vector3d) > 128.0D * 128.0D) return false; //Forge Backport MC-209819
       return this.level.clip(new RayTraceContext(vector3d, vector3d1, RayTraceContext.BlockMode.COLLIDER, RayTraceContext.FluidMode.NONE, this)).getType() == RayTraceResult.Type.MISS;
    }
 
@@ -2603,12 +_,19 @@
    }
 
    public boolean isPickable() {
-      return !this.removed;
+      return !this.removed && this.collides; // CraftBukkit
    }
 
    public boolean isPushable() {
-      return this.isAlive() && !this.isSpectator() && !this.onClimbable();
-   }
+      return this.isAlive() && !this.isSpectator() && !this.onClimbable() && this.collides; // CraftBukkit
+   }
+
+   // CraftBukkit start - collidable API
+   @Override
+   public boolean canCollideWithCB(Entity entity) {
+      return isPushable() && this.collides != this.collidableExemptions.contains(entity.getUUID());
+   }
+   // CraftBukkit end
 
    protected void markHurt() {
       this.hurtMarked = this.random.nextDouble() >= this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
@@ -2668,8 +_,16 @@
 
    private void updatingUsingItem() {
       if (this.isUsingItem()) {
-         if (ItemStack.isSameIgnoreDurability(this.getItemInHand(this.getUsedItemHand()), this.useItem)) {
-            this.useItem = this.getItemInHand(this.getUsedItemHand());
+         ItemStack itemStack = this.getItemInHand(this.getUsedItemHand());
+         if (net.minecraftforge.common.ForgeHooks.canContinueUsing(this.useItem, itemStack)) this.useItem = itemStack;
+         if (itemStack == this.useItem) {
+
+            if (!this.useItem.isEmpty()) {
+              useItemRemaining = net.minecraftforge.event.ForgeEventFactory.onItemUseTick(this, useItem, useItemRemaining);
+              if (useItemRemaining > 0)
+                 useItem.onUsingTick(this, useItemRemaining);
+            }
+
             this.useItem.onUseTick(this.level, this, this.getUseItemRemainingTicks());
             if (this.shouldTriggerItemUseEffects()) {
                this.triggerItemUseEffects(this.useItem, 5);
@@ -2717,8 +_,10 @@
    public void startUsingItem(Hand p_184598_1_) {
       ItemStack itemstack = this.getItemInHand(p_184598_1_);
       if (!itemstack.isEmpty() && !this.isUsingItem()) {
+         int duration = net.minecraftforge.event.ForgeEventFactory.onItemUseStart(this, itemstack, itemstack.getUseDuration());
+         if (duration <= 0) return;
          this.useItem = itemstack;
-         this.useItemRemaining = itemstack.getUseDuration();
+         this.useItemRemaining = duration;
          if (!this.level.isClientSide) {
             this.setLivingEntityFlag(1, true);
             this.setLivingEntityFlag(2, p_184598_1_ == Hand.OFF_HAND);
@@ -2778,6 +_,9 @@
          vector3d1 = vector3d1.xRot(-this.xRot * ((float)Math.PI / 180F));
          vector3d1 = vector3d1.yRot(-this.yRot * ((float)Math.PI / 180F));
          vector3d1 = vector3d1.add(this.getX(), this.getEyeY(), this.getZ());
+         if (this.level instanceof ServerWorld) //Forge: Fix MC-2518 spawnParticle is nooped on server, need to use server specific variant
+             ((ServerWorld)this.level).sendParticles(new ItemParticleData(ParticleTypes.ITEM, p_195062_1_), vector3d1.x, vector3d1.y, vector3d1.z, 1, vector3d.x, vector3d.y + 0.05D, vector3d.z, 0.0D);
+         else
          this.level.addParticle(new ItemParticleData(ParticleTypes.ITEM, p_195062_1_), vector3d1.x, vector3d1.y, vector3d1.z, vector3d.x, vector3d.y + 0.05D, vector3d.z);
       }
 
@@ -2790,7 +_,28 @@
       } else {
          if (!this.useItem.isEmpty() && this.isUsingItem()) {
             this.triggerItemUseEffects(this.useItem, 16);
-            ItemStack itemstack = this.useItem.finishUsingItem(this.level, this);
+            ItemStack copy = this.useItem.copy();
+            ItemStack stack = net.minecraftforge.event.ForgeEventFactory.onItemUseFinish(this, copy, getUseItemRemainingTicks(), this.useItem.finishUsingItem(this.level, this));
+
+            // CraftBukkit start - fire PlayerItemConsumeEvent
+            ItemStack itemstack;
+            if (this instanceof ServerPlayerEntity) {
+               org.bukkit.inventory.ItemStack craftItem = CraftItemStack.asBukkitCopy(copy);
+               PlayerItemConsumeEvent event = new PlayerItemConsumeEvent((Player) this.getBukkitEntity(), craftItem);
+               level.getCBServer().getPluginManager().callEvent(event);
+
+               if (event.isCancelled()) {
+                  // Update client
+                  ((ServerPlayerEntity) this).getBukkitEntity().updateInventory();
+                  ((ServerPlayerEntity) this).getBukkitEntity().updateScaledHealth();
+                  return;
+               }
+               itemstack = (craftItem.equals(event.getItem())) ? stack : CraftItemStack.asNMSCopy(event.getItem()).finishUsingItem(level, this);
+            } else {
+               itemstack = stack;
+            }
+            // CraftBukkit end
+
             if (itemstack != this.useItem) {
                this.setItemInHand(hand, itemstack);
             }
@@ -2815,7 +_,11 @@
 
    public void releaseUsingItem() {
       if (!this.useItem.isEmpty()) {
+         if (!net.minecraftforge.event.ForgeEventFactory.onUseItemStop(this, useItem, this.getUseItemRemainingTicks())) {
+            ItemStack copy = this instanceof PlayerEntity ? useItem.copy() : null;
          this.useItem.releaseUsing(this.level, this, this.getUseItemRemainingTicks());
+           if (copy != null && useItem.isEmpty()) net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem((PlayerEntity)this, copy, getUsedItemHand());
+         }
          if (this.useItem.useOnRelease()) {
             this.updatingUsingItem();
          }
@@ -2863,6 +_,8 @@
       return this.fallFlyTicks;
    }
 
+   public PlayerTeleportEvent.TeleportCause defCause = PlayerTeleportEvent.TeleportCause.UNKNOWN;
+
    public boolean randomTeleport(double p_213373_1_, double p_213373_3_, double p_213373_5_, boolean p_213373_7_) {
       double d0 = this.getX();
       double d1 = this.getY();
@@ -2886,10 +_,31 @@
          }
 
          if (flag1) {
-            this.teleportTo(p_213373_1_, d3, p_213373_5_);
+            // first set position, to check if the place to teleport is valid
+            this.setPos(p_213373_1_, d3, p_213373_5_);
             if (world.noCollision(this) && !world.containsAnyLiquid(this.getBoundingBox())) {
                flag = true;
             }
+            // now revert and call event if the teleport place is valid
+            this.setPos(d0, d1, d2);
+            if (flag1) {
+               if (!(this instanceof ServerPlayerEntity)) {
+                  EntityTeleportEvent teleport = new EntityTeleportEvent(this.getBukkitEntity(), new Location(this.level.getWorld(), d0, d1, d2), new Location(this.level.getWorld(), p_213373_1_, p_213373_3_, p_213373_5_));
+                  this.level.getCBServer().getPluginManager().callEvent(teleport);
+                  if (!teleport.isCancelled()) {
+                     Location to = teleport.getTo();
+                     this.teleportTo(to.getX(), to.getY(), to.getZ());
+                  } else {
+                     return false;
+                  }
+               } else {
+                  // player teleport event is called in the underlining code
+                  if (((ServerPlayerEntity) this).connection.teleport(p_213373_1_, p_213373_3_, p_213373_5_, this.yRot, this.xRot, java.util.Collections.emptySet(), defCause)) {
+                     return false;
+                  }
+               }
+            }
+            // CraftBukkit end
          }
       }
 
@@ -2909,6 +_,14 @@
       }
    }
 
+   public Optional<Boolean> safeTeleport(double d0, double d1, double d2, boolean flag, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+      boolean safeTeleport;
+      defCause = cause;
+      safeTeleport = randomTeleport(d0, d1, d2, false);
+      defCause = PlayerTeleportEvent.TeleportCause.UNKNOWN;
+      return Optional.of(safeTeleport);
+   }
+
    public boolean isAffectedByPotions() {
       return true;
    }
@@ -2964,8 +_,8 @@
       }
 
       BlockState blockstate = this.level.getBlockState(p_213342_1_);
-      if (blockstate.getBlock() instanceof BedBlock) {
-         this.level.setBlock(p_213342_1_, blockstate.setValue(BedBlock.OCCUPIED, Boolean.valueOf(true)), 3);
+      if (blockstate.isBed(level, p_213342_1_, this)) {
+         blockstate.setBedOccupied(level, p_213342_1_, this, true);
       }
 
       this.setPose(Pose.SLEEPING);
@@ -2981,15 +_,15 @@
 
    private boolean checkBedExists() {
       return this.getSleepingPos().map((p_241350_1_) -> {
-         return this.level.getBlockState(p_241350_1_).getBlock() instanceof BedBlock;
+         return net.minecraftforge.event.ForgeEventFactory.fireSleepingLocationCheck(this, p_241350_1_);
       }).orElse(false);
    }
 
    public void stopSleeping() {
       this.getSleepingPos().filter(this.level::hasChunkAt).ifPresent((p_241348_1_) -> {
          BlockState blockstate = this.level.getBlockState(p_241348_1_);
-         if (blockstate.getBlock() instanceof BedBlock) {
-            this.level.setBlock(p_241348_1_, blockstate.setValue(BedBlock.OCCUPIED, Boolean.valueOf(false)), 3);
+         if (blockstate.isBed(level, p_241348_1_, this)) {
+            blockstate.setBedOccupied(level, p_241348_1_, this, false);
             Vector3d vector3d1 = BedBlock.findStandUpPosition(this.getType(), this.level, p_241348_1_, this.yRot).orElseGet(() -> {
                BlockPos blockpos = p_241348_1_.above();
                return new Vector3d((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.1D, (double)blockpos.getZ() + 0.5D);
@@ -3012,7 +_,9 @@
    @OnlyIn(Dist.CLIENT)
    public Direction getBedOrientation() {
       BlockPos blockpos = this.getSleepingPos().orElse((BlockPos)null);
-      return blockpos != null ? BedBlock.getBedOrientation(this.level, blockpos) : null;
+      if (blockpos == null) return Direction.UP;
+      BlockState state = this.level.getBlockState(blockpos);
+      return !state.isBed(level, blockpos, this) ? Direction.UP : state.getBedDirection(level, blockpos);
    }
 
    public boolean isInWall() {
@@ -3048,7 +_,7 @@
       if (item.isEdible()) {
          for(Pair<EffectInstance, Float> pair : item.getFoodProperties().getEffects()) {
             if (!p_213349_2_.isClientSide && pair.getFirst() != null && p_213349_2_.random.nextFloat() < pair.getSecond()) {
-               p_213349_3_.addEffect(new EffectInstance(pair.getFirst()));
+               p_213349_3_.addEffect(new EffectInstance(pair.getFirst()), Cause.FOOD); // CraftBukkit
             }
          }
       }
@@ -3082,6 +_,58 @@
       this.broadcastBreakEvent(p_213334_1_ == Hand.MAIN_HAND ? EquipmentSlotType.MAINHAND : EquipmentSlotType.OFFHAND);
    }
 
+   /* ==== FORGE START ==== */
+   /***
+    * Removes all potion effects that have curativeItem as a curative item for its effect
+    * @param curativeItem The itemstack we are using to cure potion effects
+    */
+   public boolean curePotionEffects(ItemStack curativeItem) {
+      if (this.level.isClientSide)
+         return false;
+      boolean ret = false;
+      Iterator<EffectInstance> itr = this.activeEffects.values().iterator();
+      while (itr.hasNext()) {
+         EffectInstance effect = itr.next();
+         if (effect.isCurativeItem(curativeItem) && !net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionRemoveEvent(this, effect))) {
+            this.onEffectRemoved(effect);
+            itr.remove();
+            ret = true;
+            this.effectsDirty = true;
+         }
+      }
+      return ret;
+   }
+
+   /**
+    * Returns true if the entity's rider (EntityPlayer) should face forward when mounted.
+    * currently only used in vanilla code by pigs.
+    *
+    * @param player The player who is riding the entity.
+    * @return If the player should orient the same direction as this entity.
+    */
+   public boolean shouldRiderFaceForward(PlayerEntity player) {
+      return this instanceof net.minecraft.entity.passive.PigEntity;
+   }
+
+   private final net.minecraftforge.common.util.LazyOptional<?>[] handlers = net.minecraftforge.items.wrapper.EntityEquipmentInvWrapper.create(this);
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (this.isAlive() && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
+         if (facing == null) return handlers[2].cast();
+         else if (facing.getAxis().isVertical()) return handlers[0].cast();
+         else if (facing.getAxis().isHorizontal()) return handlers[1].cast();
+      }
+      return super.getCapability(capability, facing);
+   }
+
+   @Override
+   protected void invalidateCaps() {
+      super.invalidateCaps();
+      for (int x = 0; x < handlers.length; x++)
+         handlers[x].invalidate();
+   }
+
    @OnlyIn(Dist.CLIENT)
    public AxisAlignedBB getBoundingBoxForCulling() {
       if (this.getItemBySlot(EquipmentSlotType.HEAD).getItem() == Items.DRAGON_HEAD) {
@@ -3091,4 +_,5 @@
          return super.getBoundingBoxForCulling();
       }
    }
+
 }
