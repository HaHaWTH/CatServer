--- a/net/minecraft/entity/monster/ZombieEntity.java
+++ b/net/minecraft/entity/monster/ZombieEntity.java
@@ -47,6 +_,7 @@
 import net.minecraft.network.datasync.DataSerializers;
 import net.minecraft.network.datasync.EntityDataManager;
 import net.minecraft.pathfinding.GroundPathNavigator;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EntityPredicates;
@@ -64,20 +_,24 @@
 import net.minecraft.world.World;
 import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.spawner.WorldEntitySpawner;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
 
 public class ZombieEntity extends MonsterEntity {
    private static final UUID SPEED_MODIFIER_BABY_UUID = UUID.fromString("B9766B59-9566-4402-BC1F-2EE2A276D836");
    private static final AttributeModifier SPEED_MODIFIER_BABY = new AttributeModifier(SPEED_MODIFIER_BABY_UUID, "Baby speed boost", 0.5D, AttributeModifier.Operation.MULTIPLY_BASE);
    private static final DataParameter<Boolean> DATA_BABY_ID = EntityDataManager.defineId(ZombieEntity.class, DataSerializers.BOOLEAN);
    private static final DataParameter<Integer> DATA_SPECIAL_TYPE_ID = EntityDataManager.defineId(ZombieEntity.class, DataSerializers.INT);
-   private static final DataParameter<Boolean> DATA_DROWNED_CONVERSION_ID = EntityDataManager.defineId(ZombieEntity.class, DataSerializers.BOOLEAN);
+   public static final DataParameter<Boolean> DATA_DROWNED_CONVERSION_ID = EntityDataManager.defineId(ZombieEntity.class, DataSerializers.BOOLEAN);
    private static final Predicate<Difficulty> DOOR_BREAKING_PREDICATE = (p_213697_0_) -> {
       return p_213697_0_ == Difficulty.HARD;
    };
    private final BreakDoorGoal breakDoorGoal = new BreakDoorGoal(this, DOOR_BREAKING_PREDICATE);
    private boolean canBreakDoors;
    private int inWaterTime;
-   private int conversionTime;
+   public int conversionTime;
+   private int lastTick = MinecraftServer.currentTick;
 
    public ZombieEntity(EntityType<? extends ZombieEntity> p_i48549_1_, World p_i48549_2_) {
       super(p_i48549_1_, p_i48549_2_);
@@ -100,7 +_,7 @@
       this.goalSelector.addGoal(7, new WaterAvoidingRandomWalkingGoal(this, 1.0D));
       this.targetSelector.addGoal(1, (new HurtByTargetGoal(this)).setAlertOthers(ZombifiedPiglinEntity.class));
       this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, PlayerEntity.class, true));
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillagerEntity.class, false));
+      if ( level.spigotConfig.zombieAggressiveTowardsVillager ) this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillagerEntity.class, false)); // Spigot
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolemEntity.class, true));
       this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, TurtleEntity.class, 10, true, false, TurtleEntity.BABY_ON_LAND_SELECTOR));
    }
@@ -185,8 +_,12 @@
    public void tick() {
       if (!this.level.isClientSide && this.isAlive() && !this.isNoAi()) {
          if (this.isUnderWaterConverting()) {
-            --this.conversionTime;
-            if (this.conversionTime < 0) {
+            // CraftBukkit start - Use wall time instead of ticks for conversion
+            int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+            this.lastTick = MinecraftServer.currentTick;
+            this.conversionTime -= elapsedTicks;
+            // CraftBukkit end
+            if (this.conversionTime < 0 && net.minecraftforge.event.ForgeEventFactory.canLivingConvert(this, EntityType.DROWNED, (timer) -> this.conversionTime = timer)) {
                this.doUnderWaterConversion();
             }
          } else if (this.convertsInWater()) {
@@ -202,6 +_,7 @@
       }
 
       super.tick();
+      this.lastTick = MinecraftServer.currentTick;
    }
 
    public void aiStep() {
@@ -230,7 +_,8 @@
       super.aiStep();
    }
 
-   private void startUnderWaterConversion(int p_204704_1_) {
+   public void startUnderWaterConversion(int p_204704_1_) {
+      this.lastTick = MinecraftServer.currentTick; // CraftBukkit
       this.conversionTime = p_204704_1_;
       this.getEntityData().set(DATA_DROWNED_CONVERSION_ID, true);
    }
@@ -248,6 +_,7 @@
       if (zombieentity != null) {
          zombieentity.handleAttributes(zombieentity.level.getCurrentDifficultyAt(zombieentity.blockPosition()).getSpecialMultiplier());
          zombieentity.setCanBreakDoors(zombieentity.supportsBreakDoorGoal() && this.canBreakDoors());
+         net.minecraftforge.event.ForgeEventFactory.onLivingConvert(this, zombieentity);
       }
 
    }
@@ -268,11 +_,15 @@
             livingentity = (LivingEntity)p_70097_1_.getEntity();
          }
 
-         if (livingentity != null && this.level.getDifficulty() == Difficulty.HARD && (double)this.random.nextFloat() < this.getAttributeValue(Attributes.SPAWN_REINFORCEMENTS_CHANCE) && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
             int i = MathHelper.floor(this.getX());
             int j = MathHelper.floor(this.getY());
             int k = MathHelper.floor(this.getZ());
-            ZombieEntity zombieentity = new ZombieEntity(this.level);
+
+         net.minecraftforge.event.entity.living.ZombieEvent.SummonAidEvent event = net.minecraftforge.event.ForgeEventFactory.fireZombieSummonAid(this, level, i, j, k, livingentity, this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).getValue());
+         if (event.getResult() == net.minecraftforge.eventbus.api.Event.Result.DENY) return true;
+         if (event.getResult() == net.minecraftforge.eventbus.api.Event.Result.ALLOW  ||
+            livingentity != null && this.level.getDifficulty() == Difficulty.HARD && (double)this.random.nextFloat() < this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).getValue() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
+            ZombieEntity zombieentity = event.getCustomSummonedAid() != null && event.getResult() == net.minecraftforge.eventbus.api.Event.Result.ALLOW ? event.getCustomSummonedAid() : EntityType.ZOMBIE.create(this.level);
 
             for(int l = 0; l < 50; ++l) {
                int i1 = i + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
@@ -284,9 +_,10 @@
                if (WorldEntitySpawner.isSpawnPositionOk(entityspawnplacementregistry$placementtype, this.level, blockpos, entitytype) && EntitySpawnPlacementRegistry.checkSpawnRules(entitytype, serverworld, SpawnReason.REINFORCEMENT, blockpos, this.level.random)) {
                   zombieentity.setPos((double)i1, (double)j1, (double)k1);
                   if (!this.level.hasNearbyAlivePlayer((double)i1, (double)j1, (double)k1, 7.0D) && this.level.isUnobstructed(zombieentity) && this.level.noCollision(zombieentity) && !this.level.containsAnyLiquid(zombieentity.getBoundingBox())) {
+                     if (livingentity != null)
                      zombieentity.setTarget(livingentity);
                      zombieentity.finalizeSpawn(serverworld, this.level.getCurrentDifficultyAt(zombieentity.blockPosition()), SpawnReason.REINFORCEMENT, (ILivingEntityData)null, (CompoundNBT)null);
-                     serverworld.addFreshEntityWithPassengers(zombieentity);
+                     serverworld.addAllEntities(zombieentity, CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); // CraftBukkit
                      this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).addPermanentModifier(new AttributeModifier("Zombie reinforcement caller charge", (double)-0.05F, AttributeModifier.Operation.ADDITION));
                      zombieentity.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).addPermanentModifier(new AttributeModifier("Zombie reinforcement callee charge", (double)-0.05F, AttributeModifier.Operation.ADDITION));
                      break;
@@ -304,7 +_,15 @@
       if (flag) {
          float f = this.level.getCurrentDifficultyAt(this.blockPosition()).getEffectiveDifficulty();
          if (this.getMainHandItem().isEmpty() && this.isOnFire() && this.random.nextFloat() < f * 0.3F) {
-            p_70652_1_.setSecondsOnFire(2 * (int)f);
+            // CraftBukkit start
+            EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), p_70652_1_.getBukkitEntity(), 2 * (int) f); // PAIL: fixme
+            this.level.getCBServer().getPluginManager().callEvent(event);
+            if (!event.isCancelled()) {
+               p_70652_1_.putCallCombustEvent(false);
+               p_70652_1_.setSecondsOnFire(event.getDuration());
+               p_70652_1_.putCallCombustEvent(true);
+            }
+            // CraftBukkit end
          }
       }
 
@@ -369,18 +_,24 @@
 
    public void killed(ServerWorld p_241847_1_, LivingEntity p_241847_2_) {
       super.killed(p_241847_1_, p_241847_2_);
-      if ((p_241847_1_.getDifficulty() == Difficulty.NORMAL || p_241847_1_.getDifficulty() == Difficulty.HARD) && p_241847_2_ instanceof VillagerEntity) {
+      if ((p_241847_1_.getDifficulty() == Difficulty.NORMAL || p_241847_1_.getDifficulty() == Difficulty.HARD) && p_241847_2_ instanceof VillagerEntity && net.minecraftforge.event.ForgeEventFactory.canLivingConvert(p_241847_2_, EntityType.ZOMBIE_VILLAGER, (timer) -> {})) {
          if (p_241847_1_.getDifficulty() != Difficulty.HARD && this.random.nextBoolean()) {
             return;
          }
 
          VillagerEntity villagerentity = (VillagerEntity)p_241847_2_;
-         ZombieVillagerEntity zombievillagerentity = villagerentity.convertTo(EntityType.ZOMBIE_VILLAGER, false);
+         // CraftBukkit start
+         ZombieVillagerEntity zombievillagerentity = villagerentity.convertTo(EntityType.ZOMBIE_VILLAGER, false, EntityTransformEvent.TransformReason.INFECTION, CreatureSpawnEvent.SpawnReason.INFECTION);
+         if (zombievillagerentity == null) {
+            return;
+         }
+         // CraftBukkit end
          zombievillagerentity.finalizeSpawn(p_241847_1_, p_241847_1_.getCurrentDifficultyAt(zombievillagerentity.blockPosition()), SpawnReason.CONVERSION, new ZombieEntity.GroupData(false, true), (CompoundNBT)null);
          zombievillagerentity.setVillagerData(villagerentity.getVillagerData());
          zombievillagerentity.setGossips(villagerentity.getGossips().store(NBTDynamicOps.INSTANCE).getValue());
          zombievillagerentity.setTradeOffers(villagerentity.getOffers().createTag());
          zombievillagerentity.setVillagerXp(villagerentity.getVillagerXp());
+         net.minecraftforge.event.ForgeEventFactory.onLivingConvert(p_241847_2_, zombievillagerentity);
          if (!this.isSilent()) {
             p_241847_1_.levelEvent((PlayerEntity)null, 1026, this.blockPosition(), 0);
          }
@@ -423,7 +_,7 @@
                   chickenentity1.finalizeSpawn(p_213386_1_, p_213386_2_, SpawnReason.JOCKEY, (ILivingEntityData)null, (CompoundNBT)null);
                   chickenentity1.setChickenJockey(true);
                   this.startRiding(chickenentity1);
-                  p_213386_1_.addFreshEntity(chickenentity1);
+                  p_213386_1_.addEntity(chickenentity1, CreatureSpawnEvent.SpawnReason.MOUNT);
                }
             }
          }
@@ -448,7 +_,7 @@
    }
 
    public static boolean getSpawnAsBabyOdds(Random p_241399_0_) {
-      return p_241399_0_.nextFloat() < 0.05F;
+      return p_241399_0_.nextFloat() < net.minecraftforge.common.ForgeConfig.SERVER.zombieBabyChance.get();
    }
 
    protected void handleAttributes(float p_207304_1_) {
@@ -468,7 +_,7 @@
    }
 
    protected void randomizeReinforcementsChance() {
-      this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).setBaseValue(this.random.nextDouble() * (double)0.1F);
+      this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).setBaseValue(this.random.nextDouble() * net.minecraftforge.common.ForgeConfig.SERVER.zombieBaseSummonChance.get());
    }
 
    public double getMyRidingOffset() {
