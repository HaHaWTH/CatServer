--- a/net/minecraft/entity/monster/piglin/PiglinEntity.java
+++ b/net/minecraft/entity/monster/piglin/PiglinEntity.java
@@ -2,9 +_,9 @@
 
 import com.google.common.collect.ImmutableList;
 import com.mojang.serialization.Dynamic;
-import java.util.List;
-import java.util.Random;
-import java.util.UUID;
+
+import java.util.*;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
@@ -32,19 +_,17 @@
 import net.minecraft.entity.projectile.ProjectileEntity;
 import net.minecraft.inventory.EquipmentSlotType;
 import net.minecraft.inventory.Inventory;
-import net.minecraft.item.ItemStack;
-import net.minecraft.item.Items;
-import net.minecraft.item.ShootableItem;
+import net.minecraft.item.*;
 import net.minecraft.nbt.CompoundNBT;
+import net.minecraft.nbt.INBT;
+import net.minecraft.nbt.ListNBT;
+import net.minecraft.nbt.StringNBT;
 import net.minecraft.network.datasync.DataParameter;
 import net.minecraft.network.datasync.DataSerializers;
 import net.minecraft.network.datasync.EntityDataManager;
-import net.minecraft.util.ActionResultType;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.Hand;
-import net.minecraft.util.SoundEvent;
-import net.minecraft.util.SoundEvents;
+import net.minecraft.util.*;
 import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.registry.Registry;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.GameRules;
 import net.minecraft.world.IServerWorld;
@@ -58,11 +_,17 @@
    private static final DataParameter<Boolean> DATA_IS_DANCING = EntityDataManager.defineId(PiglinEntity.class, DataSerializers.BOOLEAN);
    private static final UUID SPEED_MODIFIER_BABY_UUID = UUID.fromString("766bfa64-11f3-11ea-8d71-362b9e155667");
    private static final AttributeModifier SPEED_MODIFIER_BABY = new AttributeModifier(SPEED_MODIFIER_BABY_UUID, "Baby speed boost", (double)0.2F, AttributeModifier.Operation.MULTIPLY_BASE);
-   private final Inventory inventory = new Inventory(8);
-   private boolean cannotHunt = false;
+   public final Inventory inventory = new Inventory(8); // PAIL private -> public
+   public boolean cannotHunt = false;
    protected static final ImmutableList<SensorType<? extends Sensor<? super PiglinEntity>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.HURT_BY, SensorType.PIGLIN_SPECIFIC_SENSOR);
    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.LIVING_ENTITIES, MemoryModuleType.VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_TARGETABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.PATH, MemoryModuleType.ANGRY_AT, MemoryModuleType.UNIVERSAL_ANGER, MemoryModuleType.AVOID_TARGET, MemoryModuleType.ADMIRING_ITEM, MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, MemoryModuleType.ADMIRING_DISABLED, MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, MemoryModuleType.CELEBRATE_LOCATION, MemoryModuleType.DANCING, MemoryModuleType.HUNTED_RECENTLY, MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, MemoryModuleType.RIDE_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.NEAREST_REPELLENT);
 
+   // CraftBukkit start - Custom bartering and interest list
+   public Set<Item> allowedBarterItems = new HashSet<>();
+   public Set<Item> interestItems = new HashSet<>();
+   // CraftBukkit end
+
+
    public PiglinEntity(EntityType<? extends AbstractPiglinEntity> p_i231570_1_, World p_i231570_2_) {
       super(p_i231570_1_, p_i231570_2_);
       this.xpReward = 5;
@@ -79,6 +_,16 @@
       }
 
       p_213281_1_.put("Inventory", this.inventory.createTag());
+
+      // CraftBukkit start
+      ListNBT barterList = new ListNBT();
+      allowedBarterItems.stream().map(Registry.ITEM::getKey).map(ResourceLocation::toString).map(StringNBT::valueOf).forEach(barterList::add);
+      p_213281_1_.put("Bukkit.BarterList", barterList);
+      ListNBT interestList = new ListNBT();
+      interestItems.stream().map(Registry.ITEM::getKey).map(ResourceLocation::toString).map(StringNBT::valueOf).forEach(interestList::add);
+      p_213281_1_.put("Bukkit.InterestList", interestList);
+      // CraftBukkit end
+
    }
 
    public void readAdditionalSaveData(CompoundNBT p_70037_1_) {
@@ -86,6 +_,12 @@
       this.setBaby(p_70037_1_.getBoolean("IsBaby"));
       this.setCannotHunt(p_70037_1_.getBoolean("CannotHunt"));
       this.inventory.fromTag(p_70037_1_.getList("Inventory", 10));
+
+      // CraftBukkit start
+      this.allowedBarterItems = p_70037_1_.getList("Bukkit.BarterList", 8).stream().map(INBT::getAsString).map(ResourceLocation::tryParse).map(Registry.ITEM::get).collect(Collectors.toCollection(HashSet::new));
+      this.interestItems = p_70037_1_.getList("Bukkit.InterestList", 8).stream().map(INBT::getAsString).map(ResourceLocation::tryParse).map(Registry.ITEM::get).collect(Collectors.toCollection(HashSet::new));
+      // CraftBukkit end
+
    }
 
    protected void dropCustomDeathLoot(DamageSource p_213333_1_, int p_213333_2_, boolean p_213333_3_) {
@@ -265,7 +_,7 @@
       } else if (this.isChargingCrossbow()) {
          return PiglinAction.CROSSBOW_CHARGE;
       } else {
-         return this.isAggressive() && this.isHolding(Items.CROSSBOW) ? PiglinAction.CROSSBOW_HOLD : PiglinAction.DEFAULT;
+         return this.isAggressive() && this.isHolding(item -> item instanceof CrossbowItem) ? PiglinAction.CROSSBOW_HOLD : PiglinAction.DEFAULT;
       }
    }
 
@@ -307,7 +_,7 @@
    }
 
    protected void holdInOffHand(ItemStack p_234439_1_) {
-      if (p_234439_1_.getItem() == PiglinTasks.BARTERING_ITEM) {
+      if (p_234439_1_.isPiglinCurrency() || allowedBarterItems.contains(p_234439_1_.getItem())) { // CraftBukkit - Changes to accept custom payment items
          this.setItemSlot(EquipmentSlotType.OFFHAND, p_234439_1_);
          this.setGuaranteedDrop(EquipmentSlotType.OFFHAND);
       } else {
@@ -317,7 +_,7 @@
    }
 
    public boolean wantsToPickUp(ItemStack p_230293_1_) {
-      return this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.canPickUpLoot() && PiglinTasks.wantsToPickup(this, p_230293_1_);
+      return net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.level, this) && ((LivingEntity)this).canPickUpLoot /* LoliServer: Cast to LivingEntity to solve NoSuchFieldError */ && PiglinTasks.wantsToPickup(this, p_230293_1_);
    }
 
    protected boolean canReplaceCurrentItem(ItemStack p_234440_1_) {
