--- a/net/minecraft/entity/monster/SlimeEntity.java
+++ b/net/minecraft/entity/monster/SlimeEntity.java
@@ -44,6 +_,11 @@
 import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
 import net.minecraft.world.biome.Biomes;
+import net.minecraft.world.server.ServerWorld;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
+import org.bukkit.event.entity.SlimeSplitEvent;
 
 public class SlimeEntity extends MobEntity implements IMob {
    private static final DataParameter<Integer> ID_SIZE = EntityDataManager.defineId(SlimeEntity.class, DataSerializers.INT);
@@ -73,7 +_,7 @@
       this.entityData.define(ID_SIZE, 1);
    }
 
-   protected void setSize(int p_70799_1_, boolean p_70799_2_) {
+   public void setSize(int p_70799_1_, boolean p_70799_2_) {
       this.entityData.set(ID_SIZE, p_70799_1_);
       this.reapplyPosition();
       this.refreshDimensions();
@@ -127,6 +_,7 @@
       if (this.onGround && !this.wasOnGround) {
          int i = this.getSize();
 
+         if (spawnCustomParticles()) i = 0; // don't spawn particles if it's handled by the implementation itself
          for(int j = 0; j < i * 8; ++j) {
             float f = this.random.nextFloat() * ((float)Math.PI * 2F);
             float f1 = this.random.nextFloat() * 0.5F + 0.5F;
@@ -178,15 +_,28 @@
       return (EntityType<? extends SlimeEntity>)super.getType();
    }
 
-   public void remove() {
+   @Override
+   public void remove(boolean keepData) {
       int i = this.getSize();
-      if (!this.level.isClientSide && i > 1 && this.isDeadOrDying()) {
+      if (!this.level.isClientSide && i > 1 && this.isDeadOrDying() && !removed) {
          ITextComponent itextcomponent = this.getCustomName();
          boolean flag = this.isNoAi();
          float f = (float)i / 4.0F;
          int j = i / 2;
          int k = 2 + this.random.nextInt(3);
 
+         // CraftBukkit start
+         SlimeSplitEvent event = new SlimeSplitEvent((org.bukkit.entity.Slime) this.getBukkitEntity(), k);
+         this.level.getCBServer().getPluginManager().callEvent(event);
+
+         if (!event.isCancelled() && event.getCount() > 0) {
+            k = event.getCount();
+         } else {
+            super.remove(keepData);
+            return;
+         }
+         // CraftBukkit end
+
          for(int l = 0; l < k; ++l) {
             float f1 = ((float)(l % 2) - 0.5F) * f;
             float f2 = ((float)(l / 2) - 0.5F) * f;
@@ -200,11 +_,20 @@
             slimeentity.setInvulnerable(this.isInvulnerable());
             slimeentity.setSize(j, true);
             slimeentity.moveTo(this.getX() + (double)f1, this.getY() + 0.5D, this.getZ() + (double)f2, this.random.nextFloat() * 360.0F, 0.0F);
-            this.level.addFreshEntity(slimeentity);
+            // CraftBukkit start
+            if (CraftEventFactory.callEntityTransformEvent(this, slimeentity, EntityTransformEvent.TransformReason.SPLIT).isCancelled()) {
+               return;
+            }
+            // Fixed Pehkui Startup
+            if (level instanceof ServerWorld) {
+               ((ServerWorld) this.level).pehkuiSpawnReason = CreatureSpawnEvent.SpawnReason.SLIME_SPLIT;
+               this.level.addFreshEntity(slimeentity);
+               ((ServerWorld) this.level).pehkuiSpawnReason = CreatureSpawnEvent.SpawnReason.DEFAULT;
+            }
          }
       }
 
-      super.remove();
+      super.remove(keepData);
    }
 
    public void push(Entity p_70108_1_) {
@@ -257,7 +_,7 @@
       return this.isTiny() ? SoundEvents.SLIME_SQUISH_SMALL : SoundEvents.SLIME_SQUISH;
    }
 
-   protected ResourceLocation getDefaultLootTable() {
+   public ResourceLocation getDefaultLootTable() {
       return this.getSize() == 1 ? this.getType().getDefaultLootTable() : LootTables.EMPTY;
    }
 
@@ -272,7 +_,7 @@
          }
 
          ChunkPos chunkpos = new ChunkPos(p_223366_3_);
-         boolean flag = SharedSeedRandom.seedSlimeChunk(chunkpos.x, chunkpos.z, ((ISeedReader)p_223366_1_).getSeed(), 987234911L).nextInt(10) == 0;
+         boolean flag = SharedSeedRandom.seedSlimeChunk(chunkpos.x, chunkpos.z, ((ISeedReader)p_223366_1_).getSeed(), p_223366_1_.getMinecraftWorld().spigotConfig.slimeSeed).nextInt(10) == 0; // Spigot
          if (p_223366_4_.nextInt(10) == 0 && flag && p_223366_3_.getY() < 40) {
             return checkMobSpawnRules(p_223366_0_, p_223366_1_, p_223366_2_, p_223366_3_, p_223366_4_);
          }
@@ -323,6 +_,12 @@
    public EntitySize getDimensions(Pose p_213305_1_) {
       return super.getDimensions(p_213305_1_).scale(0.255F * (float)this.getSize());
    }
+
+   /**
+    * Called when the slime spawns particles on landing, see onUpdate.
+    * Return true to prevent the spawning of the default particles.
+    */
+   protected boolean spawnCustomParticles() { return false; }
 
    static class AttackGoal extends Goal {
       private final SlimeEntity slime;
