--- a/net/minecraft/entity/boss/dragon/EnderDragonEntity.java
+++ b/net/minecraft/entity/boss/dragon/EnderDragonEntity.java
@@ -21,16 +_,23 @@
 import net.minecraft.entity.item.ExperienceOrbEntity;
 import net.minecraft.entity.monster.IMob;
 import net.minecraft.entity.player.PlayerEntity;
+import net.minecraft.entity.player.ServerPlayerEntity;
+import net.minecraft.item.ItemStack;
+import net.minecraft.loot.LootContext;
+import net.minecraft.loot.LootParameters;
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.network.datasync.DataParameter;
 import net.minecraft.network.datasync.DataSerializers;
 import net.minecraft.network.datasync.EntityDataManager;
+import net.minecraft.network.play.server.SPlaySoundEventPacket;
 import net.minecraft.particles.ParticleTypes;
 import net.minecraft.pathfinding.Path;
 import net.minecraft.pathfinding.PathHeap;
 import net.minecraft.pathfinding.PathPoint;
 import net.minecraft.potion.EffectInstance;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EntityDamageSource;
 import net.minecraft.util.EntityPredicates;
@@ -41,6 +_,8 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.vector.Vector3d;
+import net.minecraft.world.Explosion;
+import net.minecraft.world.Explosion.Mode;
 import net.minecraft.world.GameRules;
 import net.minecraft.world.World;
 import net.minecraft.world.end.DragonFightManager;
@@ -51,6 +_,10 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.v1_16_R3.block.CraftBlock;
+import org.bukkit.event.entity.EntityExplodeEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
 
 public class EnderDragonEntity extends MobEntity implements IMob {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -58,7 +_,7 @@
    private static final EntityPredicate CRYSTAL_DESTROY_TARGETING = (new EntityPredicate()).range(64.0D);
    public final double[][] positions = new double[64][3];
    public int posPointer = -1;
-   private final EnderDragonPartEntity[] subEntities;
+   public final EnderDragonPartEntity[] subEntities; // private->public CraftBukkit
    public final EnderDragonPartEntity head;
    private final EnderDragonPartEntity neck;
    private final EnderDragonPartEntity body;
@@ -83,6 +_,8 @@
    private final int[] nodeAdjacency = new int[24];
    private final PathHeap openSet = new PathHeap();
 
+   private Explosion explosionSource = new Explosion(null, this, null, null, Double.NaN, Double.NaN, Double.NaN, Float.NaN, true, Mode.DESTROY); // CraftBukkit - reusable source for CraftTNTPrimed.getSource()
+
    public EnderDragonEntity(EntityType<? extends EnderDragonEntity> p_i50230_1_, World p_i50230_2_) {
       super(EntityType.ENDER_DRAGON, p_i50230_2_);
       this.head = new EnderDragonPartEntity(this, "head", 1.0F, 1.0F);
@@ -104,6 +_,14 @@
       }
 
       this.phaseManager = new PhaseManager(this);
+      this.setId(ENTITY_COUNTER.getAndAdd(this.subEntities.length + 1) + 1); // Forge: Fix MC-158205: Make sure part ids are successors of parent mob id
+   }
+
+   @Override
+   public void setId(int p_145769_1_) {
+      super.setId(p_145769_1_);
+      for(int i = 0; i < this.subEntities.length; ++i) // Forge: Fix MC-158205: Set part ids to successors of parent mob id
+         this.subEntities[i].setId(p_145769_1_ + i + 1);
    }
 
    public static AttributeModifierMap.MutableAttribute createAttributes() {
@@ -210,7 +_,7 @@
                }
 
                Vector3d vector3d = iphase.getFlyTargetLocation();
-               if (vector3d != null) {
+               if (vector3d != null && iphase.getPhase() != PhaseType.HOVERING) { // CraftBukkit - Don't move when hovering
                   double d8 = vector3d.x - this.getX();
                   double d9 = vector3d.y - this.getY();
                   double d10 = vector3d.z - this.getZ();
@@ -337,7 +_,14 @@
          if (this.nearestCrystal.removed) {
             this.nearestCrystal = null;
          } else if (this.tickCount % 10 == 0 && this.getHealth() < this.getMaxHealth()) {
-            this.setHealth(this.getHealth() + 1.0F);
+            // CraftBukkit start
+            EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), 1.0f, RegainReason.ENDER_CRYSTAL);
+            this.level.getCBServer().getPluginManager().callEvent(event);
+
+            if(!event.isCancelled()){
+               this.setHealth((float) (this.getHealth() + event.getAmount()));
+            }
+            // CraftBukkit event
          }
       }
 
@@ -402,15 +_,22 @@
       boolean flag = false;
       boolean flag1 = false;
 
+      // CraftBukkit start - Create a list to hold all the destroyed blocks
+      List<org.bukkit.block.Block> destroyedBlocks = new java.util.ArrayList<>();
+      // CraftBukkit end
+
       for(int k1 = i; k1 <= l; ++k1) {
          for(int l1 = j; l1 <= i1; ++l1) {
             for(int i2 = k; i2 <= j1; ++i2) {
                BlockPos blockpos = new BlockPos(k1, l1, i2);
                BlockState blockstate = this.level.getBlockState(blockpos);
                Block block = blockstate.getBlock();
-               if (!blockstate.isAir() && blockstate.getMaterial() != Material.FIRE) {
-                  if (this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && !BlockTags.DRAGON_IMMUNE.contains(block)) {
-                     flag1 = this.level.removeBlock(blockpos, false) || flag1;
+               if (!blockstate.isAir(this.level, blockpos) && blockstate.getMaterial() != Material.FIRE) {
+                  if (net.minecraftforge.common.ForgeHooks.canEntityDestroy(this.level, blockpos, this) && !BlockTags.DRAGON_IMMUNE.contains(block)) {
+                     // CraftBukkit start - Add blocks to list rather than destroying them
+                     flag1 = true;
+                     destroyedBlocks.add(CraftBlock.at(level, blockpos));
+                     // CraftBukkit end
                   } else {
                      flag = true;
                   }
@@ -419,6 +_,44 @@
          }
       }
 
+      // CraftBukkit start - Set off an EntityExplodeEvent for the dragon exploding all these blocks
+      // SPIGOT-4882: don't fire event if nothing hit
+      if (!flag1) {
+         return flag;
+      }
+      org.bukkit.entity.Entity bukkitEntity = this.getBukkitEntity();
+      EntityExplodeEvent event = new EntityExplodeEvent(bukkitEntity, bukkitEntity.getLocation(), destroyedBlocks, 0F);
+      bukkitEntity.getServer().getPluginManager().callEvent(event);
+      if(event.isCancelled()){
+         // This flag literally means 'Dragon hit something hard' (Obsidian, White Stone or Bedrock) and will cause the dragon to slow down.
+         // We should consider adding an event extension for it, or perhaps returning true if the event is cancelled.
+         return flag;
+      }else if(event.getYield() == 0F){
+         // Yield zero ==> no drops
+         event.blockList().forEach(block -> this.level.removeBlock(new BlockPos(block.getX(), block.getY(), block.getZ()), false));
+      } else {
+         for(org.bukkit.block.Block block : event.blockList()){
+            org.bukkit.Material blockId = block.getType();
+            if(blockId.isAir()){
+               continue;
+            }
+
+            CraftBlock craftBlock = ((CraftBlock) block);
+            BlockPos blockPos = craftBlock.getPosition();
+
+            Block nmsBlock = craftBlock.getNMS().getBlock();
+            if(nmsBlock.dropFromExplosion(explosionSource)){
+               TileEntity tileEntity = nmsBlock.isEntityBlock() ? this.level.getBlockEntity(blockPos) : null;
+               LootContext.Builder builder = new LootContext.Builder((ServerWorld) level).withRandom(level.random).withParameter(LootParameters.POSITION, blockPos).withParameter(LootParameters.TOOL, ItemStack.EMPTY).withParameter(LootParameters.EXPLOSION_RADIUS, 1.0F /event.getYield()).withOptionalParameter(LootParameters.BLOCK_ENTITY, tileEntity);
+               craftBlock.getNMS().getDrops(builder).forEach(itemStack -> Block.popResource(level, blockPos, itemStack));
+               craftBlock.getNMS().spawnAfterBreak((ServerWorld) level, blockPos, ItemStack.EMPTY);
+            }
+
+            this.level.removeBlock(blockPos, false);
+         }
+      }
+      // CraftBukkit end
+
       if (flag1) {
          BlockPos blockpos1 = new BlockPos(i + this.random.nextInt(l - i + 1), j + this.random.nextInt(i1 - j + 1), k + this.random.nextInt(j1 - k + 1));
          this.level.levelEvent(2008, blockpos1, 0);
@@ -507,7 +_,24 @@
          }
 
          if (this.dragonDeathTime == 1 && !this.isSilent()) {
-            this.level.globalLevelEvent(1028, this.blockPosition(), 0);
+            // CraftBukkit start - Use relative location for far away sounds
+            // this.world.playBroadcastSound(1028, this.getPosition(), 0);
+            int viewDistance = ((ServerWorld) this.level).getCBServer().getViewDistance() * 16;
+            for (ServerPlayerEntity player : (List<ServerPlayerEntity>) MinecraftServer.getServer().getPlayerList().players) {
+               double deltaX = this.getX() - player.getX();
+               double deltaZ = this.getZ() - player.getZ();
+               double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
+               if ( level.spigotConfig.dragonDeathSoundRadius > 0 && distanceSquared > level.spigotConfig.dragonDeathSoundRadius * level.spigotConfig.dragonDeathSoundRadius ) continue; // Spigot
+               if (distanceSquared > viewDistance * viewDistance) {
+                  double deltaLength = Math.sqrt(distanceSquared);
+                  double relativeX = player.getX() + (deltaX / deltaLength) * viewDistance;
+                  double relativeZ = player.getZ() + (deltaZ / deltaLength) * viewDistance;
+                  player.connection.send(new SPlaySoundEventPacket(1028, new BlockPos((int) relativeX, (int) this.getY(), (int) relativeZ), 0, true));
+               } else {
+                  player.connection.send(new SPlaySoundEventPacket(1028, new BlockPos((int) this.getX(), (int) this.getY(), (int) this.getZ()), 0, true));
+               }
+            }
+            // CraftBukkit end
          }
       }
 
@@ -712,6 +_,7 @@
    public void addAdditionalSaveData(CompoundNBT p_213281_1_) {
       super.addAdditionalSaveData(p_213281_1_);
       p_213281_1_.putInt("DragonPhase", this.phaseManager.getCurrentPhase().getPhase().getId());
+      p_213281_1_.putInt("Paper.DeathTick", this.dragonDeathTime); // Paper
    }
 
    public void readAdditionalSaveData(CompoundNBT p_70037_1_) {
@@ -719,7 +_,7 @@
       if (p_70037_1_.contains("DragonPhase")) {
          this.phaseManager.setPhase(PhaseType.getById(p_70037_1_.getInt("DragonPhase")));
       }
-
+      this.dragonDeathTime = p_70037_1_.getInt("Paper.DeathTick"); // Paper
    }
 
    public void checkDespawn() {
@@ -841,5 +_,15 @@
 
    public boolean canChangeDimensions() {
       return false;
+   }
+
+   @Override
+   public boolean isMultipartEntity() {
+      return true;
+   }
+
+   @Override
+   public net.minecraftforge.entity.PartEntity<?>[] getParts() {
+      return this.subEntities;
    }
 }
