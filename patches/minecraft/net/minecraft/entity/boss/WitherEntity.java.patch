--- a/net/minecraft/entity/boss/WitherEntity.java
+++ b/net/minecraft/entity/boss/WitherEntity.java
@@ -6,6 +_,7 @@
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.block.BlockState;
+import net.minecraft.block.Blocks;
 import net.minecraft.entity.CreatureAttribute;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityPredicate;
@@ -34,9 +_,11 @@
 import net.minecraft.network.datasync.DataParameter;
 import net.minecraft.network.datasync.DataSerializers;
 import net.minecraft.network.datasync.EntityDataManager;
+import net.minecraft.network.play.server.SPlaySoundEventPacket;
 import net.minecraft.particles.ParticleTypes;
 import net.minecraft.potion.EffectInstance;
 import net.minecraft.potion.Effects;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.SoundEvent;
@@ -48,11 +_,16 @@
 import net.minecraft.world.BossInfo;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.Explosion;
-import net.minecraft.world.GameRules;
 import net.minecraft.world.World;
 import net.minecraft.world.server.ServerBossInfo;
+import net.minecraft.world.server.ServerWorld;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
 
 @OnlyIn(
    value = Dist.CLIENT,
@@ -71,7 +_,7 @@
    private final int[] nextHeadUpdate = new int[2];
    private final int[] idleHeadUpdates = new int[2];
    private int destroyBlocksTick;
-   private final ServerBossInfo bossEvent = (ServerBossInfo)(new ServerBossInfo(this.getDisplayName(), BossInfo.Color.PURPLE, BossInfo.Overlay.PROGRESS)).setDarkenScreen(true);
+   public final ServerBossInfo bossEvent = (ServerBossInfo)(new ServerBossInfo(this.getDisplayName(), BossInfo.Color.PURPLE, BossInfo.Overlay.PROGRESS)).setDarkenScreen(true); // private->public CraftBukkit
    private static final Predicate<LivingEntity> LIVING_ENTITY_SELECTOR = (p_213797_0_) -> {
       return p_213797_0_.getMobType() != CreatureAttribute.UNDEAD && p_213797_0_.attackable();
    };
@@ -213,16 +_,36 @@
       if (this.getInvulnerableTicks() > 0) {
          int j1 = this.getInvulnerableTicks() - 1;
          if (j1 <= 0) {
-            Explosion.Mode explosion$mode = this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) ? Explosion.Mode.DESTROY : Explosion.Mode.NONE;
-            this.level.explode(this, this.getX(), this.getEyeY(), this.getZ(), 7.0F, false, explosion$mode);
-            if (!this.isSilent()) {
-               this.level.globalLevelEvent(1023, this.blockPosition(), 0);
-            }
+            Explosion.Mode explosion$mode = net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.level, this) ? Explosion.Mode.DESTROY : Explosion.Mode.NONE;
+            // CraftBukkit start
+            ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 7.0F, false);
+            this.level.getCBServer().getPluginManager().callEvent(event);
+            if (!event.isCancelled()) {
+               this.level.explode(this, this.getX(), this.getEyeY(), this.getZ(), event.getRadius(), event.getFire(), explosion$mode);
+            }
+            // CraftBukkit end
+            // CraftBukkit start - Use relative location for far away sounds
+            int viewDistance = ((ServerWorld) this.level).getCBServer().getViewDistance() * 16;
+            for (ServerPlayerEntity player : (List<ServerPlayerEntity>) MinecraftServer.getServer().getPlayerList().players) {
+               double deltaX = this.getX() - player.getX();
+               double deltaZ = this.getZ() - player.getZ();
+               double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
+               if ( level.spigotConfig.witherSpawnSoundRadius > 0 && distanceSquared > level.spigotConfig.witherSpawnSoundRadius * level.spigotConfig.witherSpawnSoundRadius ) continue; // Spigot
+               if (distanceSquared > viewDistance * viewDistance) {
+                  double deltaLength = Math.sqrt(distanceSquared);
+                  double relativeX = player.getX() + (deltaX / deltaLength) * viewDistance;
+                  double relativeZ = player.getZ() + (deltaZ / deltaLength) * viewDistance;
+                  player.connection.send(new SPlaySoundEventPacket(1023, new BlockPos((int) relativeX, (int) this.getY(), (int) relativeZ), 0, true));
+               } else {
+                  player.connection.send(new SPlaySoundEventPacket(1023, new BlockPos((int) this.getX(), (int) this.getY(), (int) this.getZ()), 0, true));
+            }
+         }
+            // CraftBukkit end
          }
 
          this.setInvulnerableTicks(j1);
          if (this.tickCount % 10 == 0) {
-            this.heal(10.0F);
+            this.heal(10.0F, RegainReason.WITHER_SPAWN); // CraftBukkit
          }
 
       } else {
@@ -268,9 +_,11 @@
                      if (livingentity != this && livingentity.isAlive() && this.canSee(livingentity)) {
                         if (livingentity instanceof PlayerEntity) {
                            if (!((PlayerEntity)livingentity).abilities.invulnerable) {
+                              if (CraftEventFactory.callEntityTargetLivingEvent(this, livingentity, EntityTargetEvent.TargetReason.CLOSEST_PLAYER).isCancelled()) continue; // CraftBukkit
                               this.setAlternativeTarget(i, livingentity.getId());
                            }
                         } else {
+                           if (CraftEventFactory.callEntityTargetLivingEvent(this, livingentity, EntityTargetEvent.TargetReason.CLOSEST_ENTITY).isCancelled()) continue; // CraftBukkit
                            this.setAlternativeTarget(i, livingentity.getId());
                         }
                         break;
@@ -290,7 +_,7 @@
 
          if (this.destroyBlocksTick > 0) {
             --this.destroyBlocksTick;
-            if (this.destroyBlocksTick == 0 && this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+            if (this.destroyBlocksTick == 0 && net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.level, this)) {
                int i1 = MathHelper.floor(this.getY());
                int l1 = MathHelper.floor(this.getX());
                int i2 = MathHelper.floor(this.getZ());
@@ -304,7 +_,12 @@
                         int l = i2 + l2;
                         BlockPos blockpos = new BlockPos(i3, k, l);
                         BlockState blockstate = this.level.getBlockState(blockpos);
-                        if (canDestroy(blockstate)) {
+                        if (blockstate.canEntityDestroy(this.level, blockpos, this) && net.minecraftforge.event.ForgeEventFactory.onEntityDestroyBlock(this, blockpos, blockstate)) {
+                           // CraftBukkit start
+                           if (CraftEventFactory.callEntityChangeBlockEvent(this, blockpos, Blocks.AIR.defaultBlockState()).isCancelled()) {
+                              continue;
+                           }
+                           // CraftBukkit end
                            flag = this.level.destroyBlock(blockpos, true, this) || flag;
                         }
                      }
@@ -318,13 +_,15 @@
          }
 
          if (this.tickCount % 20 == 0) {
-            this.heal(1.0F);
+            this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
          }
 
-         this.bossEvent.setPercent(this.getHealth() / this.getMaxHealth());
+         //this.bossInfo.setPercent(this.getHealth() / this.getMaxHealth()); // Paper - Moved down
       }
+      this.bossEvent.setPercent(this.getHealth() / this.getMaxHealth()); // Paper - Fix MC-99259 (Boss bar does not update until Wither invulnerability period ends)
    }
 
+   @Deprecated //Forge: DO NOT USE use BlockState.canEntityDestroy
    public static boolean canDestroy(BlockState p_181033_0_) {
       return !p_181033_0_.isAir() && !BlockTags.WITHER_IMMUNE.contains(p_181033_0_.getBlock());
    }
