--- a/net/minecraft/world/spawner/WorldEntitySpawner.java
+++ b/net/minecraft/world/spawner/WorldEntitySpawner.java
@@ -46,10 +_,12 @@
 import net.minecraft.world.gen.feature.structure.Structure;
 import net.minecraft.world.gen.feature.structure.StructureManager;
 import net.minecraft.world.server.ServerWorld;
+import net.minecraft.world.storage.IWorldInfo;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.entity.CreatureSpawnEvent;
 
 public final class WorldEntitySpawner {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -82,7 +_,7 @@
          } while(mobentity.isPersistenceRequired() || mobentity.requiresCustomPersistence());
 
          final Entity entity_f = entity;
-         EntityClassification entityclassification = entity.getType().getCategory();
+         EntityClassification entityclassification = entity.getClassification(true);
          if (entityclassification != EntityClassification.MISC) {
             BlockPos blockpos = entity.blockPosition();
             long i = ChunkPos.asLong(blockpos.getX() >> 4, blockpos.getZ() >> 4);
@@ -104,9 +_,50 @@
 
    public static void spawnForChunk(ServerWorld p_234979_0_, Chunk p_234979_1_, WorldEntitySpawner.EntityDensityManager p_234979_2_, boolean p_234979_3_, boolean p_234979_4_, boolean p_234979_5_) {
       p_234979_0_.getProfiler().push("spawner");
+      p_234979_0_.timings.mobSpawn.startTiming(); // Spigot
+
+      // CraftBukkit start - Other mob type spawn tick rate
+      IWorldInfo worlddata = p_234979_0_.getLevelData();
+      boolean spawnAnimalThisTick = p_234979_0_.ticksPerAnimalSpawns != 0L && worlddata.getGameTime() % p_234979_0_.ticksPerAnimalSpawns == 0L;
+      boolean spawnMonsterThisTick = p_234979_0_.ticksPerMonsterSpawns != 0L && worlddata.getGameTime() % p_234979_0_.ticksPerMonsterSpawns == 0L;
+      boolean spawnWaterThisTick = p_234979_0_.ticksPerWaterSpawns != 0L && worlddata.getGameTime() % p_234979_0_.ticksPerWaterSpawns == 0L;
+      boolean spawnAmbientThisTick = p_234979_0_.ticksPerAmbientSpawns != 0L && worlddata.getGameTime() % p_234979_0_.ticksPerAmbientSpawns == 0L;
+      boolean spawnWaterAmbientThisTick = p_234979_0_.ticksPerWaterAmbientSpawns != 0L && worlddata.getGameTime() % p_234979_0_.ticksPerWaterAmbientSpawns == 0L;
+      // CraftBukkit end
 
       for(EntityClassification entityclassification : SPAWNING_CATEGORIES) {
-         if ((p_234979_3_ || !entityclassification.isFriendly()) && (p_234979_4_ || entityclassification.isFriendly()) && (p_234979_5_ || !entityclassification.isPersistent()) && p_234979_2_.canSpawnForCategory(entityclassification)) {
+         // CraftBukkit start - Use per-world spawn limits
+         boolean spawnThisTick = true;
+         int limit = entityclassification.getMaxInstancesPerChunk();
+         switch (entityclassification) {
+            case MONSTER:
+               spawnThisTick = spawnMonsterThisTick;
+               limit = p_234979_0_.getWorld().getMonsterSpawnLimit();
+               break;
+            case CREATURE:
+               spawnThisTick = spawnAnimalThisTick;
+               limit = p_234979_0_.getWorld().getAnimalSpawnLimit();
+               break;
+            case WATER_CREATURE:
+               spawnThisTick = spawnWaterThisTick;
+               limit = p_234979_0_.getWorld().getWaterAnimalSpawnLimit();
+               break;
+            case AMBIENT:
+               spawnThisTick = spawnAmbientThisTick;
+               limit = p_234979_0_.getWorld().getAmbientSpawnLimit();
+               break;
+            case WATER_AMBIENT:
+               spawnThisTick = spawnWaterAmbientThisTick;
+               limit = p_234979_0_.getWorld().getWaterAmbientSpawnLimit();
+               break;
+         }
+
+         if (!spawnThisTick || limit == 0) {
+            continue;
+         }
+
+         if ((p_234979_3_ || !entityclassification.isFriendly()) && (p_234979_4_ || entityclassification.isFriendly()) && (p_234979_5_ || !entityclassification.isPersistent()) && p_234979_2_.canSpawnForCategory(entityclassification, limit)) {
+            // CraftBukkit end
             spawnCategoryForChunk(entityclassification, p_234979_0_, p_234979_1_, (p_234969_1_, p_234969_2_, p_234969_3_) -> {
                return p_234979_2_.canSpawn(p_234969_1_, p_234969_2_, p_234969_3_);
             }, (p_234970_1_, p_234970_2_) -> {
@@ -115,6 +_,7 @@
          }
       }
 
+      p_234979_0_.timings.mobSpawn.stopTiming(); // Spigot
       p_234979_0_.getProfiler().pop();
    }
 
@@ -169,13 +_,19 @@
                         }
 
                         mobentity.moveTo(d0, (double)i, d1, p_234966_1_.random.nextFloat() * 360.0F, 0.0F);
-                        if (isValidPositionForMob(p_234966_1_, mobentity, d2)) {
+                        int canSpawn = net.minecraftforge.common.ForgeHooks.canEntitySpawn(mobentity, p_234966_1_, d0, i, d1, null, SpawnReason.NATURAL);
+                        if (canSpawn != -1 && (canSpawn == 1 || isValidPositionForMob(p_234966_1_, mobentity, d2))) {
+                           if (!net.minecraftforge.event.ForgeEventFactory.doSpecialSpawn(mobentity, p_234966_1_, (float)d0, (float)i, (float)d1, null, SpawnReason.NATURAL))
                            ilivingentitydata = mobentity.finalizeSpawn(p_234966_1_, p_234966_1_.getCurrentDifficultyAt(mobentity.blockPosition()), SpawnReason.NATURAL, ilivingentitydata, (CompoundNBT)null);
-                           ++j;
-                           ++l1;
-                           p_234966_1_.addFreshEntityWithPassengers(mobentity);
-                           p_234966_5_.run(mobentity, p_234966_2_);
-                           if (j >= mobentity.getMaxSpawnClusterSize()) {
+                           // CraftBukkit start
+                           p_234966_1_.addAllEntities(mobentity, CreatureSpawnEvent.SpawnReason.NATURAL);
+                           if (!mobentity.removed) {
+                              ++j;
+                              ++l1;
+                              p_234966_5_.run(mobentity, p_234966_2_);
+                           }
+                           // CraftBukkit end
+                           if (j >= net.minecraftforge.event.ForgeEventFactory.getMaxSpawnPackSize(mobentity)) {
                               return;
                            }
 
@@ -253,6 +_,7 @@
          return null;
       } else {
          List<MobSpawnInfo.Spawners> list = mobsAt(p_234977_0_, p_234977_1_, p_234977_2_, p_234977_3_, p_234977_5_, biome);
+         list = net.minecraftforge.event.ForgeEventFactory.getPotentialSpawns(p_234977_0_, p_234977_3_, p_234977_5_, list);
          return list.isEmpty() ? null : WeightedRandom.getRandomItem(p_234977_4_, list);
       }
    }
@@ -292,6 +_,13 @@
       if (p_209382_0_ == EntitySpawnPlacementRegistry.PlacementType.NO_RESTRICTIONS) {
          return true;
       } else if (p_209382_3_ != null && p_209382_1_.getWorldBorder().isWithinBounds(p_209382_2_)) {
+         return p_209382_0_.canSpawnAt(p_209382_1_, p_209382_2_, p_209382_3_);
+      }
+      return false;
+   }
+
+   public static boolean canSpawnAtBody(EntitySpawnPlacementRegistry.PlacementType p_209382_0_, IWorldReader p_209382_1_, BlockPos p_209382_2_, @Nullable EntityType<?> p_209382_3_) {
+      {
          BlockState blockstate = p_209382_1_.getBlockState(p_209382_2_);
          FluidState fluidstate = p_209382_1_.getFluidState(p_209382_2_);
          BlockPos blockpos = p_209382_2_.above();
@@ -304,14 +_,12 @@
          case ON_GROUND:
          default:
             BlockState blockstate1 = p_209382_1_.getBlockState(blockpos1);
-            if (!blockstate1.isValidSpawn(p_209382_1_, blockpos1, p_209382_3_)) {
+            if (!blockstate1.canCreatureSpawn(p_209382_1_, blockpos1, p_209382_0_, p_209382_3_)) {
                return false;
             } else {
                return isValidEmptySpawnBlock(p_209382_1_, p_209382_2_, blockstate, fluidstate, p_209382_3_) && isValidEmptySpawnBlock(p_209382_1_, blockpos, p_209382_1_.getBlockState(blockpos), p_209382_1_.getFluidState(blockpos), p_209382_3_);
             }
          }
-      } else {
-         return false;
       }
    }
 
@@ -355,9 +_,10 @@
                      entity.moveTo(d0, (double)blockpos.getY(), d1, p_77191_4_.nextFloat() * 360.0F, 0.0F);
                      if (entity instanceof MobEntity) {
                         MobEntity mobentity = (MobEntity)entity;
+                        if (net.minecraftforge.common.ForgeHooks.canEntitySpawn(mobentity, p_77191_0_, d0, blockpos.getY(), d1, null, SpawnReason.CHUNK_GENERATION) == -1) continue;
                         if (mobentity.checkSpawnRules(p_77191_0_, SpawnReason.CHUNK_GENERATION) && mobentity.checkSpawnObstruction(p_77191_0_)) {
                            ilivingentitydata = mobentity.finalizeSpawn(p_77191_0_, p_77191_0_.getCurrentDifficultyAt(mobentity.blockPosition()), SpawnReason.CHUNK_GENERATION, ilivingentitydata, (CompoundNBT)null);
-                           p_77191_0_.addFreshEntityWithPassengers(mobentity);
+                           p_77191_0_.addAllEntities(mobentity, CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit
                            flag = true;
                         }
                      }
@@ -461,6 +_,14 @@
 
       private boolean canSpawnForCategory(EntityClassification p_234991_1_) {
          int i = p_234991_1_.getMaxInstancesPerChunk() * this.spawnableChunkCount / WorldEntitySpawner.MAGIC_NUMBER;
+         return this.mobCategoryCounts.getInt(p_234991_1_) < i;
+      }
+
+      // CraftBukkit start
+      private boolean canSpawnForCategory(EntityClassification p_234991_1_, int limit) {
+         int i = limit * this.spawnableChunkCount / WorldEntitySpawner.MAGIC_NUMBER;
+         // CraftBukkit end
+
          return this.mobCategoryCounts.getInt(p_234991_1_) < i;
       }
    }
