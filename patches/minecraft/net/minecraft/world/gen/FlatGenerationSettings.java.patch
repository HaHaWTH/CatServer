--- a/net/minecraft/world/gen/FlatGenerationSettings.java
+++ b/net/minecraft/world/gen/FlatGenerationSettings.java
@@ -5,10 +_,8 @@
 import com.google.common.collect.Maps;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
+
+import java.util.*;
 import java.util.Map.Entry;
 import java.util.function.Supplier;
 import net.minecraft.block.BlockState;
@@ -16,6 +_,7 @@
 import net.minecraft.util.Util;
 import net.minecraft.util.registry.Registry;
 import net.minecraft.util.registry.RegistryLookupCodec;
+import net.minecraft.util.registry.WorldGenRegistries;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.biome.BiomeGenerationSettings;
 import net.minecraft.world.biome.Biomes;
@@ -147,9 +_,20 @@
          biomegenerationsettings$builder.addFeature(GenerationStage.Decoration.LAKES, Features.LAKE_LAVA);
       }
 
+      // LoliServer - Upgrade Forge to 36.1.18
+      Map<Structure<?>, StructureFeature<?, ?>> map = new java.util.HashMap<>(STRUCTURE_FEATURES);
+      net.minecraft.util.registry.WorldGenRegistries.CONFIGURED_STRUCTURE_FEATURE.stream().filter(f -> !map.containsKey(f.feature)).forEach(f -> map.put(f.feature, f));
+
       for(Entry<Structure<?>, StructureSeparationSettings> entry : this.structureSettings.structureConfig().entrySet()) {
-         biomegenerationsettings$builder.addStructureStart(biomegenerationsettings.withBiomeConfig(STRUCTURE_FEATURES.get(entry.getKey())));
+         if (!map.containsKey(entry.getKey())) {
+            LOGGER.error("FORGE: There's no known StructureFeature for {} when preparing the {} flatworld biome." +
+                    " The structure will be skipped and may not spawn." +
+                    " Please register your StructureFeatures in the WorldGenRegistries!", entry.getKey().getFeatureName(), biome.getRegistryName());
+            continue;
+         }
+         biomegenerationsettings$builder.addStructureStart(biomegenerationsettings.withBiomeConfig(map.get(entry.getKey())));
       }
+      // LoliServer End
 
       boolean flag = (!this.voidGen || this.biomes.getResourceKey(biome).equals(Optional.of(Biomes.THE_VOID))) && this.decoration;
       if (flag) {
@@ -174,7 +_,7 @@
          }
       }
 
-      return (new Biome.Builder()).precipitation(biome.getPrecipitation()).biomeCategory(biome.getBiomeCategory()).depth(biome.getDepth()).scale(biome.getScale()).temperature(biome.getBaseTemperature()).downfall(biome.getDownfall()).specialEffects(biome.getSpecialEffects()).generationSettings(biomegenerationsettings$builder.build()).mobSpawnSettings(biome.getMobSettings()).build();
+      return (new Biome.Builder()).precipitation(biome.getPrecipitation()).biomeCategory(biome.getBiomeCategory()).depth(biome.getDepth()).scale(biome.getScale()).temperature(biome.getBaseTemperature()).downfall(biome.getDownfall()).specialEffects(biome.getSpecialEffects()).generationSettings(biomegenerationsettings$builder.build()).mobSpawnSettings(biome.getMobSettings()).build().setRegistryName(biome.getRegistryName());
    }
 
    public DimensionStructuresSettings structureSettings() {
