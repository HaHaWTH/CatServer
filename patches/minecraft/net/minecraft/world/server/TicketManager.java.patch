--- a/net/minecraft/world/server/TicketManager.java
+++ b/net/minecraft/world/server/TicketManager.java
@@ -37,7 +_,7 @@
    private static final Logger LOGGER = LogManager.getLogger();
    private static final int PLAYER_TICKET_LEVEL = 33 + ChunkStatus.getDistance(ChunkStatus.FULL) - 2;
    private final Long2ObjectMap<ObjectSet<ServerPlayerEntity>> playersPerChunk = new Long2ObjectOpenHashMap<>();
-   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> tickets = new Long2ObjectOpenHashMap<>();
+   public final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> tickets = new Long2ObjectOpenHashMap<>();
    private final TicketManager.ChunkTicketTracker ticketTracker = new TicketManager.ChunkTicketTracker();
    private final TicketManager.PlayerChunkTracker naturalSpawnChunkCounter = new TicketManager.PlayerChunkTracker(8);
    private final TicketManager.PlayerTicketTracker playerTicketManager = new TicketManager.PlayerTicketTracker(33);
@@ -49,6 +_,8 @@
    private final Executor mainThreadExecutor;
    private long ticketTickCounter;
 
+   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> forcedTickets = new Long2ObjectOpenHashMap<>();
+
    protected TicketManager(Executor p_i50707_1_, Executor p_i50707_2_) {
       ITaskExecutor<Runnable> itaskexecutor = ITaskExecutor.of("player ticket throttler", p_i50707_2_::execute);
       ChunkTaskPriorityQueueSorter chunktaskpriorityqueuesorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(itaskexecutor), p_i50707_1_, 4);
@@ -98,10 +_,22 @@
       }
 
       if (!this.chunksToUpdateFutures.isEmpty()) {
-         this.chunksToUpdateFutures.forEach((p_219343_1_) -> {
+         // CraftBukkit start
+         // Iterate pending chunk updates with protection against concurrent modification exceptions
+         java.util.Iterator<ChunkHolder> iter = this.chunksToUpdateFutures.iterator();
+         int expectedSize = this.chunksToUpdateFutures.size();
+         do {
+            ChunkHolder p_219343_1_ = iter.next();
+            iter.remove();
+            expectedSize--;
             p_219343_1_.updateFutures(p_219353_1_);
-         });
-         this.chunksToUpdateFutures.clear();
+            if (this.chunksToUpdateFutures.size() != expectedSize) {
+               expectedSize = this.chunksToUpdateFutures.size();
+               iter = this.chunksToUpdateFutures.iterator();
+            }
+         } while (iter.hasNext());
+         // CraftBukkit end
+
          return true;
       } else {
          if (!this.ticketsToRelease.isEmpty()) {
@@ -143,6 +_,22 @@
          this.ticketTracker.update(p_219347_1_, p_219347_3_.getTicketLevel(), true);
       }
 
+      if (p_219347_3_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(p_219347_1_, e -> SortedArraySet.create(4));
+          tickets.addOrGet(ticket);
+      }
+   }
+
+   private boolean addTicketCB(long chunkPosIn, Ticket<?> ticketIn) { // CraftBukkit - void -> boolean
+      SortedArraySet<Ticket<?>> sortedarrayset = this.getTickets(chunkPosIn);
+      int i = getTicketLevelAt(sortedarrayset);
+      Ticket<?> ticket = sortedarrayset.addOrGet(ticketIn);
+      ticket.setCreatedTick(this.ticketTickCounter);
+      if (ticketIn.getTicketLevel() < i) {
+         this.ticketTracker.update(chunkPosIn, ticketIn.getTicketLevel(), true);
+      }
+
+      return ticketIn == ticket; // CraftBukkit
    }
 
    private void removeTicket(long p_219349_1_, Ticket<?> p_219349_3_) {
@@ -155,7 +_,35 @@
       }
 
       this.ticketTracker.update(p_219349_1_, getTicketLevelAt(sortedarrayset), false);
-   }
+	  
+	  if (p_219349_3_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.get(p_219349_1_);
+          if (tickets != null) {
+              tickets.remove(p_219349_3_);
+          }
+	  }
+   }
+
+   public boolean removeTicketCB(long chunkPosIn, Ticket<?> ticketIn) { // CraftBukkit - void -> boolean
+      SortedArraySet<Ticket<?>> sortedarrayset = this.getTickets(chunkPosIn);
+      boolean removed = false; // CraftBukkit
+      if (sortedarrayset.remove(ticketIn)) {
+         removed = true; // CraftBukkit
+      }
+
+      if (sortedarrayset.isEmpty()) {
+         this.tickets.remove(chunkPosIn);
+      }
+
+      this.ticketTracker.update(chunkPosIn, getTicketLevelAt(sortedarrayset), false);
+      return removed; // CraftBukkit
+   }
+
+   // CraftBukkit - start
+   public <T> boolean addTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkcoordintpair, int level, T identifier) {
+      return this.addTicketCB(chunkcoordintpair.toLong(), new Ticket<>(ticketType, level, identifier));
+   }
+   // CraftBukkit - end
 
    public <T> void addTicket(TicketType<T> p_219356_1_, ChunkPos p_219356_2_, int p_219356_3_, T p_219356_4_) {
       this.addTicket(p_219356_2_.toLong(), new Ticket<>(p_219356_1_, p_219356_3_, p_219356_4_));
@@ -166,6 +_,14 @@
       this.removeTicket(p_219345_2_.toLong(), ticket);
    }
 
+
+   // CraftBukkit - start
+   public <T> boolean removeTicketAtLevel(TicketType<T> type, ChunkPos pos, int level, T value) {
+      Ticket<T> ticket = new Ticket<>(type, level, value);
+      return this.removeTicketCB(pos.toLong(), ticket);
+   }
+   // CraftBukkit - end
+
    public <T> void addRegionTicket(TicketType<T> p_219331_1_, ChunkPos p_219331_2_, int p_219331_3_, T p_219331_4_) {
       this.addTicket(p_219331_2_.toLong(), new Ticket<>(p_219331_1_, 33 - p_219331_3_, p_219331_4_));
    }
@@ -175,6 +_,14 @@
       this.removeTicket(p_219362_2_.toLong(), ticket);
    }
 
+   public <T> void registerTicking(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.addTicket(pos.toLong(), new Ticket<>(type, 33 - distance, value, true));
+   }
+
+   public <T> void releaseTicking(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.removeTicket(pos.toLong(), new Ticket<>(type, 33 - distance, value, true));
+   }
+
    private SortedArraySet<Ticket<?>> getTickets(long p_229848_1_) {
       return this.tickets.computeIfAbsent(p_229848_1_, (p_229851_0_) -> {
          return SortedArraySet.create(4);
@@ -203,6 +_,7 @@
    public void removePlayer(SectionPos p_219367_1_, ServerPlayerEntity p_219367_2_) {
       long i = p_219367_1_.chunk().toLong();
       ObjectSet<ServerPlayerEntity> objectset = this.playersPerChunk.get(i);
+      if (objectset == null) return; // CraftBukkit - SPIGOT-6208
       objectset.remove(p_219367_2_);
       if (objectset.isEmpty()) {
          this.playersPerChunk.remove(i);
@@ -241,6 +_,29 @@
    public String getDebugStatus() {
       return this.ticketThrottler.getDebugStatus();
    }
+   
+   public boolean shouldForceTicks(long chunkPos) {
+       SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+       return tickets != null && !tickets.isEmpty();
+   }
+
+   // CraftBukkit start
+   public <T> void removeAllTicketsFor(TicketType<T> ticketType, int ticketLevel, T ticketIdentifier) {
+      Ticket<T> target = new Ticket<>(ticketType, ticketLevel, ticketIdentifier);
+      for (java.util.Iterator<Entry<SortedArraySet<Ticket<?>>>> iterator = this.tickets.long2ObjectEntrySet().fastIterator(); iterator.hasNext();) {
+         Entry<SortedArraySet<Ticket<?>>> entry = iterator.next();
+         SortedArraySet<Ticket<?>> tickets = entry.getValue();
+         if (tickets.remove(target)) {
+            // copied from removeTicket
+            this.ticketTracker.update(entry.getLongKey(), getTicketLevelAt(tickets), false);
+            // can't use entry after it's removed
+            if (tickets.isEmpty()) {
+               iterator.remove();
+            }
+         }
+      }
+   }
+   // CraftBukkit end
 
    class ChunkTicketTracker extends ChunkDistanceGraph {
       public ChunkTicketTracker() {
