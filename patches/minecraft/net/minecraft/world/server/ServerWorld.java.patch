--- a/net/minecraft/world/server/ServerWorld.java
+++ b/net/minecraft/world/server/ServerWorld.java
@@ -18,15 +_,7 @@
 import java.io.Writer;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collection;
-import java.util.Comparator;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Queue;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
@@ -51,6 +_,7 @@
 import net.minecraft.entity.effect.LightningBoltEntity;
 import net.minecraft.entity.merchant.IReputationTracking;
 import net.minecraft.entity.merchant.IReputationType;
+import net.minecraft.entity.monster.DrownedEntity;
 import net.minecraft.entity.passive.AnimalEntity;
 import net.minecraft.entity.passive.WaterMobEntity;
 import net.minecraft.entity.passive.horse.SkeletonHorseEntity;
@@ -59,6 +_,7 @@
 import net.minecraft.fluid.Fluid;
 import net.minecraft.fluid.FluidState;
 import net.minecraft.fluid.Fluids;
+import net.minecraft.inventory.IInventory;
 import net.minecraft.item.crafting.RecipeManager;
 import net.minecraft.network.DebugPacketSender;
 import net.minecraft.network.IPacket;
@@ -79,17 +_,7 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.tags.ITagCollectionSupplier;
 import net.minecraft.tileentity.TileEntity;
-import net.minecraft.util.CSVWriter;
-import net.minecraft.util.ClassInheritanceMultiMap;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.Direction;
-import net.minecraft.util.IProgressUpdate;
-import net.minecraft.util.RegistryKey;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.SoundCategory;
-import net.minecraft.util.SoundEvent;
-import net.minecraft.util.Unit;
-import net.minecraft.util.Util;
+import net.minecraft.util.*;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
@@ -133,27 +_,32 @@
 import net.minecraft.world.raid.RaidManager;
 import net.minecraft.world.spawner.ISpecialSpawner;
 import net.minecraft.world.spawner.WorldEntitySpawner;
-import net.minecraft.world.storage.DimensionSavedDataManager;
-import net.minecraft.world.storage.IServerWorldInfo;
-import net.minecraft.world.storage.MapData;
-import net.minecraft.world.storage.MapIdTracker;
-import net.minecraft.world.storage.SaveFormat;
+import net.minecraft.world.storage.*;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_16_R3.CraftWorld;
+import org.bukkit.craftbukkit.v1_16_R3.SpigotTimings;
+import org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_16_R3.util.WorldUUID;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.server.MapInitializeEvent;
+import org.bukkit.event.weather.LightningStrikeEvent;
+import org.bukkit.event.world.TimeSkipEvent;
 
-public class ServerWorld extends World implements ISeedReader {
+public class ServerWorld extends World implements ISeedReader, net.minecraftforge.common.extensions.IForgeWorldServer {
    public static final BlockPos END_SPAWN_POINT = new BlockPos(100, 50, 0);
    private static final Logger LOGGER = LogManager.getLogger();
-   private final Int2ObjectMap<Entity> entitiesById = new Int2ObjectLinkedOpenHashMap<>();
+   public final Int2ObjectMap<Entity> entitiesById = new Int2ObjectLinkedOpenHashMap<>();
    private final Map<UUID, Entity> entitiesByUuid = Maps.newHashMap();
    private final Queue<Entity> toAddAfterTick = Queues.newArrayDeque();
    private final List<ServerPlayerEntity> players = Lists.newArrayList();
    private final ServerChunkProvider chunkSource;
    boolean tickingEntities;
    private final MinecraftServer server;
-   private final IServerWorldInfo serverLevelData;
+   public final IServerWorldInfo serverLevelData;
    public boolean noSave;
    private boolean allPlayersSleeping;
    private int emptyTime;
@@ -173,35 +_,143 @@
    private final DragonFightManager dragonFight;
    private final StructureManager structureFeatureManager;
    private final boolean tickTime;
-
+   private net.minecraftforge.common.util.WorldCapabilityData capabilityData;
+   private final it.unimi.dsi.fastutil.ints.Int2ObjectMap<net.minecraftforge.entity.PartEntity<?>> partEntities = new it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap<>();
+
+   public boolean isBukkitWorld = false; // CatServer
+
+   // CraftBukkit start
+   private int tickPosition;
+   public ServerWorldInfo worldDataServer;
+   public final SaveFormat.LevelSave convertable;
+   public final UUID uuid;
+   public boolean dummyFreshEntitySpawn = false; // Fixed Pehkui Startup
+
+   public Chunk getChunkIfLoaded(int x, int z) {
+      return this.chunkSource.getChunk(x, z, false);
+   }
+
+   // Add env and gen to constructor,
    public ServerWorld(MinecraftServer p_i241885_1_, Executor p_i241885_2_, SaveFormat.LevelSave p_i241885_3_, IServerWorldInfo p_i241885_4_, RegistryKey<World> p_i241885_5_, DimensionType p_i241885_6_, IChunkStatusListener p_i241885_7_, ChunkGenerator p_i241885_8_, boolean p_i241885_9_, long p_i241885_10_, List<ISpecialSpawner> p_i241885_12_, boolean p_i241885_13_) {
       super(p_i241885_4_, p_i241885_5_, p_i241885_6_, p_i241885_1_::getProfiler, false, p_i241885_9_, p_i241885_10_);
-      this.tickTime = p_i241885_13_;
-      this.server = p_i241885_1_;
-      this.customSpawners = p_i241885_12_;
-      this.serverLevelData = p_i241885_4_;
-      this.chunkSource = new ServerChunkProvider(this, p_i241885_3_, p_i241885_1_.getFixerUpper(), p_i241885_1_.getStructureManager(), p_i241885_2_, p_i241885_8_, p_i241885_1_.getPlayerList().getViewDistance(), p_i241885_1_.forceSynchronousWrites(), p_i241885_7_, () -> {
-         return p_i241885_1_.overworld().getDataStorage();
-      });
-      this.portalForcer = new Teleporter(this);
-      this.updateSkyBrightness();
-      this.prepareWeather();
-      this.getWorldBorder().setAbsoluteMaxSize(p_i241885_1_.getAbsoluteMaxWorldSize());
-      this.raids = this.getDataStorage().computeIfAbsent(() -> {
-         return new RaidManager(this);
-      }, RaidManager.getFileId(this.dimensionType()));
-      if (!p_i241885_1_.isSingleplayer()) {
-         p_i241885_4_.setGameType(p_i241885_1_.getDefaultGameType());
-      }
-
-      this.structureFeatureManager = new StructureManager(this, p_i241885_1_.getWorldData().worldGenSettings());
-      if (this.dimensionType().createDragonFight()) {
-         this.dragonFight = new DragonFightManager(this, p_i241885_1_.getWorldData().worldGenSettings().seed(), p_i241885_1_.getWorldData().endDragonFightData());
-      } else {
-         this.dragonFight = null;
-      }
-
-   }
+      this.pvpMode = p_i241885_1_.isPvpAllowed();
+      convertable = p_i241885_3_;
+      uuid = WorldUUID.getUUID(p_i241885_1_.storageSource.getDimensionPath(p_i241885_5_));
+      if (p_i241885_4_ instanceof ServerWorldInfo) {
+         this.worldDataServer = (ServerWorldInfo) p_i241885_4_;
+      }
+      if (generator != null) {
+         p_i241885_8_ = new org.bukkit.craftbukkit.v1_16_R3.generator.CustomChunkGenerator(this, p_i241885_8_, generator);
+      }
+      // CraftBukkit end
+      this.spigotConfig = new org.spigotmc.SpigotWorldConfig(MinecraftServer.getServer().storageSource.getDimensionPath(p_i241885_5_).getName()); // Spigot
+      this.tickTime = p_i241885_13_;
+      this.server = p_i241885_1_;
+      this.customSpawners = p_i241885_12_;
+      this.serverLevelData = p_i241885_4_;
+      this.chunkSource = new ServerChunkProvider(this, p_i241885_3_, p_i241885_1_.getFixerUpper(), p_i241885_1_.getStructureManager(), p_i241885_2_, p_i241885_8_, p_i241885_1_.getPlayerList().getViewDistance(), p_i241885_1_.forceSynchronousWrites(), p_i241885_7_, () -> {
+         return p_i241885_1_.overworld().getDataStorage();
+      });
+      this.portalForcer = new Teleporter(this);
+      this.updateSkyBrightness();
+      this.prepareWeather();
+      this.getWorldBorder().setAbsoluteMaxSize(p_i241885_1_.getAbsoluteMaxWorldSize());
+      this.raids = this.getDataStorage().computeIfAbsent(() -> {
+         return new RaidManager(this);
+      }, RaidManager.getFileId(this.dimensionType()));
+      if (!p_i241885_1_.isSingleplayer()) {
+         p_i241885_4_.setGameType(p_i241885_1_.getDefaultGameType());
+      }
+
+      this.structureFeatureManager = new StructureManager(this, p_i241885_1_.getWorldData().worldGenSettings());
+      if (this.dimensionType().createDragonFight()) {
+         this.dragonFight = new DragonFightManager(this, p_i241885_1_.getWorldData().worldGenSettings().seed(), p_i241885_1_.getWorldData().endDragonFightData());
+      } else {
+         this.dragonFight = null;
+      }
+      this.initCapabilities();
+      this.craftWorld = new CraftWorld(this, generator, environment);
+      getWorldBorder().world = this;
+      this.getCBServer().addWorld(this.getWorld()); // CraftBukkit
+
+      this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
+      this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
+      this.timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
+   }
+
+
+   public ServerWorld(MinecraftServer p_i241885_1_, Executor p_i241885_2_, SaveFormat.LevelSave p_i241885_3_, IServerWorldInfo p_i241885_4_, RegistryKey<World> p_i241885_5_, DimensionType p_i241885_6_, IChunkStatusListener p_i241885_7_, ChunkGenerator p_i241885_8_, boolean p_i241885_9_, long p_i241885_10_, List<ISpecialSpawner> p_i241885_12_, boolean p_i241885_13_, org.bukkit.World.Environment cbEnv, org.bukkit.generator.ChunkGenerator cbChunkGen) {
+      super(p_i241885_4_, p_i241885_5_, p_i241885_6_, p_i241885_1_::getProfiler, false, p_i241885_9_, p_i241885_10_, cbEnv, cbChunkGen);
+      this.pvpMode = p_i241885_1_.isPvpAllowed();
+      convertable = p_i241885_3_;
+      uuid = WorldUUID.getUUID(p_i241885_1_.storageSource.getDimensionPath(p_i241885_5_));
+      if (p_i241885_4_ instanceof ServerWorldInfo) {
+         this.worldDataServer = (ServerWorldInfo) p_i241885_4_;
+      }
+      if (generator != null) {
+         p_i241885_8_ = new org.bukkit.craftbukkit.v1_16_R3.generator.CustomChunkGenerator(this, p_i241885_8_, generator);
+      }
+      // CraftBukkit end
+      this.spigotConfig = new org.spigotmc.SpigotWorldConfig(MinecraftServer.getServer().storageSource.getDimensionPath(p_i241885_5_).getName()); // Spigot
+      this.tickTime = p_i241885_13_;
+      this.server = p_i241885_1_;
+      this.customSpawners = p_i241885_12_;
+      this.serverLevelData = p_i241885_4_;
+      this.chunkSource = new ServerChunkProvider(this, p_i241885_3_, p_i241885_1_.getFixerUpper(), p_i241885_1_.getStructureManager(), p_i241885_2_, p_i241885_8_, p_i241885_1_.getPlayerList().getViewDistance(), p_i241885_1_.forceSynchronousWrites(), p_i241885_7_, () -> {
+         return p_i241885_1_.overworld().getDataStorage();
+      });
+      this.portalForcer = new Teleporter(this);
+      this.updateSkyBrightness();
+      this.prepareWeather();
+      this.getWorldBorder().setAbsoluteMaxSize(p_i241885_1_.getAbsoluteMaxWorldSize());
+      this.raids = this.getDataStorage().computeIfAbsent(() -> {
+         return new RaidManager(this);
+      }, RaidManager.getFileId(this.dimensionType()));
+      if (!p_i241885_1_.isSingleplayer()) {
+         p_i241885_4_.setGameType(p_i241885_1_.getDefaultGameType());
+      }
+
+      this.structureFeatureManager = new StructureManager(this, p_i241885_1_.getWorldData().worldGenSettings());
+      if (this.dimensionType().createDragonFight()) {
+         this.dragonFight = new DragonFightManager(this, p_i241885_1_.getWorldData().worldGenSettings().seed(), p_i241885_1_.getWorldData().endDragonFightData());
+      } else {
+         this.dragonFight = null;
+      }
+      this.initCapabilities();
+      this.craftWorld = new CraftWorld(this, generator, environment);
+      getWorldBorder().world = this;
+      this.getCBServer().addWorld(this.getWorld()); // CraftBukkit
+
+      this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
+      this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
+      this.timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
+   }
+
+   @Override
+   public boolean isPosLoaded(BlockPos pos) {
+      return this.getChunkIfLoaded(MathHelper.floor(pos.getX() / 16.0), MathHelper.floor(pos.getZ() / 16.0)) != null;
+   }
+
+   // CraftBukkit start
+   @Override
+   public TileEntity getTileEntity(BlockPos pos, boolean validate) {
+      TileEntity result = super.getTileEntity(pos, validate);
+      if (!validate || Thread.currentThread() != this.thread) {
+         // SPIGOT-5378: avoid deadlock, this can be called in loading logic (i.e lighting) but getType() will block on chunk load
+         return result;
+      }
+      final Block type = this.getBlockState(pos).getBlock();
+      if (result != null && type != Blocks.AIR && !result.getType().isValid(type)) {
+         result = this.fixTileEntity(pos, type, result);
+      }
+      return result;
+   }
+
+   private TileEntity fixTileEntity(BlockPos pos, Block type, TileEntity found) {
+      // Disable tile entity fix
+      return found;
+   }
+   // CraftBukkit end
 
    public void setWeatherParameters(int p_241113_1_, int p_241113_2_, boolean p_241113_3_, boolean p_241113_4_) {
       this.serverLevelData.setClearWeatherTime(p_241113_1_);
@@ -211,6 +_,7 @@
       this.serverLevelData.setThundering(p_241113_4_);
    }
 
+   public Biome getBiomeBySeed(int x, int y, int z) { return getUncachedNoiseBiome(x, y, z); } // Paper - OBFHELPER
    public Biome getUncachedNoiseBiome(int p_225604_1_, int p_225604_2_, int p_225604_3_) {
       return this.getChunkSource().getGenerator().getBiomeSource().getNoiseBiome(p_225604_1_, p_225604_2_, p_225604_3_);
    }
@@ -288,6 +_,7 @@
          this.rainLevel = MathHelper.clamp(this.rainLevel, 0.0F, 1.0F);
       }
 
+      /*
       if (this.oRainLevel != this.rainLevel) {
          this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.RAIN_LEVEL_CHANGE, this.rainLevel), this.dimension());
       }
@@ -295,28 +_,60 @@
       if (this.oThunderLevel != this.thunderLevel) {
          this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
       }
+      */
 
+      /* The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+       * rather than to all players on the server. This is what causes the client-side rain, as the
+       * client believes that it has started raining locally, rather than in another dimension.
+       */
+      /*
       if (flag != this.isRaining()) {
          if (flag) {
-            this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.STOP_RAINING, 0.0F));
+            this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.STOP_RAINING, 0.0F), this.dimension());
          } else {
-            this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.START_RAINING, 0.0F));
-         }
-
-         this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.RAIN_LEVEL_CHANGE, this.rainLevel));
-         this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.THUNDER_LEVEL_CHANGE, this.thunderLevel));
-      }
+            this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.START_RAINING, 0.0F), this.dimension());
+         }
+
+         this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.RAIN_LEVEL_CHANGE, this.rainLevel), this.dimension());
+         this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
+      }
+      */
+
+      // CraftBukkit start
+      int idx;
+      for (idx = 0; idx < this.players.size(); idx++) {
+         if (this.players.get(idx).level == this)
+            (this.players.get(idx)).tickWeather();
+      }
+      if (flag != isRaining())
+         for (idx = 0; idx < this.players.size(); idx++) {
+            if ((this.players.get(idx)).level == this)
+               (this.players.get(idx)).setPlayerWeather(!flag ? org.bukkit.WeatherType.DOWNFALL : org.bukkit.WeatherType.CLEAR, false);
+         }
+      for (idx = 0; idx < this.players.size(); idx++) {
+         if ((this.players.get(idx)).level == this)
+            (this.players.get(idx)).updateWeather(this.oRainLevel, this.rainLevel, this.oThunderLevel, this.thunderLevel);
+      }
+      // CraftBukkit end
 
       if (this.allPlayersSleeping && this.players.stream().noneMatch((p_241132_0_) -> {
-         return !p_241132_0_.isSpectator() && !p_241132_0_.isSleepingLongEnough();
+         return !p_241132_0_.isSpectator() && !p_241132_0_.isSleepingLongEnough() && !p_241132_0_.fauxSleeping; // CraftBukkit
       })) {
-         this.allPlayersSleeping = false;
+         // CraftBukkit start
+         long l = this.levelData.getDayTime() + 24000L;
+         TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (l - l % 24000L) - this.getDayTime());
          if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
-            long l = this.levelData.getDayTime() + 24000L;
-            this.setDayTime(l - l % 24000L);
+            getCBServer().getPluginManager().callEvent(event);
+            if(!event.isCancelled()){
+               this.setDayTime(net.minecraftforge.event.ForgeEventFactory.onSleepFinished(this, this.getDayTime() + event.getSkipAmount(), this.getDayTime()));
+            }
          }
 
-         this.wakeUpAllPlayers();
+         if (!event.isCancelled()) {
+            this.allPlayersSleeping = false;
+            this.wakeUpAllPlayers();
+         }
+         // CraftBukkit end
          if (this.getGameRules().getBoolean(GameRules.RULE_WEATHER_CYCLE)) {
             this.stopWeather();
          }
@@ -327,23 +_,28 @@
       iprofiler.popPush("chunkSource");
       this.getChunkSource().tick(p_72835_1_);
       iprofiler.popPush("tickPending");
+      timings.doTickPending.startTiming(); // Spigot
       if (!this.isDebug()) {
          this.blockTicks.tick();
          this.liquidTicks.tick();
       }
+      timings.doTickPending.stopTiming(); // Spigot
 
       iprofiler.popPush("raid");
       this.raids.tick();
       iprofiler.popPush("blockEvents");
+      timings.doSounds.startTiming(); // Spigot
       this.runBlockEvents();
+      timings.doSounds.stopTiming(); // Spigot
       this.handlingTick = false;
       iprofiler.popPush("entities");
-      boolean flag3 = !this.players.isEmpty() || !this.getForcedChunks().isEmpty();
+      boolean flag3 = !this.players.isEmpty() || net.minecraftforge.common.world.ForgeChunkManager.hasForcedChunks(this); //Forge: Replace vanilla's has forced chunk check with forge's that checks both the vanilla and forge added ones
       if (flag3) {
          this.resetEmptyTime();
       }
 
       if (flag3 || this.emptyTime++ < 300) {
+         timings.tickEntities.startTiming(); // Spigot
          if (this.dragonFight != null) {
             this.dragonFight.tick();
          }
@@ -351,19 +_,24 @@
          this.tickingEntities = true;
          ObjectIterator<Entry<Entity>> objectiterator = this.entitiesById.int2ObjectEntrySet().iterator();
 
+         org.spigotmc.ActivationRange.activateEntities(this); // Spigot
+         timings.entityTick.startTiming(); // Spigot
          label164:
          while(true) {
             Entity entity1;
             while(true) {
                if (!objectiterator.hasNext()) {
                   this.tickingEntities = false;
+                  timings.entityTick.stopTiming(); // Spigot
 
                   Entity entity;
                   while((entity = this.toAddAfterTick.poll()) != null) {
                      this.add(entity);
                   }
 
+                  timings.tickEntities.stopTiming(); // Spigot
                   this.tickBlockEntities();
+                  this.spigotConfig.currentPrimedTnt = 0;
                   break label164;
                }
 
@@ -395,7 +_,7 @@
             }
 
             iprofiler.push("tick");
-            if (!entity1.removed && !(entity1 instanceof EnderDragonPartEntity)) {
+            if (!entity1.removed && !(entity1 instanceof net.minecraftforge.entity.PartEntity)) {
                this.guardEntityTick(this::tickNonPassenger, entity1);
             }
 
@@ -404,7 +_,7 @@
             if (entity1.removed) {
                this.removeFromChunk(entity1);
                objectiterator.remove();
-               this.onEntityRemoved(entity1);
+               this.removeEntityComplete(entity1, entity1 instanceof ServerPlayerEntity); //Forge: Keep cap data until revive. Every other entity removes directly.
             }
 
             iprofiler.pop();
@@ -460,13 +_,13 @@
                skeletonhorseentity.setTrap(true);
                skeletonhorseentity.setAge(0);
                skeletonhorseentity.setPos((double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ());
-               this.addFreshEntity(skeletonhorseentity);
+               this.addEntity(skeletonhorseentity, CreatureSpawnEvent.SpawnReason.LIGHTNING); // CraftBukkit
             }
 
             LightningBoltEntity lightningboltentity = EntityType.LIGHTNING_BOLT.create(this);
             lightningboltentity.moveTo(Vector3d.atBottomCenterOf(blockpos));
             lightningboltentity.setVisualOnly(flag1);
-            this.addFreshEntity(lightningboltentity);
+            this.strikeLightning(lightningboltentity, org.bukkit.event.weather.LightningStrikeEvent.Cause.WEATHER); // CraftBukkit
          }
       }
 
@@ -475,12 +_,13 @@
          BlockPos blockpos2 = this.getHeightmapPos(Heightmap.Type.MOTION_BLOCKING, this.getBlockRandomPos(i, 0, j, 15));
          BlockPos blockpos3 = blockpos2.below();
          Biome biome = this.getBiome(blockpos2);
+         if (this.isAreaLoaded(blockpos2, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
          if (biome.shouldFreeze(this, blockpos3)) {
-            this.setBlockAndUpdate(blockpos3, Blocks.ICE.defaultBlockState());
+            org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory.handleBlockFormEvent(this, blockpos3, Blocks.ICE.defaultBlockState(), null); // CraftBukkit
          }
 
          if (flag && biome.shouldSnow(this, blockpos2)) {
-            this.setBlockAndUpdate(blockpos2, Blocks.SNOW.defaultBlockState());
+            org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory.handleBlockFormEvent(this, blockpos2, Blocks.SNOW.defaultBlockState(), null); // CraftBukkit
          }
 
          if (flag && this.getBiome(blockpos3).getPrecipitation() == Biome.RainType.RAIN) {
@@ -544,7 +_,7 @@
          int j = 0;
 
          for(ServerPlayerEntity serverplayerentity : this.players) {
-            if (serverplayerentity.isSpectator()) {
+            if (serverplayerentity.isSpectator() || (serverplayerentity.fauxSleeping && !serverplayerentity.isSleeping())) { // CraftBukkit
                ++i;
             } else if (serverplayerentity.isSleeping()) {
                ++j;
@@ -561,10 +_,22 @@
    }
 
    private void stopWeather() {
-      this.serverLevelData.setRainTime(0);
+      // CraftBukkit start
       this.serverLevelData.setRaining(false);
-      this.serverLevelData.setThunderTime(0);
+      // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
+      // Not that everyone ever manages to get the whole server to sleep at the same time....
+      if (!this.serverLevelData.isRaining()) {
+         this.serverLevelData.setRainTime(0);
+      }
+      // CraftBukkit end
       this.serverLevelData.setThundering(false);
+      // CraftBukkit start
+      // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
+      // Not that everyone ever manages to get the whole server to sleep at the same time....
+      if (!this.serverLevelData.isThundering()) {
+         this.serverLevelData.setThunderTime(0);
+      }
+      // CraftBukkit end
    }
 
    public void resetEmptyTime() {
@@ -591,6 +_,14 @@
       if (!(p_217479_1_ instanceof PlayerEntity) && !this.getChunkSource().isEntityTickingChunk(p_217479_1_)) {
          this.updateChunkPos(p_217479_1_);
       } else {
+         // Spigot start
+         if (!org.spigotmc.ActivationRange.checkIfActive(p_217479_1_)) {
+            p_217479_1_.tickCount++;
+            p_217479_1_.inactiveTick();
+            return;
+         }
+         // Spigot end
+         p_217479_1_.tickTimer.startTiming(); // Spigot
          p_217479_1_.setPosAndOldPos(p_217479_1_.getX(), p_217479_1_.getY(), p_217479_1_.getZ());
          p_217479_1_.yRotO = p_217479_1_.yRot;
          p_217479_1_.xRotO = p_217479_1_.xRot;
@@ -598,10 +_,12 @@
             ++p_217479_1_.tickCount;
             IProfiler iprofiler = this.getProfiler();
             iprofiler.push(() -> {
-               return Registry.ENTITY_TYPE.getKey(p_217479_1_.getType()).toString();
+               return p_217479_1_.getType().getRegistryName() == null ? p_217479_1_.getType().toString() : p_217479_1_.getType().getRegistryName().toString();
             });
             iprofiler.incrementCounter("tickNonPassenger");
+            if (p_217479_1_.canUpdate())
             p_217479_1_.tick();
+            p_217479_1_.postTick(); // CraftBukkit
             iprofiler.pop();
          }
 
@@ -611,6 +_,7 @@
                this.tickPassenger(p_217479_1_, entity);
             }
          }
+         p_217479_1_.tickTimer.stopTiming(); // Spigot
 
       }
    }
@@ -629,6 +_,7 @@
                });
                iprofiler.incrementCounter("tickPassenger");
                p_217459_2_.rideTick();
+               p_217459_2_.postTick(); // CraftBukkit
                iprofiler.pop();
             }
 
@@ -649,7 +_,7 @@
       if (p_217464_1_.checkAndResetUpdateChunkPos()) {
          this.getProfiler().push("chunkCheck");
          int i = MathHelper.floor(p_217464_1_.getX() / 16.0D);
-         int j = MathHelper.floor(p_217464_1_.getY() / 16.0D);
+         int j = Math.min(15, Math.max(0, MathHelper.floor(p_217464_1_.getY() / 16.0D))); // Paper - stay consistent with chunk add/remove behavior
          int k = MathHelper.floor(p_217464_1_.getZ() / 16.0D);
          if (!p_217464_1_.inChunk || p_217464_1_.xChunk != i || p_217464_1_.yChunk != j || p_217464_1_.zChunk != k) {
             if (p_217464_1_.inChunk && this.hasChunk(p_217464_1_.xChunk, p_217464_1_.zChunk)) {
@@ -678,6 +_,7 @@
    public void save(@Nullable IProgressUpdate p_217445_1_, boolean p_217445_2_, boolean p_217445_3_) {
       ServerChunkProvider serverchunkprovider = this.getChunkSource();
       if (!p_217445_3_) {
+         org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit
          if (p_217445_1_ != null) {
             p_217445_1_.progressStartNoAbort(new TranslationTextComponent("menu.savingLevel"));
          }
@@ -687,6 +_,7 @@
             p_217445_1_.progressStage(new TranslationTextComponent("menu.savingChunks"));
          }
 
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Save(this));
          serverchunkprovider.save(p_217445_2_);
       }
    }
@@ -742,12 +_,24 @@
       return list.isEmpty() ? null : list.get(this.random.nextInt(list.size()));
    }
 
+   public CreatureSpawnEvent.SpawnReason pehkuiSpawnReason = CreatureSpawnEvent.SpawnReason.DEFAULT;
+
    public boolean addFreshEntity(Entity p_217376_1_) {
-      return this.addEntity(p_217376_1_);
+      // CraftBukkit start
+      return this.addEntity0(p_217376_1_, this.pehkuiSpawnReason); // Fixed Pehkui Startup
+   }
+
+   public boolean addEntity(Entity entityIn, CreatureSpawnEvent.SpawnReason reason) {
+      return this.addEntity0(entityIn, reason);
    }
 
    public boolean addWithUUID(Entity p_217470_1_) {
-      return this.addEntity(p_217470_1_);
+      return this.addEntitySerialized(p_217470_1_, CreatureSpawnEvent.SpawnReason.DEFAULT);
+   }
+
+   public boolean addEntitySerialized(Entity entity, CreatureSpawnEvent.SpawnReason reason) {
+      return this.addEntity0(entity, reason);
+      // CraftBukkit end
    }
 
    public void addFromAnotherDimension(Entity p_217460_1_) {
@@ -777,6 +_,7 @@
    }
 
    private void addPlayer(ServerPlayerEntity p_217448_1_) {
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_217448_1_, this))) return;
       Entity entity = this.entitiesByUuid.get(p_217448_1_.getUUID());
       if (entity != null) {
          LOGGER.warn("Force-added player with duplicate UUID {}", (Object)p_217448_1_.getUUID().toString());
@@ -795,18 +_,24 @@
    }
 
    private boolean addEntity(Entity p_72838_1_) {
-      if (p_72838_1_.removed) {
-         LOGGER.warn("Tried to add entity {} but it was marked as removed already", (Object)EntityType.getKey(p_72838_1_.getType()));
+      return addEntity0(p_72838_1_, CreatureSpawnEvent.SpawnReason.DEFAULT);
+   }
+
+   private boolean addEntity0(Entity entityIn, CreatureSpawnEvent.SpawnReason spawnReason) {
+      if (entityIn.removed) {
+         LOGGER.warn("Tried to add entity {} but it was marked as removed already", (Object)EntityType.getKey(entityIn.getType()));
          return false;
-      } else if (this.isUUIDUsed(p_72838_1_)) {
+      } else if (this.isUUIDUsed(entityIn)) {
          return false;
       } else {
-         IChunk ichunk = this.getChunk(MathHelper.floor(p_72838_1_.getX() / 16.0D), MathHelper.floor(p_72838_1_.getZ() / 16.0D), ChunkStatus.FULL, p_72838_1_.forcedLoading);
+         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entityIn, this))) return false;
+         if (!CraftEventFactory.doEntityAddEventCalling(this, entityIn, spawnReason)) return false;
+         IChunk ichunk = this.getChunk(MathHelper.floor(entityIn.getX() / 16.0D), MathHelper.floor(entityIn.getZ() / 16.0D), ChunkStatus.FULL, entityIn.forcedLoading);
          if (!(ichunk instanceof Chunk)) {
             return false;
          } else {
-            ichunk.addEntity(p_72838_1_);
-            this.add(p_72838_1_);
+            ichunk.addEntity(entityIn);
+            this.add(entityIn);
             return true;
          }
       }
@@ -816,6 +_,7 @@
       if (this.isUUIDUsed(p_217440_1_)) {
          return false;
       } else {
+         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_217440_1_, this))) return false;
          this.add(p_217440_1_);
          return true;
       }
@@ -851,15 +_,30 @@
    }
 
    public boolean tryAddFreshEntityWithPassengers(Entity p_242106_1_) {
-      if (p_242106_1_.getSelfAndPassengers().anyMatch(this::isUUIDUsed)) {
+      // CraftBukkit start
+      return this.addAllEntitiesSafely(p_242106_1_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+   }
+
+   public boolean addAllEntitiesSafely(Entity entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+      // CraftBukkit end
+      if (entity.getSelfAndPassengers().anyMatch(this::isUUIDUsed)) {
          return false;
       } else {
-         this.addFreshEntityWithPassengers(p_242106_1_);
+         this.addAllEntities(entity, reason); // CraftBukkit
          return true;
       }
    }
 
    public void unload(Chunk p_217466_1_) {
+      // Spigot Start
+      for (TileEntity tileentity : p_217466_1_.getBlockEntities().values()) {
+         if (tileentity instanceof IInventory) {
+            for (org.bukkit.entity.HumanEntity h : Lists.newArrayList(catserver.server.inventory.CatInventoryUtils.getViewers((IInventory) tileentity))) {
+               h.closeInventory();
+            }
+         }
+      }
+      // Spigot End
       this.blockEntitiesToUnload.addAll(p_217466_1_.getBlockEntities().values());
       ClassInheritanceMultiMap<Entity>[] aclassinheritancemultimap = p_217466_1_.getEntitySections();
       int i = aclassinheritancemultimap.length;
@@ -873,16 +_,48 @@
 
                this.entitiesById.remove(entity.getId());
                this.onEntityRemoved(entity);
+
+               // TODO UNSUPPORTED OPERATION !!!
+               // if (!entity.isAlive()) iterator.remove(); // Paper - don't save dead entities during unload
             }
          }
       }
 
    }
 
+   @Deprecated //Forge: Use removeEntityComplete(entity,boolean)
    public void onEntityRemoved(Entity p_217484_1_) {
-      if (p_217484_1_ instanceof EnderDragonEntity) {
-         for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)p_217484_1_).getSubEntities()) {
-            enderdragonpartentity.remove();
+      removeEntityComplete(p_217484_1_, false);
+   }
+   public void removeEntityComplete(Entity p_217484_1_, boolean keepData) {
+      // Spigot start
+      if ( p_217484_1_ instanceof PlayerEntity )
+      {
+         this.getServer().levels.values().stream().map( ServerWorld::getDataStorage ).forEach( (worldData) ->
+         {
+            for (Object o : worldData.cache.values() )
+            {
+               if ( o instanceof MapData )
+               {
+                  MapData map = (MapData) o;
+                  map.carriedBy.remove( (PlayerEntity) p_217484_1_ );
+                  for (Iterator<MapData.MapInfo> iter = (Iterator<MapData.MapInfo>) map.carriedBy.iterator(); iter.hasNext(); )
+                  {
+                     if ( iter.next().player == p_217484_1_ )
+                     {
+                        map.decorations.remove(p_217484_1_.getDisplayName().getString()); // Paper
+                        iter.remove();
+                     }
+                  }
+               }
+            }
+         } );
+      }
+      // Spigot end
+      if (p_217484_1_.isMultipartEntity()) {
+         for(net.minecraftforge.entity.PartEntity<?> enderdragonpartentity : p_217484_1_.getParts()) {
+            enderdragonpartentity.remove(keepData);
+            this.partEntities.remove(enderdragonpartentity.getId());
          }
       }
 
@@ -894,10 +_,20 @@
       }
 
       this.getScoreboard().entityRemoved(p_217484_1_);
+      // CraftBukkit start - SPIGOT-5278
+      if (p_217484_1_ instanceof DrownedEntity) {
+         this.navigations.remove(((DrownedEntity) p_217484_1_).waterNavigation);
+         this.navigations.remove(((DrownedEntity) p_217484_1_).groundNavigation);
+      } else
+         // CraftBukkit end
       if (p_217484_1_ instanceof MobEntity) {
          this.navigations.remove(((MobEntity)p_217484_1_).getNavigation());
       }
 
+      p_217484_1_.onRemovedFromWorld();
+      p_217484_1_.remove(keepData);
+      p_217484_1_.valid = false; // CraftBukkit
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityLeaveWorldEvent(p_217484_1_, this));
    }
 
    private void add(Entity p_217465_1_) {
@@ -905,28 +_,40 @@
          this.toAddAfterTick.add(p_217465_1_);
       } else {
          this.entitiesById.put(p_217465_1_.getId(), p_217465_1_);
-         if (p_217465_1_ instanceof EnderDragonEntity) {
-            for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)p_217465_1_).getSubEntities()) {
+         if (p_217465_1_.isMultipartEntity()) {
+            for(net.minecraftforge.entity.PartEntity<?> enderdragonpartentity : p_217465_1_.getParts()) {
                this.entitiesById.put(enderdragonpartentity.getId(), enderdragonpartentity);
+               this.partEntities.put(enderdragonpartentity.getId(), enderdragonpartentity);
             }
          }
 
          this.entitiesByUuid.put(p_217465_1_.getUUID(), p_217465_1_);
          this.getChunkSource().addEntity(p_217465_1_);
+         // CraftBukkit start - SPIGOT-5278
+         if (p_217465_1_ instanceof DrownedEntity) {
+            this.navigations.remove(((DrownedEntity) p_217465_1_).waterNavigation);
+            this.navigations.remove(((DrownedEntity) p_217465_1_).groundNavigation);
+         } else
+            // CraftBukkit end
          if (p_217465_1_ instanceof MobEntity) {
             this.navigations.add(((MobEntity)p_217465_1_).getNavigation());
          }
+         p_217465_1_.valid = true; // CraftBukkit
       }
 
+      p_217465_1_.onAddedToWorld();
    }
 
    public void despawn(Entity p_217467_1_) {
+      removeEntity(p_217467_1_, false);
+   }
+   public void removeEntity(Entity p_217467_1_, boolean keepData) {
       if (this.tickingEntities) {
          throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("Removing entity while ticking!"));
       } else {
          this.removeFromChunk(p_217467_1_);
          this.entitiesById.remove(p_217467_1_.getId());
-         this.onEntityRemoved(p_217467_1_);
+         this.removeEntityComplete(p_217467_1_, keepData);
       }
    }
 
@@ -939,17 +_,47 @@
    }
 
    public void removePlayerImmediately(ServerPlayerEntity p_217434_1_) {
-      p_217434_1_.remove();
-      this.despawn(p_217434_1_);
+      removePlayer(p_217434_1_, false);
+   }
+   public void removePlayer(ServerPlayerEntity p_217434_1_, boolean keepData) {
+      p_217434_1_.remove(keepData);
+      this.removeEntity(p_217434_1_, keepData);
       this.updateSleepingPlayerList();
    }
+
+   // CraftBukkit start
+   public boolean strikeLightning(Entity entitylightning) {
+      return this.strikeLightning(entitylightning, LightningStrikeEvent.Cause.UNKNOWN);
+   }
+   public boolean strikeLightning(Entity entitylightning, LightningStrikeEvent.Cause cause) {
+      LightningStrikeEvent lightning = CraftEventFactory.callLightningStrikeEvent((org.bukkit.entity.LightningStrike) entitylightning.getBukkitEntity(), cause);
+      this.getCBServer().getPluginManager().callEvent(lightning);
+      if (lightning.isCancelled()) {
+         return false;
+      }
+      return this.addFreshEntity(entitylightning);
+   }
+   // CraftBukkit end
 
    public void destroyBlockProgress(int p_175715_1_, BlockPos p_175715_2_, int p_175715_3_) {
       for(ServerPlayerEntity serverplayerentity : this.server.getPlayerList().getPlayers()) {
+         // CraftBukkit start
+         PlayerEntity entityhuman = null;
+         Entity entity = this.getEntity(p_175715_1_);
+         if (entity instanceof PlayerEntity) entityhuman = (PlayerEntity) entity;
+         // CraftBukkit end
+
          if (serverplayerentity != null && serverplayerentity.level == this && serverplayerentity.getId() != p_175715_1_) {
             double d0 = (double)p_175715_2_.getX() - serverplayerentity.getX();
             double d1 = (double)p_175715_2_.getY() - serverplayerentity.getY();
             double d2 = (double)p_175715_2_.getZ() - serverplayerentity.getZ();
+
+            // CraftBukkit start
+            if (entityhuman != null && entityhuman instanceof ServerPlayerEntity && !serverplayerentity.getBukkitEntity().canSee(((ServerPlayerEntity) entityhuman).getBukkitEntity())) {
+               continue;
+            }
+            // CraftBukkit end
+
             if (d0 * d0 + d1 * d1 + d2 * d2 < 1024.0D) {
                serverplayerentity.connection.send(new SAnimateBlockBreakPacket(p_175715_1_, p_175715_2_, p_175715_3_));
             }
@@ -959,10 +_,20 @@
    }
 
    public void playSound(@Nullable PlayerEntity p_184148_1_, double p_184148_2_, double p_184148_4_, double p_184148_6_, SoundEvent p_184148_8_, SoundCategory p_184148_9_, float p_184148_10_, float p_184148_11_) {
+      net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_184148_1_, p_184148_8_, p_184148_9_, p_184148_10_, p_184148_11_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_184148_8_ = event.getSound();
+      p_184148_9_ = event.getCategory();
+      p_184148_10_ = event.getVolume();
       this.server.getPlayerList().broadcast(p_184148_1_, p_184148_2_, p_184148_4_, p_184148_6_, p_184148_10_ > 1.0F ? (double)(16.0F * p_184148_10_) : 16.0D, this.dimension(), new SPlaySoundEffectPacket(p_184148_8_, p_184148_9_, p_184148_2_, p_184148_4_, p_184148_6_, p_184148_10_, p_184148_11_));
    }
 
    public void playSound(@Nullable PlayerEntity p_217384_1_, Entity p_217384_2_, SoundEvent p_217384_3_, SoundCategory p_217384_4_, float p_217384_5_, float p_217384_6_) {
+      net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_217384_1_, p_217384_3_, p_217384_4_, p_217384_5_, p_217384_6_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_217384_3_ = event.getSound();
+      p_217384_4_ = event.getCategory();
+      p_217384_5_ = event.getVolume();
       this.server.getPlayerList().broadcast(p_217384_1_, p_217384_2_.getX(), p_217384_2_.getY(), p_217384_2_.getZ(), p_217384_5_ > 1.0F ? (double)(16.0F * p_217384_5_) : 16.0D, this.dimension(), new SSpawnMovingSoundEffectPacket(p_217384_3_, p_217384_4_, p_217384_2_, p_217384_5_, p_217384_6_));
    }
 
@@ -997,9 +_,17 @@
    }
 
    public Explosion explode(@Nullable Entity p_230546_1_, @Nullable DamageSource p_230546_2_, @Nullable ExplosionContext p_230546_3_, double p_230546_4_, double p_230546_6_, double p_230546_8_, float p_230546_10_, boolean p_230546_11_, Explosion.Mode p_230546_12_) {
-      Explosion explosion = new Explosion(this, p_230546_1_, p_230546_2_, p_230546_3_, p_230546_4_, p_230546_6_, p_230546_8_, p_230546_10_, p_230546_11_, p_230546_12_);
-      explosion.explode();
-      explosion.finalizeExplosion(false);
+      // CraftBukkit start
+      Explosion explosion = super.explode(p_230546_1_, p_230546_2_, p_230546_3_, p_230546_4_, p_230546_6_, p_230546_8_, p_230546_10_, p_230546_11_, p_230546_12_);
+      if (explosion.wasCanceled) {
+         return explosion;
+      }
+      /* Remove
+      Explosion explosion = new Explosion(this, exploder, damageSource, context, x, y, z, size, causesFire, mode);
+      explosion.doExplosionA();
+      explosion.doExplosionB(false);
+       */
+      // CraftBukkit end - TODO: Check if explosions are still properly implemented
       if (p_230546_12_ == Explosion.Mode.NONE) {
          explosion.clearToBlow();
       }
@@ -1054,12 +_,19 @@
    }
 
    public <T extends IParticleData> int sendParticles(T p_195598_1_, double p_195598_2_, double p_195598_4_, double p_195598_6_, int p_195598_8_, double p_195598_9_, double p_195598_11_, double p_195598_13_, double p_195598_15_) {
-      SSpawnParticlePacket sspawnparticlepacket = new SSpawnParticlePacket(p_195598_1_, false, p_195598_2_, p_195598_4_, p_195598_6_, (float)p_195598_9_, (float)p_195598_11_, (float)p_195598_13_, (float)p_195598_15_, p_195598_8_);
+      // CraftBukkit - visibility api support
+      return sendParticles(null, p_195598_1_, p_195598_2_, p_195598_4_, p_195598_6_, p_195598_8_, p_195598_9_, p_195598_11_, p_195598_13_, p_195598_15_, false);
+   }
+
+   public <T extends IParticleData> int sendParticles(ServerPlayerEntity sender, T type, double posX, double posY, double posZ, int particleCount, double xOffset, double yOffset, double zOffset, double speed, boolean force) {
+      SSpawnParticlePacket packetplayoutworldparticles = new SSpawnParticlePacket(type, force, posX, posY, posZ, (float) xOffset, (float) yOffset, (float) zOffset, (float) speed, particleCount);
+      // CraftBukkit end
       int i = 0;
 
       for(int j = 0; j < this.players.size(); ++j) {
          ServerPlayerEntity serverplayerentity = this.players.get(j);
-         if (this.sendParticles(serverplayerentity, false, p_195598_2_, p_195598_4_, p_195598_6_, sspawnparticlepacket)) {
+         if (sender != null && !serverplayerentity.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
+         if (this.sendParticles(serverplayerentity, force, posX, posY, posZ, packetplayoutworldparticles)) { // CraftBukkit
             ++i;
          }
       }
@@ -1131,7 +_,13 @@
    @Nullable
    public MapData getMapData(String p_217406_1_) {
       return this.getServer().overworld().getDataStorage().get(() -> {
-         return new MapData(p_217406_1_);
+         // CraftBukkit start
+         // We only get here when the data file exists, but is not a valid map
+         MapData newMap = new MapData(p_217406_1_);
+         MapInitializeEvent event = new MapInitializeEvent(newMap.mapView);
+         Bukkit.getServer().getPluginManager().callEvent(event);
+         return newMap;
+         // CraftBukkit end
       }, p_217406_1_);
    }
 
@@ -1333,6 +_,11 @@
 
    public void blockUpdated(BlockPos p_230547_1_, Block p_230547_2_) {
       if (!this.isDebug()) {
+         // CraftBukkit start
+         if (populating) {
+            return;
+         }
+         // CraftBukkit end
          this.updateNeighborsAt(p_230547_1_, p_230547_2_);
       }
 
@@ -1399,15 +_,49 @@
    }
 
    public static void makeObsidianPlatform(ServerWorld p_241121_0_) {
+      // CraftBukkit start
+      ServerWorld.makeObsidianPlatform(p_241121_0_, null);
+   }
+
+   public static void makeObsidianPlatform(ServerWorld worldserver, Entity entity) {
+      // CraftBukkit end
       BlockPos blockpos = END_SPAWN_POINT;
       int i = blockpos.getX();
       int j = blockpos.getY() - 2;
       int k = blockpos.getZ();
-      BlockPos.betweenClosed(i - 2, j + 1, k - 2, i + 2, j + 3, k + 2).forEach((p_244430_1_) -> {
-         p_241121_0_.setBlockAndUpdate(p_244430_1_, Blocks.AIR.defaultBlockState());
+      // CraftBukkit start
+      org.bukkit.craftbukkit.v1_16_R3.util.BlockStateListPopulator blockList = new org.bukkit.craftbukkit.v1_16_R3.util.BlockStateListPopulator(worldserver);
+      BlockPos.betweenClosed(i - 2, j + 1, k - 2, i + 2, j + 3, k + 2).forEach((p_241122_1_) -> {
+         blockList.setBlock(p_241122_1_, Blocks.AIR.defaultBlockState(), 3);
       });
       BlockPos.betweenClosed(i - 2, j, k - 2, i + 2, j, k + 2).forEach((p_241122_1_) -> {
-         p_241121_0_.setBlockAndUpdate(p_241122_1_, Blocks.OBSIDIAN.defaultBlockState());
+         blockList.setBlock(p_241122_1_, Blocks.OBSIDIAN.defaultBlockState(), 3);
       });
+      org.bukkit.World bworld = worldserver.getWorld();
+      org.bukkit.event.world.PortalCreateEvent portalEvent = new org.bukkit.event.world.PortalCreateEvent((List<org.bukkit.block.BlockState>) (List) blockList.getList(), bworld, (entity == null) ? null : entity.getBukkitEntity(), org.bukkit.event.world.PortalCreateEvent.CreateReason.END_PLATFORM);
+      worldserver.getCBServer().getPluginManager().callEvent(portalEvent);
+      if (!portalEvent.isCancelled()) {
+         blockList.updateList();
+      }
+      // CraftBukkit end
+   }
+
+   protected void initCapabilities() {
+      this.gatherCapabilities();
+      capabilityData = this.getDataStorage().computeIfAbsent(() -> new net.minecraftforge.common.util.WorldCapabilityData(getCapabilities()), net.minecraftforge.common.util.WorldCapabilityData.ID);
+      capabilityData.setCapabilities(getCapabilities());
+   }
+
+   public java.util.stream.Stream<Entity> getEntities() {
+       return entitiesById.values().stream();
+   }
+
+   @Override
+   public java.util.Collection<net.minecraftforge.entity.PartEntity<?>> getPartEntities() {
+      return this.partEntities.values();
+   }
+
+   public IServerWorldInfo getServerWorldInfo(){
+      return this.getServer().getWorldData().overworldData();
    }
 }
