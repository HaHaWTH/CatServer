--- a/net/minecraft/command/Commands.java
+++ b/net/minecraft/command/Commands.java
@@ -1,5 +_,6 @@
 package net.minecraft.command;
 
+import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.ParseResults;
@@ -11,6 +_,8 @@
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
+import java.util.Collection;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Predicate;
@@ -102,12 +_,16 @@
 import net.minecraft.util.text.event.HoverEvent;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.event.player.PlayerCommandSendEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 
 public class Commands {
    private static final Logger LOGGER = LogManager.getLogger();
    private final CommandDispatcher<CommandSource> dispatcher = new CommandDispatcher<>();
 
    public Commands(Commands.EnvironmentType p_i232148_1_) {
+      this(); // CraftBukkit
       AdvancementCommand.register(this.dispatcher);
       AttributeCommand.register(this.dispatcher);
       ExecuteCommand.register(this.dispatcher);
@@ -186,16 +_,59 @@
       if (p_i232148_1_.includeIntegrated) {
          PublishCommand.register(this.dispatcher);
       }
+      net.minecraftforge.event.ForgeEventFactory.onCommandRegister(this.dispatcher, p_i232148_1_);
 
       this.dispatcher.findAmbiguities((p_201302_1_, p_201302_2_, p_201302_3_, p_201302_4_) -> {
-         LOGGER.warn("Ambiguity between arguments {} and {} with inputs: {}", this.dispatcher.getPath(p_201302_2_), this.dispatcher.getPath(p_201302_3_), p_201302_4_);
+         //LOGGER.warn("Ambiguity between arguments {} and {} with inputs: {}", this.dispatcher.getPath(p_201302_2_), this.dispatcher.getPath(p_201302_3_), p_201302_4_); // CraftBukkit
       });
+   }
+
+   // CraftBukkit start
+   public Commands() {
       this.dispatcher.setConsumer((p_197058_0_, p_197058_1_, p_197058_2_) -> {
          p_197058_0_.getSource().onCommandComplete(p_197058_0_, p_197058_1_, p_197058_2_);
       });
    }
 
+   public int dispatchServerCommand(CommandSource sender, String command) {
+      Joiner joiner = Joiner.on(" ");
+      if (command.startsWith("/")) {
+         command = command.substring(1);
+      }
+      ServerCommandEvent event = new ServerCommandEvent(sender.getBukkitSender(), command);
+      org.bukkit.Bukkit.getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return 0;
+      }
+      command = event.getCommand();
+      String[] args = command.split(" ");
+      String cmd = args[0];
+      if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
+      if (cmd.startsWith("bukkit:")) cmd = cmd.substring("bukkit:".length());
+      // Block disallowed commands
+      if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op")
+          || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip")
+          || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")) {
+         return 0;
+      }
+      // Handle vanilla commands;
+      if (sender.getLevel().getCBServer().getCommandBlockOverride(args[0])) {
+         args[0] = "minecraft:" + args[0];
+      }
+      return this.performCommand(sender, joiner.join(args));
+   }
+
+   public String labell;
    public int performCommand(CommandSource p_197059_1_, String p_197059_2_) {
+      if (labell == null) labell = p_197059_2_;
+      // CraftBukkit end
+      ServerCommandEvent bukevent = new ServerCommandEvent(p_197059_1_.getBukkitSender(), p_197059_2_);
+      Bukkit.getPluginManager().callEvent(bukevent);
+      if (bukevent.isCancelled()) return 0;
+      final String label;
+      if (p_197059_2_.equals(labell)) label = bukevent.getCommand();
+      else label = labell;
+      p_197059_2_ = bukevent.getCommand();
       StringReader stringreader = new StringReader(p_197059_2_);
       if (stringreader.canRead() && stringreader.peek() == '/') {
          stringreader.skip();
@@ -205,7 +_,15 @@
 
       try {
          try {
-            return this.dispatcher.execute(stringreader, p_197059_1_);
+            ParseResults<CommandSource> parse = this.dispatcher.parse(stringreader, p_197059_1_);
+            net.minecraftforge.event.CommandEvent event = new net.minecraftforge.event.CommandEvent(parse);
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) {
+               if (event.getException() != null) {
+                  com.google.common.base.Throwables.throwIfUnchecked(event.getException());
+               }
+               return 1;
+            }
+            return this.dispatcher.execute(event.getParseResults());
          } catch (CommandException commandexception) {
             p_197059_1_.sendFailure(commandexception.getComponent());
             return 0;
@@ -214,7 +_,7 @@
             if (commandsyntaxexception.getInput() != null && commandsyntaxexception.getCursor() >= 0) {
                int j = Math.min(commandsyntaxexception.getInput().length(), commandsyntaxexception.getCursor());
                IFormattableTextComponent iformattabletextcomponent1 = (new StringTextComponent("")).withStyle(TextFormatting.GRAY).withStyle((p_211705_1_) -> {
-                  return p_211705_1_.withClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, p_197059_2_));
+                  return p_211705_1_.withClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, label));
                });
                if (j > 10) {
                   iformattabletextcomponent1.append("...");
@@ -254,19 +_,49 @@
          return 0;
       } finally {
          p_197059_1_.getServer().getProfiler().pop();
+         labell = null;
       }
+   }
+
+   public int handleCommand(CommandSource source, String command, String l) {
+      labell = l;
+      return performCommand(source, command);
    }
 
    public void sendCommands(ServerPlayerEntity p_197051_1_) {
-      Map<CommandNode<CommandSource>, CommandNode<ISuggestionProvider>> map = Maps.newHashMap();
+      if ( org.spigotmc.SpigotConfig.tabComplete < 0 ) return; // Spigot
+      // CraftBukkit start
+      // Register Vanilla commands into builtRoot as before
+      Map<CommandNode<CommandSource>, CommandNode<ISuggestionProvider>> map = Maps.newIdentityHashMap(); // Use identity to prevent aliasing issues
+      RootCommandNode vanillaRoot = new RootCommandNode();
+      RootCommandNode<CommandSource> vanilla = p_197051_1_.server.vanillaCommandDispatcher.getDispatcher().getRoot();
+      map.put(vanilla, vanillaRoot);
+      this.fillUsableCommands(vanilla, vanillaRoot, p_197051_1_.createCommandSourceStack(), (Map) map);
+      // Now build the global commands in a second pass
       RootCommandNode<ISuggestionProvider> rootcommandnode = new RootCommandNode<>();
       map.put(this.dispatcher.getRoot(), rootcommandnode);
       this.fillUsableCommands(this.dispatcher.getRoot(), rootcommandnode, p_197051_1_.createCommandSourceStack(), map);
+
+      Collection<String> bukkit = new LinkedHashSet<>();
+      for (CommandNode node : rootcommandnode.getChildren()) {
+         bukkit.add(node.getName());
+      }
+      PlayerCommandSendEvent event = new PlayerCommandSendEvent(p_197051_1_.getBukkitEntity(), new LinkedHashSet<>(bukkit));
+      event.getPlayer().getServer().getPluginManager().callEvent(event);
+      // Remove labels that were removed during the event
+      for (String orig : bukkit) {
+         if (!event.getCommands().contains(orig)) {
+            try { CommandNode.class.getMethod("removeCommand", String.class).invoke(rootcommandnode, orig); } catch (Exception e) { throw new RuntimeException("The exception shouldn't happen!", e); } // Fix compile error
+         }
+      }
+      // CraftBukkit end
+
       p_197051_1_.connection.send(new SCommandListPacket(rootcommandnode));
    }
 
    private void fillUsableCommands(CommandNode<CommandSource> p_197052_1_, CommandNode<ISuggestionProvider> p_197052_2_, CommandSource p_197052_3_, Map<CommandNode<CommandSource>, CommandNode<ISuggestionProvider>> p_197052_4_) {
       for(CommandNode<CommandSource> commandnode : p_197052_1_.getChildren()) {
+         if ( !org.spigotmc.SpigotConfig.sendNamespaced && commandnode.getName().contains( ":" ) ) continue; // Spigot
          if (commandnode.canUse(p_197052_3_)) {
             ArgumentBuilder<ISuggestionProvider, ?> argumentbuilder = (ArgumentBuilder) commandnode.createBuilder();
             argumentbuilder.requires((p_197060_0_) -> {
