--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -2,10 +_,12 @@
 
 import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
+import moe.loliserver.Metrics;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -35,14 +_,16 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ServerPropertiesProvider;
 import net.minecraft.server.gui.MinecraftServerGui;
+import net.minecraft.server.management.PlayerList;
 import net.minecraft.server.management.PlayerProfileCache;
 import net.minecraft.server.management.PreYggdrasilConverter;
 import net.minecraft.tileentity.SkullTileEntity;
+import net.minecraft.util.CryptManager;
 import net.minecraft.util.DefaultUncaughtExceptionHandler;
-import net.minecraft.util.DefaultWithNameUncaughtExceptionHandler;
 import net.minecraft.util.NonNullList;
 import net.minecraft.util.SharedConstants;
 import net.minecraft.util.Util;
+import net.minecraft.util.datafix.codec.DatapackCodec;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.registry.DynamicRegistries;
@@ -55,17 +_,24 @@
 import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.storage.IServerConfiguration;
 import net.minecraft.world.storage.SaveFormat;
+import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.io.IoBuilder;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.v1_16_R3.SpigotTimings;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.bukkit.event.server.ServerCommandEvent;
+import org.bukkit.plugin.Plugin;
 
 public class DedicatedServer extends MinecraftServer implements IServer {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Pattern SHA1 = Pattern.compile("^[a-fA-F0-9]{40}$");
    public final List<PendingCommand> consoleInput = Collections.synchronizedList(Lists.newArrayList());
    private QueryThread queryThreadGs4;
-   private final RConConsoleSource rconConsoleSource;
+   public final RConConsoleSource rconConsoleSource;
    private MainThread rconThread;
-   private final ServerPropertiesProvider settings;
+   public ServerPropertiesProvider settings;
    @Nullable
    private MinecraftServerGui gui;
    @Nullable
@@ -81,12 +_,35 @@
    public boolean initServer() throws IOException {
       Thread thread = new Thread("Server console handler") {
          public void run() {
+            // CraftBukkit start
+            if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
             BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
+            // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+            try {
+               System.in.available();
+            } catch (IOException ex) {
+               return;
+            }
+            // CraftBukkit end
+            String s3;
+            try {
+               // CraftBukkit start - JLine disabling compatibility
+               while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning()) {
+                  s3 = bufferedreader.readLine();
 
-            String s1;
-            try {
-               while(!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning() && (s1 = bufferedreader.readLine()) != null) {
-                  DedicatedServer.this.handleConsoleInput(s1, DedicatedServer.this.createCommandSourceStack());
+                  // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                  if (s3 == null) {
+                     try {
+                        Thread.sleep(50L);
+                     } catch (InterruptedException ex) {
+                        Thread.currentThread().interrupt();
+                     }
+                     continue;
+                  }
+                  if (s3.trim().length() > 0) { // Trim to filter lines which are just spaces
+                     DedicatedServer.this.handleConsoleInput(s3, DedicatedServer.this.createCommandSourceStack());
+                  }
+                  // CraftBukkit end
                }
             } catch (IOException ioexception1) {
                DedicatedServer.LOGGER.error("Exception handling console input", (Throwable)ioexception1);
@@ -94,6 +_,20 @@
 
          }
       };
+
+      // CraftBukkit start - TODO: handle command-line logging arguments
+      java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+      global.setUseParentHandlers(false);
+      for (java.util.logging.Handler handler : global.getHandlers()) {
+         global.removeHandler(handler);
+      }
+      global.addHandler(new org.bukkit.craftbukkit.v1_16_R3.util.ForwardLogHandler());
+
+      final org.apache.logging.log4j.Logger logger = LogManager.getRootLogger();
+
+      System.setOut(IoBuilder.forLogger(logger).setLevel(Level.INFO).buildPrintStream());
+      System.setErr(IoBuilder.forLogger(logger).setLevel(Level.WARN).buildPrintStream());
+      // CraftBukkit end
       thread.setDaemon(true);
       thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
       thread.start();
@@ -157,16 +_,23 @@
          return false;
       } else {
          this.setPlayerList(new DedicatedPlayerList(this, this.registryHolder, this.playerDataStorage));
+         catserver.server.hook.ForgeEventHook.initHook(); // CatServer
+         server.loadPlugins();
+         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
          long i = Util.getNanos();
          this.setMaxBuildHeight(serverproperties.maxBuildHeight);
          SkullTileEntity.setProfileCache(this.getProfileCache());
          SkullTileEntity.setSessionService(this.getSessionService());
          PlayerProfileCache.setUsesAuthentication(this.usesAuthentication());
+         if (!net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerAboutToStart(this)) return false;
          LOGGER.info("Preparing level \"{}\"", (Object)this.getLevelIdName());
          this.loadLevel();
          long j = Util.getNanos() - i;
          String s = String.format(Locale.ROOT, "%.3fs", (double)j / 1.0E9D);
          LOGGER.info("Done ({})! For help, type \"help\"", (Object)s);
+         Metrics.LoliServerMetrics.startMetrics();
+         new catserver.server.utils.VersionCheck();
+         this.nextTickTime = Util.getMillis(); //Forge: Update server time to prevent watchdog/spaming during long load.
          if (serverproperties.announcePlayerAchievements != null) {
             this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS).set(serverproperties.announcePlayerAchievements, this);
          }
@@ -179,23 +_,18 @@
          if (serverproperties.enableRcon) {
             LOGGER.info("Starting remote control listener");
             this.rconThread = MainThread.create(this);
-         }
-
-         if (this.getMaxTickLength() > 0L) {
-            Thread thread1 = new Thread(new ServerHangWatchdog(this));
-            thread1.setUncaughtExceptionHandler(new DefaultWithNameUncaughtExceptionHandler(LOGGER));
-            thread1.setName("Server Watchdog");
-            thread1.setDaemon(true);
-            thread1.start();
+            this.remoteConsole = new org.bukkit.craftbukkit.v1_16_R3.command.CraftRemoteConsoleCommandSender(this.rconConsoleSource); // CraftBukkit
          }
 
          Items.AIR.fillItemCategory(ItemGroup.TAB_SEARCH, NonNullList.create());
+         // <3 you Grum for this, saves us ~30 patch files! --^
          if (serverproperties.enableJmxMonitoring) {
             ServerInfoMBean.registerJmxMonitoring(this);
          }
-
-         return true;
+         net.minecraftforge.server.permission.PermissionAPI.setPermissionHook(); // CatServer
+         return net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStarting(this);
       }
+
    }
 
    public boolean isSpawningAnimals() {
@@ -280,7 +_,6 @@
       if (this.queryThreadGs4 != null) {
          this.queryThreadGs4.stop();
       }
-
    }
 
    public void tickChildren(BooleanSupplier p_71190_1_) {
@@ -303,11 +_,21 @@
    }
 
    public void handleConsoleInputs() {
+      SpigotTimings.serverCommandTimer.startTiming(); // Spigot
       while(!this.consoleInput.isEmpty()) {
          PendingCommand pendingcommand = this.consoleInput.remove(0);
-         this.getCommands().performCommand(pendingcommand.source, pendingcommand.msg);
+         // CraftBukkit start - ServerCommand for preprocessing
+         ServerCommandEvent event = new ServerCommandEvent(this.console, pendingcommand.msg);
+         this.server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            continue;
+         }
+         pendingcommand = new PendingCommand(event.getCommand(), pendingcommand.source);
+         this.server.dispatchServerCommand(this.console, pendingcommand);
+         // CraftBukkit end
       }
 
+      SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
    }
 
    public boolean isDedicatedServer() {
@@ -410,7 +_,7 @@
       return this.getProperties().broadcastConsoleToOps;
    }
 
-   public int getAbsoluteMaxWorldSize() {
+    public int getAbsoluteMaxWorldSize() {
       return this.getProperties().maxWorldSize;
    }
 
@@ -489,13 +_,39 @@
    }
 
    public String getPluginNames() {
-      return "";
+      // CraftBukkit start - Whole method
+      StringBuilder result = new StringBuilder();
+      Plugin[] plugins = this.server.getPluginManager().getPlugins();
+      result.append(this.server.getName());
+      result.append(" on Bukkit ");
+      result.append(this.server.getBukkitVersion());
+      if (plugins.length > 0 && this.server.getQueryPlugins()) {
+         result.append(": ");
+         for (int i = 0; i < plugins.length; ++i) {
+            if (i > 0) {
+               result.append("; ");
+            }
+            result.append(plugins[i].getDescription().getName());
+            result.append(" ");
+            result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+         }
+      }
+      return result.toString();
+      // CraftBukkit end
    }
 
    public String runCommand(String p_71252_1_) {
       this.rconConsoleSource.prepareForCommand();
       this.executeBlocking(() -> {
-         this.getCommands().performCommand(this.rconConsoleSource.createCommandSourceStack(), p_71252_1_);
+         // CraftBukkit start - fire RemoteServerCommandEvent
+         RemoteServerCommandEvent event = new RemoteServerCommandEvent(this.remoteConsole, p_71252_1_);
+         this.server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+         PendingCommand serverCommand = new PendingCommand(event.getCommand(), this.rconConsoleSource.createCommandSourceStack());
+         this.server.dispatchServerCommand(this.remoteConsole, serverCommand);
+         // CraftBukkit end
       });
       return this.rconConsoleSource.getCommandResponse();
    }
@@ -515,6 +_,11 @@
       return false;
    }
 
+   @Override //Forge: Enable formated text for colors in console.
+   public void sendMessage(net.minecraft.util.text.ITextComponent message, java.util.UUID p_145747_2_) {
+      LOGGER.info(message.getString());
+   }
+
    public int getScaledTrackingDistance(int p_230512_1_) {
       return this.getProperties().entityBroadcastRangePercentage * p_230512_1_ / 100;
    }
@@ -531,4 +_,10 @@
    public IChatFilter createTextFilterForPlayer(ServerPlayerEntity p_244435_1_) {
       return this.textFilterClient != null ? this.textFilterClient.createContext(p_244435_1_.getGameProfile()) : null;
    }
+
+   @Override
+   public CommandSender getBukkitSender(CommandSource wrapper) {
+      return console;
+   }
+   // CraftBukkit end
 }
