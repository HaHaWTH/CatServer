--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -11,6 +_,7 @@
 import java.net.Proxy;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.Arrays;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.BooleanSupplier;
@@ -31,6 +_,7 @@
 import net.minecraft.server.management.PlayerProfileCache;
 import net.minecraft.util.DefaultUncaughtExceptionHandler;
 import net.minecraft.util.RegistryKey;
+import net.minecraft.util.SharedConstants;
 import net.minecraft.util.Util;
 import net.minecraft.util.WorldOptimizer;
 import net.minecraft.util.datafix.DataFixesManager;
@@ -71,40 +_,70 @@
       OptionSpec<Integer> optionspec11 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
       OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
       OptionSpec<String> optionspec13 = optionparser.nonOptions();
-
+      optionparser.accepts("allowUpdates").withRequiredArg().ofType(Boolean.class).defaultsTo(Boolean.TRUE); // Forge: allow mod updates to proceed
+      optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
+      optionparser.acceptsAll(Arrays.asList("b", "bukkit-settings"), "File for bukkit settings")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("bukkit.yml"))
+              .describedAs("Yml file");
+
+      optionparser.acceptsAll(Arrays.asList("C", "commands-settings"), "File for command settings")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("commands.yml"))
+              .describedAs("Yml file");
+      optionparser.acceptsAll(Arrays.asList("S", "spigot-settings"), "File for spigot settings")
+                .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("spigot.yml"))
+              .describedAs("Yml file");
+      optionparser.acceptsAll(Arrays.asList("P", "plugins"), "Plugin directory to use")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("plugins"))
+              .describedAs("Plugin directory");
+
+      catserver.server.utils.ServerUtils.acceptEula(); // CatServer
       try {
          OptionSet optionset = optionparser.parse(p_main_0_);
+         MinecraftServer.options = optionset;
          if (optionset.has(optionspec7)) {
             optionparser.printHelpOn(System.err);
             return;
          }
+         Path path1 = Paths.get("eula.txt");
+         ServerEula servereula = new ServerEula(path1);
+
+         if (!servereula.hasAgreedToEULA()) {
+            LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+            return;
+         }
 
          CrashReport.preload();
          Bootstrap.bootStrap();
          Bootstrap.validate();
          Util.startTimerHackThread();
+         if (!optionset.has(optionspec1)) net.minecraftforge.fml.server.ServerModLoader.load(); // Load mods before we load almost anything else anymore. Single spot now. Only loads if they haven't passed the initserver param
          DynamicRegistries.Impl dynamicregistries$impl = DynamicRegistries.builtin();
          Path path = Paths.get("server.properties");
          ServerPropertiesProvider serverpropertiesprovider = new ServerPropertiesProvider(dynamicregistries$impl, path);
          serverpropertiesprovider.forceSave();
-         Path path1 = Paths.get("eula.txt");
-         ServerEula servereula = new ServerEula(path1);
          if (optionset.has(optionspec1)) {
             LOGGER.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
             return;
          }
 
-         if (!servereula.hasAgreedToEULA()) {
-            LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            return;
-         }
-
          File file1 = new File(optionset.valueOf(optionspec9));
          YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY);
          MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
          GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
          PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository, new File(file1, MinecraftServer.USERID_CACHE_FILE.getName()));
          String s = Optional.ofNullable(optionset.valueOf(optionspec10)).orElse(serverpropertiesprovider.getProperties().levelName);
+         if (s == null || s.isEmpty() || new File(file1, s).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+            LOGGER.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s);
+            return;
+         }
          SaveFormat saveformat = SaveFormat.createDefault(file1.toPath());
          SaveFormat.LevelSave saveformat$levelsave = saveformat.createAccess(s);
          MinecraftServer.convertFromRegionFormatIfNeeded(saveformat$levelsave);
@@ -115,7 +_,25 @@
          }
 
          ResourcePackList resourcepacklist = new ResourcePackList(new ServerPackFinder(), new FolderPackFinder(saveformat$levelsave.getLevelPath(FolderName.DATAPACK_DIR).toFile(), IPackNameDecorator.WORLD));
+         // CraftBukkit start
+         File bukkitDataPackFolder = new File(saveformat$levelsave.getLevelPath(FolderName.DATAPACK_DIR).toFile(), "bukkit");
+         if (!bukkitDataPackFolder.exists()) {
+            bukkitDataPackFolder.mkdirs();
+         }
+         File mcMeta = new File(bukkitDataPackFolder, "pack.mcmeta");
+         try {
+            com.google.common.io.Files.write("{\n"
+                    + "    \"pack\": {\n"
+                    + "        \"description\": \"Data pack for resources provided by Bukkit plugins\",\n"
+                    + "        \"pack_format\": " + SharedConstants.getCurrentVersion().getPackVersion() + "\n"
+                    + "    }\n"
+                    + "}\n", mcMeta, com.google.common.base.Charsets.UTF_8);
+         } catch (java.io.IOException ex) {
+            throw new RuntimeException("Could not initialize Bukkit datapack", ex);
+         }
+         // CraftBukkit end
          DatapackCodec datapackcodec1 = MinecraftServer.configurePackRepository(resourcepacklist, datapackcodec == null ? DatapackCodec.DEFAULT : datapackcodec, flag);
+         MinecraftServer.defaultDatapackCodec = datapackcodec1; // CatServer
          CompletableFuture<DataPackRegistries> completablefuture = DataPackRegistries.loadResources(resourcepacklist.openAllSelected(), Commands.EnvironmentType.DEDICATED, serverpropertiesprovider.getProperties().functionPermissionLevel, Util.backgroundExecutor(), Runnable::run);
 
          DataPackRegistries datapackregistries;
@@ -142,6 +_,8 @@
                dimensiongeneratorsettings = optionset.has(optionspec3) ? serverproperties.worldGenSettings.withBonusChest() : serverproperties.worldGenSettings;
             }
 
+            // Forge: Deserialize the DimensionGeneratorSettings to ensure modded dims are loaded on first server load (see SimpleRegistryCodec#decode). Vanilla behaviour only loads from the server.properties and deserializes only after the 2nd server load.
+            dimensiongeneratorsettings = DimensionGeneratorSettings.CODEC.encodeStart(net.minecraft.util.registry.WorldGenSettingsExport.create(NBTDynamicOps.INSTANCE, dynamicregistries$impl), dimensiongeneratorsettings).flatMap(nbt -> DimensionGeneratorSettings.CODEC.parse(worldsettingsimport, nbt)).getOrThrow(false, errorMsg->{});
             iserverconfiguration = new ServerWorldInfo(worldsettings, dimensiongeneratorsettings, Lifecycle.stable());
          }
 
@@ -159,16 +_,13 @@
             dedicatedserver1.setPort(optionset.valueOf(optionspec11));
             dedicatedserver1.setDemo(optionset.has(optionspec2));
             dedicatedserver1.setId(optionset.valueOf(optionspec12));
-            boolean flag1 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec13).contains("nogui");
-            if (flag1 && !GraphicsEnvironment.isHeadless()) {
-               dedicatedserver1.showGui();
-            }
 
             return dedicatedserver1;
          });
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
                dedicatedserver.halt(true);
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
          thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
