--- a/net/minecraft/server/management/PlayerList.java
+++ b/net/minecraft/server/management/PlayerList.java
@@ -1,25 +_,27 @@
 package net.minecraft.server.management;
 
+import com.google.common.base.Predicate;
+import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import moe.loliserver.BukkitInjector;
 import com.mojang.authlib.GameProfile;
 import com.mojang.serialization.Dynamic;
 import io.netty.buffer.Unpooled;
 import java.io.File;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.text.SimpleDateFormat;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.PlayerAdvancements;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
+import net.minecraft.entity.ai.attributes.Attributes;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.nbt.CompoundNBT;
@@ -27,10 +_,12 @@
 import net.minecraft.network.IPacket;
 import net.minecraft.network.NetworkManager;
 import net.minecraft.network.PacketBuffer;
+import net.minecraft.network.login.ServerLoginNetHandler;
 import net.minecraft.network.play.ServerPlayNetHandler;
 import net.minecraft.network.play.server.SChangeGameStatePacket;
 import net.minecraft.network.play.server.SChatPacket;
 import net.minecraft.network.play.server.SCustomPayloadPlayPacket;
+import net.minecraft.network.play.server.SEntityMetadataPacket;
 import net.minecraft.network.play.server.SEntityStatusPacket;
 import net.minecraft.network.play.server.SHeldItemChangePacket;
 import net.minecraft.network.play.server.SJoinGamePacket;
@@ -54,6 +_,7 @@
 import net.minecraft.scoreboard.ServerScoreboard;
 import net.minecraft.scoreboard.Team;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.stats.ServerStatisticsManager;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.BlockTags;
@@ -83,8 +_,22 @@
 import net.minecraft.world.storage.PlayerData;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import net.minecraftforge.fml.hooks.BasicEventHooks;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.v1_16_R3.CraftServer;
+import org.bukkit.craftbukkit.v1_16_R3.CraftWorld;
+import org.bukkit.craftbukkit.v1_16_R3.command.ColouredConsoleSender;
+import org.bukkit.craftbukkit.v1_16_R3.util.CraftChatMessage;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerChangedWorldEvent;
+import org.bukkit.event.player.PlayerJoinEvent;
+import org.bukkit.event.player.PlayerLoginEvent;
+import org.bukkit.event.player.PlayerQuitEvent;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import org.spigotmc.event.player.PlayerSpawnLocationEvent;
 
 public abstract class PlayerList {
    public static final File USERBANLIST_FILE = new File("banned-players.json");
@@ -94,7 +_,7 @@
    private static final Logger LOGGER = LogManager.getLogger();
    private static final SimpleDateFormat BAN_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
    private final MinecraftServer server;
-   private final List<ServerPlayerEntity> players = Lists.newArrayList();
+   public final List<ServerPlayerEntity> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
    private final Map<UUID, ServerPlayerEntity> playersByUUID = Maps.newHashMap();
    private final BanList bans = new BanList(USERBANLIST_FILE);
    private final IPBanList ipBans = new IPBanList(IPBANLIST_FILE);
@@ -102,7 +_,7 @@
    private final WhiteList whitelist = new WhiteList(WHITELIST_FILE);
    private final Map<UUID, ServerStatisticsManager> stats = Maps.newHashMap();
    private final Map<UUID, PlayerAdvancements> advancements = Maps.newHashMap();
-   private final PlayerData playerIo;
+   public final PlayerData playerIo;
    private boolean doWhiteList;
    private final DynamicRegistries.Impl registryHolder;
    protected final int maxPlayers;
@@ -110,8 +_,30 @@
    private GameType overrideGameMode;
    private boolean allowCheatsForAllPlayers;
    private int sendAllPlayerInfoIn;
+   private final List<ServerPlayerEntity> playersView = java.util.Collections.unmodifiableList(players);
+
+   // CraftBukkit start
+   private CraftServer cserver;
+   private final Map<String,ServerPlayerEntity> playersByName = new java.util.HashMap<>(); // Spigot
+   private String quitMessage;
+
 
    public PlayerList(MinecraftServer p_i231425_1_, DynamicRegistries.Impl p_i231425_2_, PlayerData p_i231425_3_, int p_i231425_4_) {
+      if(cserver == null) {
+         this.cserver = new CraftServer((DedicatedServer) p_i231425_1_, this);
+         BukkitInjector.init();
+         p_i231425_1_.server = cserver;
+         p_i231425_1_.console = ColouredConsoleSender.getInstance();
+         // Spigot start
+         org.spigotmc.SpigotConfig.init(new File("./spigot.yml"));
+         org.spigotmc.SpigotConfig.registerCommands();
+         // Spigot end
+      } else {
+         cserver.setPlayerList(this);
+      }
+
+      // CraftBukkit end
+
       this.server = p_i231425_1_;
       this.registryHolder = p_i231425_2_;
       this.maxPlayers = p_i231425_4_;
@@ -125,6 +_,14 @@
       String s = gameprofile1 == null ? gameprofile.getName() : gameprofile1.getName();
       playerprofilecache.add(gameprofile);
       CompoundNBT compoundnbt = this.load(p_72355_2_);
+
+      // CraftBukkit start - Better rename detection
+      if (compoundnbt != null && compoundnbt.contains("bukkit")) {
+         CompoundNBT bukkit = compoundnbt.getCompound("bukkit");
+         s = bukkit.contains("lastKnownName", 8) ? bukkit.getString("lastKnownName") : s;
+      }
+      // CraftBukkit end
+
       RegistryKey<World> registrykey = compoundnbt != null ? DimensionType.parseLegacy(new Dynamic<>(NBTDynamicOps.INSTANCE, compoundnbt.get("Dimension"))).resultOrPartial(LOGGER::error).orElse(World.OVERWORLD) : World.OVERWORLD;
       ServerWorld serverworld = this.server.getLevel(registrykey);
       ServerWorld serverworld1;
@@ -142,20 +_,40 @@
          s1 = p_72355_1_.getRemoteAddress().toString();
       }
 
+      catserver.server.PlayerDataFixer.checkLocation(p_72355_2_); // CatServer - fix invalid location
+      catserver.server.PlayerDataFixer.checkHealth(p_72355_2_); // CatServer - fix invalid health
+
+      // Spigot start - spawn location event
+      Player bukkitPlayer = p_72355_2_.getBukkitEntity();
+      PlayerSpawnLocationEvent ev = new PlayerSpawnLocationEvent(bukkitPlayer, bukkitPlayer.getLocation());
+      Bukkit.getPluginManager().callEvent(ev);
+      Location loc = ev.getSpawnLocation();
+      serverworld1 = ((CraftWorld) loc.getWorld()).getHandle();
+      p_72355_2_.setLevel(serverworld1);
+      p_72355_2_.gameMode.setLevel((ServerWorld) p_72355_2_.level);
+      p_72355_2_.absMoveTo(loc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), loc.getPitch());
+      // Spigot end
+
       LOGGER.info("{}[{}] logged in with entity id {} at ({}, {}, {})", p_72355_2_.getName().getString(), s1, p_72355_2_.getId(), p_72355_2_.getX(), p_72355_2_.getY(), p_72355_2_.getZ());
       IWorldInfo iworldinfo = serverworld1.getLevelData();
       this.updatePlayerGameMode(p_72355_2_, (ServerPlayerEntity)null, serverworld1);
       ServerPlayNetHandler serverplaynethandler = new ServerPlayNetHandler(this.server, p_72355_1_, p_72355_2_);
-      GameRules gamerules = serverworld1.getGameRules();
+      p_72355_2_.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
+	  net.minecraftforge.fml.network.NetworkHooks.sendMCRegistryPackets(p_72355_1_, "PLAY_TO_CLIENT");
+	  GameRules gamerules = serverworld1.getGameRules();
       boolean flag = gamerules.getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN);
       boolean flag1 = gamerules.getBoolean(GameRules.RULE_REDUCEDDEBUGINFO);
-      serverplaynethandler.send(new SJoinGamePacket(p_72355_2_.getId(), p_72355_2_.gameMode.getGameModeForPlayer(), p_72355_2_.gameMode.getPreviousGameModeForPlayer(), BiomeManager.obfuscateSeed(serverworld1.getSeed()), iworldinfo.isHardcore(), this.server.levelKeys(), this.registryHolder, serverworld1.dimensionType(), serverworld1.dimension(), this.getMaxPlayers(), this.viewDistance, flag1, !flag, serverworld1.isDebug(), serverworld1.isFlat()));
+      serverplaynethandler.send(new SJoinGamePacket(p_72355_2_.getId(), p_72355_2_.gameMode.getGameModeForPlayer(), p_72355_2_.gameMode.getPreviousGameModeForPlayer(), BiomeManager.obfuscateSeed(serverworld1.getSeed()), iworldinfo.isHardcore(), this.server.levelKeys(), this.registryHolder, serverworld1.dimensionType(), serverworld1.dimension(), this.getMaxPlayers(), serverworld1.spigotConfig.viewDistance, flag1, !flag, serverworld1.isDebug(), serverworld1.isFlat()));
       serverplaynethandler.send(new SCustomPayloadPlayPacket(SCustomPayloadPlayPacket.BRAND, (new PacketBuffer(Unpooled.buffer())).writeUtf(this.getServer().getServerModName())));
       serverplaynethandler.send(new SServerDifficultyPacket(iworldinfo.getDifficulty(), iworldinfo.isDifficultyLocked()));
       serverplaynethandler.send(new SPlayerAbilitiesPacket(p_72355_2_.abilities));
       serverplaynethandler.send(new SHeldItemChangePacket(p_72355_2_.inventory.selected));
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.OnDatapackSyncEvent(this, p_72355_2_));
       serverplaynethandler.send(new SUpdateRecipesPacket(this.server.getRecipeManager().getRecipes()));
       serverplaynethandler.send(new STagsListPacket(this.server.getTags()));
+      serverplaynethandler.send(new SEntityStatusPacket(p_72355_2_, (byte) (serverworld1.getGameRules().getBoolean(GameRules.RULE_REDUCEDDEBUGINFO) ? 22 : 23))); // Paper - fix this rule not being initialized on the client
+      net.minecraftforge.fml.network.NetworkHooks.syncCustomTagTypes(p_72355_2_, this.server.getTags());
+
       this.sendPlayerPermissionLevel(p_72355_2_);
       p_72355_2_.getStats().markAllDirty();
       p_72355_2_.getRecipeBook().sendInitialRecipeBook(p_72355_2_);
@@ -167,19 +_,54 @@
       } else {
          iformattabletextcomponent = new TranslationTextComponent("multiplayer.player.joined.renamed", p_72355_2_.getDisplayName(), s);
       }
+      iformattabletextcomponent.withStyle(TextFormatting.YELLOW);
+      String joinMessage = CraftChatMessage.fromComponent(iformattabletextcomponent);
 
-      this.broadcastMessage(iformattabletextcomponent.withStyle(TextFormatting.YELLOW), ChatType.SYSTEM, Util.NIL_UUID);
       serverplaynethandler.teleport(p_72355_2_.getX(), p_72355_2_.getY(), p_72355_2_.getZ(), p_72355_2_.yRot, p_72355_2_.xRot);
-      this.players.add(p_72355_2_);
+      this.addPlayer(p_72355_2_);
+      this.playersByName.put(p_72355_2_.getScoreboardName().toLowerCase(java.util.Locale.ROOT), p_72355_2_); // Spigot
       this.playersByUUID.put(p_72355_2_.getUUID(), p_72355_2_);
-      this.broadcastAll(new SPlayerListItemPacket(SPlayerListItemPacket.Action.ADD_PLAYER, p_72355_2_));
+      // this.broadcastAll(new SPlayerListItemPacket(SPlayerListItemPacket.Action.ADD_PLAYER, p_72355_2_));
+
+      // CraftBukkit start
+      PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(cserver.getPlayer(p_72355_2_), joinMessage);
+      cserver.getPluginManager().callEvent(playerJoinEvent);
+      if (p_72355_2_.connection.processedDisconnect) { // if (!p_72355_2_.connection.connection.isConnected()) {  // CatServer - Fix FakePlayer
+         return;
+      }
+      joinMessage = playerJoinEvent.getJoinMessage();
+      if (joinMessage != null && joinMessage.length() > 0) {
+         for (ITextComponent line : org.bukkit.craftbukkit.v1_16_R3.util.CraftChatMessage.fromString(joinMessage)) {
+            server.getPlayerList().broadcastAll(new SChatPacket(line, ChatType.SYSTEM, Util.NIL_UUID));
+         }
+      }
+      // CraftBukkit end
+      // CraftBukkit start - sendAll above replaced with this loop
+      SPlayerListItemPacket packet = new SPlayerListItemPacket(SPlayerListItemPacket.Action.ADD_PLAYER, p_72355_2_);
 
       for(int i = 0; i < this.players.size(); ++i) {
          p_72355_2_.connection.send(new SPlayerListItemPacket(SPlayerListItemPacket.Action.ADD_PLAYER, this.players.get(i)));
-      }
-
-      serverworld1.addNewPlayer(p_72355_2_);
-      this.server.getCustomBossEvents().onPlayerConnect(p_72355_2_);
+         ServerPlayerEntity entityplayer1 = (ServerPlayerEntity) this.players.get(i);
+         if (entityplayer1.getBukkitEntity().canSee(p_72355_2_.getBukkitEntity())) {
+            entityplayer1.connection.send(packet);
+         }
+         if (!p_72355_2_.getBukkitEntity().canSee(entityplayer1.getBukkitEntity())) {
+            continue;
+         }
+         p_72355_2_.connection.send(new SPlayerListItemPacket(SPlayerListItemPacket.Action.ADD_PLAYER, new ServerPlayerEntity[] { entityplayer1}));
+      }
+      p_72355_2_.sentListPacket = true;
+      // CraftBukkit end
+      p_72355_2_.connection.send(new SEntityMetadataPacket(p_72355_2_.getId(), p_72355_2_.getEntityData(), true)); // CraftBukkit - BungeeCord#2321, send complete data to self on spawn
+      // CraftBukkit start - Only add if the player wasn't moved in the event
+      if (p_72355_2_.level == serverworld1 && !serverworld1.players().contains(p_72355_2_)) {
+         serverworld1.addNewPlayer(p_72355_2_);
+         this.server.getCustomBossEvents().onPlayerConnect(p_72355_2_);
+      }
+
+      serverworld1 = p_72355_2_.getLevel(); // CraftBukkit - Update in case join event changed it
+      // CraftBukkit end
+
       this.sendLevelInfo(p_72355_2_, serverworld1);
       if (!this.server.getResourcePack().isEmpty()) {
          p_72355_2_.sendTexturePack(this.server.getResourcePack(), this.server.getResourcePackHash());
@@ -191,8 +_,9 @@
 
       if (compoundnbt != null && compoundnbt.contains("RootVehicle", 10)) {
          CompoundNBT compoundnbt1 = compoundnbt.getCompound("RootVehicle");
+         ServerWorld finalServerworld = serverworld1;
          Entity entity1 = EntityType.loadEntityRecursive(compoundnbt1.getCompound("Entity"), serverworld1, (p_217885_1_) -> {
-            return !serverworld1.addWithUUID(p_217885_1_) ? null : p_217885_1_;
+            return !finalServerworld.addWithUUID(p_217885_1_) ? null : p_217885_1_;
          });
          if (entity1 != null) {
             UUID uuid;
@@ -225,9 +_,10 @@
       }
 
       p_72355_2_.initMenu();
+      net.minecraftforge.fml.hooks.BasicEventHooks.firePlayerLoggedIn( p_72355_2_ );
    }
 
-   protected void updateEntireScoreboard(ServerScoreboard p_96456_1_, ServerPlayerEntity p_96456_2_) {
+   public void updateEntireScoreboard(ServerScoreboard p_96456_1_, ServerPlayerEntity p_96456_2_) {
       Set<ScoreObjective> set = Sets.newHashSet();
 
       for(ScorePlayerTeam scoreplayerteam : p_96456_1_.getPlayerTeams()) {
@@ -248,6 +_,7 @@
    }
 
    public void setLevel(ServerWorld p_212504_1_) {
+      //if (playerIo != null)  return; // CraftBukkit
       p_212504_1_.getWorldBorder().addListener(new IBorderListener() {
          public void onBorderSizeSet(WorldBorder p_177694_1_, double p_177694_2_) {
             PlayerList.this.broadcastAll(new SWorldBorderPacket(p_177694_1_, SWorldBorderPacket.Action.SET_SIZE));
@@ -285,6 +_,7 @@
          compoundnbt1 = compoundnbt;
          p_72380_1_.load(compoundnbt);
          LOGGER.debug("loading single player");
+         net.minecraftforge.event.ForgeEventFactory.firePlayerLoadingEvent(p_72380_1_, this.playerIo, p_72380_1_.getUUID().toString());
       } else {
          compoundnbt1 = this.playerIo.load(p_72380_1_);
       }
@@ -293,6 +_,8 @@
    }
 
    protected void save(ServerPlayerEntity p_72391_1_) {
+      if (p_72391_1_.connection == null) return;
+      if (!p_72391_1_.getBukkitEntity().isPersistent()) return;
       this.playerIo.save(p_72391_1_);
       ServerStatisticsManager serverstatisticsmanager = this.stats.get(p_72391_1_.getUUID());
       if (serverstatisticsmanager != null) {
@@ -306,9 +_,27 @@
 
    }
 
+   public String disconnect(ServerPlayerEntity playerIn) {
+      remove(playerIn);
+      return quitMessage;
+   }
+
    public void remove(ServerPlayerEntity p_72367_1_) {
+      net.minecraftforge.fml.hooks.BasicEventHooks.firePlayerLoggedOut(p_72367_1_);
       ServerWorld serverworld = p_72367_1_.getLevel();
       p_72367_1_.awardStat(Stats.LEAVE_GAME);
+
+      // CraftBukkit start - Quitting must be before we do final save of data, in case plugins need to modify it
+      // See SPIGOT-5799, SPIGOT-6145
+      if (p_72367_1_.containerMenu != p_72367_1_.inventoryMenu) {
+         p_72367_1_.closeContainer();
+      }
+      PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(cserver.getPlayer(p_72367_1_), "\u00A7e" + p_72367_1_.getScoreboardName() + " left the game");
+      cserver.getPluginManager().callEvent(playerQuitEvent);
+      p_72367_1_.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
+      p_72367_1_.doTick(); // SPIGOT-924
+      // CraftBukkit end
+
       this.save(p_72367_1_);
       if (p_72367_1_.isPassenger()) {
          Entity entity = p_72367_1_.getRootVehicle();
@@ -330,7 +_,8 @@
       p_72367_1_.unRide();
       serverworld.removePlayerImmediately(p_72367_1_);
       p_72367_1_.getAdvancements().stopListening();
-      this.players.remove(p_72367_1_);
+      this.removePlayer(p_72367_1_);
+      this.playersByName.remove(p_72367_1_.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
       this.server.getCustomBossEvents().onPlayerDisconnect(p_72367_1_);
       UUID uuid = p_72367_1_.getUUID();
       ServerPlayerEntity serverplayerentity = this.playersByUUID.get(uuid);
@@ -340,32 +_,74 @@
          this.advancements.remove(uuid);
       }
 
-      this.broadcastAll(new SPlayerListItemPacket(SPlayerListItemPacket.Action.REMOVE_PLAYER, p_72367_1_));
+      // CraftBukkit start
+      // this.sendPacketToAllPlayers(new SPlayerListItemPacket(SPlayerListItemPacket.Action.REMOVE_PLAYER, playerIn));
+      SPlayerListItemPacket packet = new SPlayerListItemPacket(SPlayerListItemPacket.Action.REMOVE_PLAYER, p_72367_1_);
+      for (int i = 0; i < players.size(); i++) {
+         ServerPlayerEntity entityplayer2 = (ServerPlayerEntity) this.players.get(i);
+         if (entityplayer2.getBukkitEntity().canSee(p_72367_1_.getBukkitEntity())) {
+            entityplayer2.connection.send(packet);
+         } else {
+            entityplayer2.getBukkitEntity().removeDisconnectingPlayer(p_72367_1_.getBukkitEntity());
+         }
+      }
+      // This removes the scoreboard (and player reference) for the specific player in the manager
+      cserver.getScoreboardManager().removePlayer(p_72367_1_.getBukkitEntity());
+      // CraftBukkit end
+
+      this.quitMessage = playerQuitEvent.getQuitMessage(); // CraftBukkit
    }
 
-   @Nullable
-   public ITextComponent canPlayerLogin(SocketAddress p_206258_1_, GameProfile p_206258_2_) {
-      if (this.bans.isBanned(p_206258_2_)) {
-         ProfileBanEntry profilebanentry = this.bans.get(p_206258_2_);
-         IFormattableTextComponent iformattabletextcomponent1 = new TranslationTextComponent("multiplayer.disconnect.banned.reason", profilebanentry.getReason());
+   // CraftBukkit start - Whole method, SocketAddress to LoginListener, added hostname to signature, return EntityPlayer
+   public ServerPlayerEntity canPlayerLogin(ServerLoginNetHandler netHandler, GameProfile gameProfile, SocketAddress socketaddress) {
+      // Moved from processLogin
+      IFormattableTextComponent iformattabletextcomponent1;
+      UUID uuid = PlayerEntity.createPlayerUUID(gameProfile);
+      List<ServerPlayerEntity> playerEntityList = Lists.newArrayList();
+      for (ServerPlayerEntity player : this.players) {
+         if (player.getUUID().equals(uuid)) {
+            playerEntityList.add(player);
+         }
+      }
+      for (ServerPlayerEntity entityPlayer : playerEntityList) {
+         save(entityPlayer);
+         entityPlayer.connection.disconnect(new TranslationTextComponent("multiplayer.disconnect.duplicate_login", new Object[0]));
+      }
+      ServerPlayerEntity entity = new ServerPlayerEntity(this.server, this.server.getLevel(World.OVERWORLD), gameProfile, new PlayerInteractionManager(this.server.getLevel(World.OVERWORLD)));
+      Player player = entity.getBukkitEntity();
+
+      String hostname = netHandler == null ? "" : netHandler.hostname;
+      InetAddress realAddress = netHandler == null ? ((InetSocketAddress) socketaddress).getAddress() : ((InetSocketAddress)netHandler.connection.getRawAddress()).getAddress();
+
+      PlayerLoginEvent event = new PlayerLoginEvent(player, hostname, ((java.net.InetSocketAddress) socketaddress).getAddress(), realAddress);
+      if (getBans().isBanned(gameProfile) && !getBans().get(gameProfile).hasExpired()) {
+         ProfileBanEntry profilebanentry = this.bans.get(gameProfile);
+         iformattabletextcomponent1 = new TranslationTextComponent("multiplayer.disconnect.banned.reason", profilebanentry.getReason());
          if (profilebanentry.getExpires() != null) {
             iformattabletextcomponent1.append(new TranslationTextComponent("multiplayer.disconnect.banned.expiration", BAN_DATE_FORMAT.format(profilebanentry.getExpires())));
          }
 
-         return iformattabletextcomponent1;
-      } else if (!this.isWhiteListed(p_206258_2_)) {
-         return new TranslationTextComponent("multiplayer.disconnect.not_whitelisted");
-      } else if (this.ipBans.isBanned(p_206258_1_)) {
-         IPBanEntry ipbanentry = this.ipBans.get(p_206258_1_);
-         IFormattableTextComponent iformattabletextcomponent = new TranslationTextComponent("multiplayer.disconnect.banned_ip.reason", ipbanentry.getReason());
+         if (!profilebanentry.hasExpired()) event.disallow(PlayerLoginEvent.Result.KICK_BANNED, CraftChatMessage.fromComponent(iformattabletextcomponent1));
+      } else if (!this.isWhiteListed(gameProfile)) {
+         event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, org.spigotmc.SpigotConfig.whitelistMessage); // Spigot
+      } else if (getIpBans().isBanned(socketaddress) && !getIpBans().get(socketaddress).hasExpired()) {
+         IPBanEntry ipbanentry = this.ipBans.get(socketaddress);
+         iformattabletextcomponent1 = new TranslationTextComponent("multiplayer.disconnect.banned_ip.reason", ipbanentry.getReason());
          if (ipbanentry.getExpires() != null) {
-            iformattabletextcomponent.append(new TranslationTextComponent("multiplayer.disconnect.banned_ip.expiration", BAN_DATE_FORMAT.format(ipbanentry.getExpires())));
+            iformattabletextcomponent1.append(new TranslationTextComponent("multiplayer.disconnect.banned_ip.expiration", BAN_DATE_FORMAT.format(ipbanentry.getExpires())));
          }
-
-         return iformattabletextcomponent;
+         event.disallow(PlayerLoginEvent.Result.KICK_BANNED, CraftChatMessage.fromComponent(iformattabletextcomponent1));
       } else {
-         return this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(p_206258_2_) ? new TranslationTextComponent("multiplayer.disconnect.server_full") : null;
-      }
+         if (this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(gameProfile)) {
+            event.disallow(PlayerLoginEvent.Result.KICK_FULL,  org.spigotmc.SpigotConfig.serverFullMessage); // Spigot
+         }
+      }
+      cserver.getPluginManager().callEvent(event);
+      if (event.getResult() != PlayerLoginEvent.Result.ALLOWED) {
+         netHandler.disconnect(event.getKickMessage());
+         return null;
+      }
+      return entity;
    }
 
    public ServerPlayerEntity getPlayerForLogin(GameProfile p_148545_1_) {
@@ -399,31 +_,133 @@
       return new ServerPlayerEntity(this.server, serverworld, p_148545_1_, playerinteractionmanager);
    }
 
+   // CatServer start - respawn logic
+   private @Nullable Location respawnLocation;
+
+   private void respawnLocation(Location location) {
+      this.respawnLocation = location;
+   }
+
+   private boolean respawnAvoidSuffocation;
+
+   private void respawnAvoidSuffocation(boolean b) {
+      this.respawnAvoidSuffocation = b;
+   }
+
+   private @Nullable ServerWorld serverWorld;
+
+   private void respawnWorld(ServerWorld world) {
+      this.serverWorld = world;
+   }
+
+
+   public ServerPlayerEntity moveToWorld(ServerPlayerEntity p_232644_1_, ServerWorld serverWorld, boolean p_232644_2_, Location location, boolean avoidSuffocation) {
+      this.respawnWorld(serverWorld);
+      this.respawnLocation(location);
+      this.respawnAvoidSuffocation(avoidSuffocation);
+
+      return respawn(p_232644_1_, p_232644_2_);
+   }
+
    public ServerPlayerEntity respawn(ServerPlayerEntity p_232644_1_, boolean p_232644_2_) {
-      this.players.remove(p_232644_1_);
-      p_232644_1_.getLevel().removePlayerImmediately(p_232644_1_);
+      ServerWorld serverWorld = this.serverWorld;
+      boolean avoidSuffocation = this.respawnAvoidSuffocation;
+      Location location = this.respawnLocation;
+
+      // Reset default
+      this.serverWorld = null;
+      this.respawnAvoidSuffocation = false;
+      this.respawnLocation = null;
+
+      if (serverWorld == null) {
+         serverWorld = this.server.getLevel(p_232644_1_.getRespawnDimension());
+      }
+
+      p_232644_1_.stopRiding(); // CraftBukkit
+
+      this.removePlayer(p_232644_1_);
+      this.playersByName.remove(p_232644_1_.getScoreboardName().toLowerCase(Locale.ROOT)); // Spigot
+      p_232644_1_.getLevel().removePlayer(p_232644_1_, true); // Forge: keep data until copyFrom called
       BlockPos blockpos = p_232644_1_.getRespawnPosition();
       float f = p_232644_1_.getRespawnAngle();
       boolean flag = p_232644_1_.isRespawnForced();
+
+      org.bukkit.World fromWorld = p_232644_1_.getBukkitEntity().getWorld();
+      p_232644_1_.wonGame = false;
+
+      boolean flag3 = false;
       ServerWorld serverworld = this.server.getLevel(p_232644_1_.getRespawnDimension());
-      Optional<Vector3d> optional;
-      if (serverworld != null && blockpos != null) {
-         optional = PlayerEntity.findRespawnPositionAndUseSpawnBlock(serverworld, blockpos, f, flag, p_232644_2_);
+
+      // CraftBukkit start - fire PlayerRespawnEvent
+      if (location == null) {
+         boolean isBedSpawn = false;
+         if (serverworld != null) {
+            Optional<Vector3d> optional;
+            if (blockpos != null) {
+               optional = PlayerEntity.findRespawnPositionAndUseSpawnBlock(serverworld, blockpos, f, flag, p_232644_2_);
+            } else {
+               optional = Optional.empty();
+            }
+            if (optional.isPresent()) {
+               BlockState blockstate = serverworld.getBlockState(blockpos);
+               boolean flag4 = blockstate.is(Blocks.RESPAWN_ANCHOR);
+
+               Vector3d vector3d = optional.get();
+               float f1;
+
+               if (!blockstate.is(BlockTags.BEDS) && !flag4) {
+                  f1 = f;
+               } else {
+                  Vector3d vector3d1 = Vector3d.atBottomCenterOf(blockpos).subtract(vector3d).normalize();
+                  f1 = (float) MathHelper.wrapDegrees(MathHelper.atan2(vector3d1.z, vector3d1.x) * (double)(180F / (float)Math.PI) - 90.0D);
+               }
+               p_232644_1_.setRespawnPosition(serverworld.dimension(), blockpos, f1, flag, false);
+               flag3 = !flag && flag4;
+               isBedSpawn = true;
+               location = new Location(serverworld.getWorld(), vector3d.x, vector3d.y, vector3d.z, f1, 0.0F);
+            } else if (blockpos != null) {
+               p_232644_1_.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.NO_RESPAWN_BLOCK_AVAILABLE, 0.0F));
+            }
+         }
+         if (location == null) {
+            serverworld = this.server.getLevel(World.OVERWORLD);
+            assert serverworld != null; // Why might be null ?
+            blockpos = p_232644_1_.getSpawnPoint(serverworld);
+            location = new Location(serverworld.getWorld(), (float) blockpos.getX() + 0.5F, (float) blockpos.getY() + 0.1F, (float) blockpos.getZ() + 0.5F);
+         }
+         org.bukkit.entity.Player respawnPlayer = p_232644_1_.getBukkitEntity();
+         PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn && !flag3, flag3);
+         cserver.getPluginManager().callEvent(respawnEvent);
+         // Spigot Start
+         if (p_232644_1_.connection.isDisconnected()) {
+            return p_232644_1_;
+         }
+         // Spigot End
+         location = respawnEvent.getRespawnLocation();
+         if (!p_232644_2_) p_232644_1_.reset(); // SPIGOT-4785
       } else {
-         optional = Optional.empty();
+         location.setWorld(serverWorld.getWorld());
       }
 
-      ServerWorld serverworld1 = serverworld != null && optional.isPresent() ? serverworld : this.server.overworld();
+      ServerWorld worldserver1 = ((CraftWorld) location.getWorld()).getHandle();
       PlayerInteractionManager playerinteractionmanager;
       if (this.server.isDemo()) {
-         playerinteractionmanager = new DemoPlayerInteractionManager(serverworld1);
+         playerinteractionmanager = new DemoPlayerInteractionManager(worldserver1);
       } else {
-         playerinteractionmanager = new PlayerInteractionManager(serverworld1);
+         playerinteractionmanager = new PlayerInteractionManager(worldserver1);
       }
-
-      ServerPlayerEntity serverplayerentity = new ServerPlayerEntity(this.server, serverworld1, p_232644_1_.getGameProfile(), playerinteractionmanager);
+      ServerPlayerEntity serverplayerentity = new ServerPlayerEntity(this.server, worldserver1, p_232644_1_.getGameProfile(), playerinteractionmanager);
+
+      // Forward
+      p_232644_1_.getBukkitEntity().setHandle(serverplayerentity);
+      serverplayerentity.setBukkitEntity(p_232644_1_.getBukkitEntity());
+      p_232644_1_.connection.player = serverplayerentity;
+
       serverplayerentity.connection = p_232644_1_.connection;
       serverplayerentity.restoreFrom(p_232644_1_, p_232644_2_);
+      p_232644_1_.remove(false); // Forge: clone event had a chance to see old data, now discard it
+      serverplayerentity.setRespawnPosition(p_232644_1_.getRespawnDimension(), p_232644_1_.getRespawnPosition(), p_232644_1_.getRespawnAngle(), p_232644_1_.isRespawnForced(), false);
+
       serverplayerentity.setId(p_232644_1_.getId());
       serverplayerentity.setMainArm(p_232644_1_.getMainArm());
 
@@ -431,46 +_,65 @@
          serverplayerentity.addTag(s);
       }
 
-      this.updatePlayerGameMode(serverplayerentity, p_232644_1_, serverworld1);
-      boolean flag2 = false;
-      if (optional.isPresent()) {
-         BlockState blockstate = serverworld1.getBlockState(blockpos);
-         boolean flag1 = blockstate.is(Blocks.RESPAWN_ANCHOR);
-         Vector3d vector3d = optional.get();
-         float f1;
-         if (!blockstate.is(BlockTags.BEDS) && !flag1) {
-            f1 = f;
-         } else {
-            Vector3d vector3d1 = Vector3d.atBottomCenterOf(blockpos).subtract(vector3d).normalize();
-            f1 = (float)MathHelper.wrapDegrees(MathHelper.atan2(vector3d1.z, vector3d1.x) * (double)(180F / (float)Math.PI) - 90.0D);
-         }
-
-         serverplayerentity.moveTo(vector3d.x, vector3d.y, vector3d.z, f1, 0.0F);
-         serverplayerentity.setRespawnPosition(serverworld1.dimension(), blockpos, f, flag, false);
-         flag2 = !p_232644_2_ && flag1;
-      } else if (blockpos != null) {
-         serverplayerentity.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.NO_RESPAWN_BLOCK_AVAILABLE, 0.0F));
-      }
-
-      while(!serverworld1.noCollision(serverplayerentity) && serverplayerentity.getY() < 256.0D) {
+      this.updatePlayerGameMode(serverplayerentity, p_232644_1_, worldserver1); // Forge
+
+      serverplayerentity.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+      serverplayerentity.connection.resetPosition();
+
+      while (avoidSuffocation && !worldserver1.noCollision(serverplayerentity) && serverplayerentity.getY() < worldserver1.getMaxBuildHeight()) {
          serverplayerentity.setPos(serverplayerentity.getX(), serverplayerentity.getY() + 1.0D, serverplayerentity.getZ());
       }
 
       IWorldInfo iworldinfo = serverplayerentity.level.getLevelData();
       serverplayerentity.connection.send(new SRespawnPacket(serverplayerentity.level.dimensionType(), serverplayerentity.level.dimension(), BiomeManager.obfuscateSeed(serverplayerentity.getLevel().getSeed()), serverplayerentity.gameMode.getGameModeForPlayer(), serverplayerentity.gameMode.getPreviousGameModeForPlayer(), serverplayerentity.getLevel().isDebug(), serverplayerentity.getLevel().isFlat(), p_232644_2_));
-      serverplayerentity.connection.teleport(serverplayerentity.getX(), serverplayerentity.getY(), serverplayerentity.getZ(), serverplayerentity.yRot, serverplayerentity.xRot);
-      serverplayerentity.connection.send(new SWorldSpawnChangedPacket(serverworld1.getSharedSpawnPos(), serverworld1.getSharedSpawnAngle()));
+      serverplayerentity.connection.send(new SUpdateViewDistancePacket(worldserver1.spigotConfig.viewDistance)); // Spigot
+
+      serverplayerentity.setLevel(worldserver1);
+      serverplayerentity.removed = false;
+      serverplayerentity.connection.teleport(new Location(worldserver1.getWorld(),  serverplayerentity.getX(), serverplayerentity.getY(), serverplayerentity.getZ(), serverplayerentity.yRot, serverplayerentity.xRot));
+      serverplayerentity.setShiftKeyDown(false);
+
+      //serverplayerentity.connection.setPlayerLocation(serverplayerentity.getPosX(), serverplayerentity.getPosY(), serverplayerentity.getPosZ(), serverplayerentity.rotationYaw, serverplayerentity.rotationPitch);
+      serverplayerentity.connection.send(new SWorldSpawnChangedPacket(worldserver1.getSharedSpawnPos(), worldserver1.getSharedSpawnAngle()));
       serverplayerentity.connection.send(new SServerDifficultyPacket(iworldinfo.getDifficulty(), iworldinfo.isDifficultyLocked()));
       serverplayerentity.connection.send(new SSetExperiencePacket(serverplayerentity.experienceProgress, serverplayerentity.totalExperience, serverplayerentity.experienceLevel));
-      this.sendLevelInfo(serverplayerentity, serverworld1);
+
+      this.sendLevelInfo(serverplayerentity, worldserver1);
       this.sendPlayerPermissionLevel(serverplayerentity);
-      serverworld1.addRespawnedPlayer(serverplayerentity);
-      this.players.add(serverplayerentity);
-      this.playersByUUID.put(serverplayerentity.getUUID(), serverplayerentity);
+
+      if (!serverplayerentity.connection.isDisconnected()) {
+         worldserver1.addRespawnedPlayer(serverplayerentity);
+         this.addPlayer(serverplayerentity);
+         this.playersByName.put(serverplayerentity.getScoreboardName().toLowerCase(Locale.ROOT), serverplayerentity); // Spigot
+         this.playersByUUID.put(serverplayerentity.getUUID(), serverplayerentity);
+      }
       serverplayerentity.initMenu();
       serverplayerentity.setHealth(serverplayerentity.getHealth());
-      if (flag2) {
-         serverplayerentity.connection.send(new SPlaySoundEffectPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundCategory.BLOCKS, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), 1.0F, 1.0F));
+
+      net.minecraftforge.fml.hooks.BasicEventHooks.firePlayerRespawnEvent(serverplayerentity, p_232644_2_);
+      if (flag) {
+         serverplayerentity.connection.send(new SPlaySoundEffectPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundCategory.BLOCKS, blockpos.getX(), blockpos.getY(), blockpos.getZ(), 1.0F, 1.0F));
+      }
+
+      // Added from changeDimension
+      this.sendAllPlayerInfo(serverplayerentity); // Update health, etc...
+      serverplayerentity.onUpdateAbilities();
+      for (EffectInstance mobEffect : serverplayerentity.getActiveEffects()) {
+         serverplayerentity.connection.send(new SPlayEntityEffectPacket(serverplayerentity.getId(), mobEffect));
+      }
+
+      // Fire advancement trigger
+      serverplayerentity.triggerDimensionChangeTriggers(((CraftWorld) fromWorld).getHandle());
+
+      // Don't fire on respawn
+      if (fromWorld != location.getWorld()) {
+         PlayerChangedWorldEvent event = new PlayerChangedWorldEvent(serverplayerentity.getBukkitEntity(), fromWorld);
+         server.server.getPluginManager().callEvent(event);
+      }
+
+      // Save player file again if they were disconnected
+      if (serverplayerentity.connection.isDisconnected()) {
+         this.save(serverplayerentity);
       }
 
       return serverplayerentity;
@@ -484,12 +_,40 @@
 
    public void tick() {
       if (++this.sendAllPlayerInfoIn > 600) {
-         this.broadcastAll(new SPlayerListItemPacket(SPlayerListItemPacket.Action.UPDATE_LATENCY, this.players));
+         // CraftBukkit start
+         for (int i = 0; i < this.players.size(); i++) {
+            ServerPlayerEntity target = this.players.get(i);
+            target.connection.send(new SPlayerListItemPacket(SPlayerListItemPacket.Action.UPDATE_LATENCY, Iterables.filter(this.players, new Predicate<ServerPlayerEntity>() {
+               @Override
+               public boolean apply(final ServerPlayerEntity input) {
+                  return target.getBukkitEntity().canSee(input.getBukkitEntity());
+               }
+            })));
+         }
+         // CraftBukkit end
          this.sendAllPlayerInfoIn = 0;
       }
 
    }
 
+   // CraftBukkit start - add a world/entity limited version
+   public void sendAll(IPacket packetIn, PlayerEntity entityhuman) {
+      for (int i = 0; i < this.players.size(); ++i) {
+         ServerPlayerEntity entityplayer = this.players.get(i);
+         if (entityhuman != null && entityhuman instanceof ServerPlayerEntity && !entityplayer.getBukkitEntity().canSee(((ServerPlayerEntity)entityhuman).getBukkitEntity())) {
+            continue;
+         }
+         ((ServerPlayerEntity) this.players.get(i)).connection.send(packetIn);
+      }
+   }
+
+   public void sendAll(IPacket packetIn, net.minecraft.world.World world) {
+      for (int i = 0; i < world.players().size(); ++i) {
+         ((ServerPlayerEntity) world.players().get(i)).connection.send(packetIn);
+      }
+   }
+   // CraftBukkit end
+
    public void broadcastAll(IPacket<?> p_148540_1_) {
       for(int i = 0; i < this.players.size(); ++i) {
          (this.players.get(i)).connection.send(p_148540_1_);
@@ -585,6 +_,7 @@
          p_187245_1_.connection.send(new SEntityStatusPacket(p_187245_1_, b0));
       }
 
+      p_187245_1_.getBukkitEntity().recalculatePermissions(); // CraftBukkit
       this.server.getCommands().sendCommands(p_187245_1_);
    }
 
@@ -598,18 +_,19 @@
 
    @Nullable
    public ServerPlayerEntity getPlayerByName(String p_152612_1_) {
-      for(ServerPlayerEntity serverplayerentity : this.players) {
-         if (serverplayerentity.getGameProfile().getName().equalsIgnoreCase(p_152612_1_)) {
-            return serverplayerentity;
-         }
-      }
-
-      return null;
+      return this.playersByName.get(p_152612_1_.toLowerCase(java.util.Locale.ROOT)); // Spigot
    }
 
    public void broadcast(@Nullable PlayerEntity p_148543_1_, double p_148543_2_, double p_148543_4_, double p_148543_6_, double p_148543_8_, RegistryKey<World> p_148543_10_, IPacket<?> p_148543_11_) {
       for(int i = 0; i < this.players.size(); ++i) {
          ServerPlayerEntity serverplayerentity = this.players.get(i);
+
+         // CraftBukkit start - Test if player receiving packet can see the source of the packet
+         if (p_148543_1_ != null && p_148543_1_ instanceof ServerPlayerEntity && !serverplayerentity.getBukkitEntity().canSee(((ServerPlayerEntity) p_148543_1_).getBukkitEntity())) {
+            continue;
+         }
+         // CraftBukkit end
+
          if (serverplayerentity != p_148543_1_ && serverplayerentity.level.dimension() == p_148543_10_) {
             double d0 = p_148543_2_ - serverplayerentity.getX();
             double d1 = p_148543_4_ - serverplayerentity.getY();
@@ -649,22 +_,32 @@
    }
 
    public void sendLevelInfo(ServerPlayerEntity p_72354_1_, ServerWorld p_72354_2_) {
-      WorldBorder worldborder = this.server.overworld().getWorldBorder();
+      WorldBorder worldborder = p_72354_1_.level.getWorldBorder(); // CraftBukkit
       p_72354_1_.connection.send(new SWorldBorderPacket(worldborder, SWorldBorderPacket.Action.INITIALIZE));
       p_72354_1_.connection.send(new SUpdateTimePacket(p_72354_2_.getGameTime(), p_72354_2_.getDayTime(), p_72354_2_.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)));
       p_72354_1_.connection.send(new SWorldSpawnChangedPacket(p_72354_2_.getSharedSpawnPos(), p_72354_2_.getSharedSpawnAngle()));
       if (p_72354_2_.isRaining()) {
+         // CraftBukkit start - handle player weather
          p_72354_1_.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.START_RAINING, 0.0F));
          p_72354_1_.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.RAIN_LEVEL_CHANGE, p_72354_2_.getRainLevel(1.0F)));
          p_72354_1_.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.THUNDER_LEVEL_CHANGE, p_72354_2_.getThunderLevel(1.0F)));
+         p_72354_1_.setPlayerWeather(org.bukkit.WeatherType.DOWNFALL, false);
+         p_72354_1_.updateWeather(-p_72354_2_.rainLevel, p_72354_2_.rainLevel, -p_72354_2_.thunderLevel, p_72354_2_.thunderLevel);
+         // CraftBukkit end
       }
 
    }
 
    public void sendAllPlayerInfo(ServerPlayerEntity p_72385_1_) {
       p_72385_1_.refreshContainer(p_72385_1_.inventoryMenu);
-      p_72385_1_.resetSentInfo();
+      p_72385_1_.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
       p_72385_1_.connection.send(new SHeldItemChangePacket(p_72385_1_.inventory.selected));
+      // CraftBukkit start - from GameRules
+      int i = p_72385_1_.level.getGameRules().getBoolean(GameRules.RULE_REDUCEDDEBUGINFO) ? 22 : 23;
+      p_72385_1_.connection.send(new SEntityStatusPacket(p_72385_1_, (byte)i));
+      float immediateRespawn = p_72385_1_.level.getGameRules().getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN) ? 1.0f : 0.0f;
+      p_72385_1_.connection.send(new SChangeGameStatePacket(SChangeGameStatePacket.IMMEDIATE_RESPAWN, immediateRespawn));
+      // CraftBukkit end
    }
 
    public int getPlayerCount() {
@@ -719,7 +_,7 @@
          p_72381_1_.gameMode.setGameModeForPlayer(this.overrideGameMode, GameType.NOT_SET);
       }
 
-      p_72381_1_.gameMode.updateGameMode(p_72381_3_.getServer().getWorldData().getGameType());
+      p_72381_1_.gameMode.updateGameMode(p_72381_3_.getServer().getWorldData().getGameType()); // CraftBukkit
    }
 
    @OnlyIn(Dist.CLIENT)
@@ -728,29 +_,42 @@
    }
 
    public void removeAll() {
-      for(int i = 0; i < this.players.size(); ++i) {
-         (this.players.get(i)).connection.disconnect(new TranslationTextComponent("multiplayer.disconnect.server_shutdown"));
+      // CraftBukkit start - disconnect safely
+      for (ServerPlayerEntity player : players) {
+         player.connection.disconnect(this.server.server.getShutdownMessage());
       }
+      // CraftBukkit end
+   }
 
+   // CraftBukkit start
+   public void sendMessage(ITextComponent[] components) {
+      for (ITextComponent component : components) {
+         broadcastMessage(component, ChatType.SYSTEM, Util.NIL_UUID);
+      }
    }
+   // CraftBukkit end
 
    public void broadcastMessage(ITextComponent p_232641_1_, ChatType p_232641_2_, UUID p_232641_3_) {
       this.server.sendMessage(p_232641_1_, p_232641_3_);
-      this.broadcastAll(new SChatPacket(p_232641_1_, p_232641_2_, p_232641_3_));
+      // CraftBukkit start - we run this through our processor first so we can get web links etc
+      this.broadcastAll(new SChatPacket(CraftChatMessage.fixComponent(p_232641_1_), p_232641_2_, p_232641_3_));
+      // CraftBukkit end
    }
 
+   //CraftBukkit start
    public ServerStatisticsManager getPlayerStats(PlayerEntity p_152602_1_) {
       UUID uuid = p_152602_1_.getUUID();
-      ServerStatisticsManager serverstatisticsmanager = uuid == null ? null : this.stats.get(uuid);
+      ServerStatisticsManager serverStatisticsManager = this.stats.get(uuid);
+      return (serverStatisticsManager == null) ? this.getStatisticManager(p_152602_1_.getUUID(), p_152602_1_.getName().toString()) : serverStatisticsManager;
+   }
+   // CraftBukkit end
+
+   public ServerStatisticsManager getStatisticManager(UUID uuid, String displayName) {
+      ServerPlayerEntity player = getPlayer(uuid);
+      ServerStatisticsManager serverstatisticsmanager = player == null ? null : this.stats.get(uuid);
       if (serverstatisticsmanager == null) {
          File file1 = this.server.getWorldPath(FolderName.PLAYER_STATS_DIR).toFile();
          File file2 = new File(file1, uuid + ".json");
-         if (!file2.exists()) {
-            File file3 = new File(file1, p_152602_1_.getName().getString() + ".json");
-            if (file3.exists() && file3.isFile()) {
-               file3.renameTo(file2);
-            }
-         }
 
          serverstatisticsmanager = new ServerStatisticsManager(this.server, file2);
          this.stats.put(uuid, serverstatisticsmanager);
@@ -769,8 +_,11 @@
          this.advancements.put(uuid, playeradvancements);
       }
 
-      playeradvancements.setPlayer(p_192054_1_);
-      return playeradvancements;
+      // Forge: don't overwrite active player with a fake one.
+      if (!(p_192054_1_ instanceof net.minecraftforge.common.util.FakePlayer)) {
+         playeradvancements.setPlayer(p_192054_1_);
+      }
+         return playeradvancements;
    }
 
    public void setViewDistance(int p_217884_1_) {
@@ -786,7 +_,7 @@
    }
 
    public List<ServerPlayerEntity> getPlayers() {
-      return this.players;
+      return this.playersView; //Unmodifiable view, we don't want people removing things without us knowing.
    }
 
    @Nullable
@@ -803,7 +_,10 @@
          playeradvancements.reload(this.server.getAdvancements());
       }
 
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.OnDatapackSyncEvent(this, null));
+
       this.broadcastAll(new STagsListPacket(this.server.getTags()));
+      net.minecraftforge.fml.network.NetworkHooks.syncCustomTagTypes(this.server.getTags());
       SUpdateRecipesPacket supdaterecipespacket = new SUpdateRecipesPacket(this.server.getRecipeManager().getRecipes());
 
       for(ServerPlayerEntity serverplayerentity : this.players) {
@@ -815,5 +_,13 @@
 
    public boolean isAllowCheatsForAllPlayers() {
       return this.allowCheatsForAllPlayers;
+   }
+
+   public boolean addPlayer(ServerPlayerEntity player) {
+      return players.add(player);
+   }
+
+   public boolean removePlayer(ServerPlayerEntity player) {
+       return this.players.remove(player);
    }
 }
