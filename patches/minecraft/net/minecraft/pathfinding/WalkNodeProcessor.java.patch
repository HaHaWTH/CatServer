--- a/net/minecraft/pathfinding/WalkNodeProcessor.java
+++ b/net/minecraft/pathfinding/WalkNodeProcessor.java
@@ -386,6 +_,9 @@
    }
 
    private PathNodeType getCachedBlockType(MobEntity p_237230_1_, int p_237230_2_, int p_237230_3_, int p_237230_4_) {
+      if (!this.level.isPosLoaded(new BlockPos(p_237230_2_, p_237230_3_, p_237230_4_))) {
+         return PathNodeType.BLOCKED;
+      }
       return this.pathTypesByPosCache.computeIfAbsent(BlockPos.asLong(p_237230_2_, p_237230_3_, p_237230_4_), (p_237229_5_) -> {
          return this.getBlockPathType(this.level, p_237230_2_, p_237230_3_, p_237230_4_, p_237230_1_, this.entityWidth, this.entityHeight, this.entityDepth, this.canOpenDoors(), this.canPassDoors());
       });
@@ -437,6 +_,11 @@
             for(int j1 = -1; j1 <= 1; ++j1) {
                if (l != 0 || j1 != 0) {
                   p_237232_1_.set(i + l, j + i1, k + j1);
+                  // Paper start - Do not load chunks for Pathfinding
+                  if (!p_237232_0_.isPosLoaded(p_237232_1_)) {
+                     return PathNodeType.BLOCKED;
+                  }
+                  // Paper end
                   BlockState blockstate = p_237232_0_.getBlockState(p_237232_1_);
                   if (blockstate.is(Blocks.CACTUS)) {
                      return PathNodeType.DANGER_CACTUS;
@@ -462,10 +_,17 @@
    }
 
    protected static PathNodeType getBlockPathTypeRaw(IBlockReader p_237238_0_, BlockPos p_237238_1_) {
+      // Paper start - Do not load chunks for Pathfinding
+      if (!p_237238_0_.isPosLoaded(p_237238_1_)) {
+         return PathNodeType.BLOCKED;
+      }
+      // Paper end
       BlockState blockstate = p_237238_0_.getBlockState(p_237238_1_);
+      PathNodeType type = blockstate.getAiPathNodeType(p_237238_0_, p_237238_1_);
+      if (type != null) return type;
       Block block = blockstate.getBlock();
       Material material = blockstate.getMaterial();
-      if (blockstate.isAir()) {
+      if (blockstate.isAir(p_237238_0_, p_237238_1_)) {
          return PathNodeType.OPEN;
       } else if (!blockstate.is(BlockTags.TRAPDOORS) && !blockstate.is(Blocks.LILY_PAD)) {
          if (blockstate.is(Blocks.CACTUS)) {
