--- a/net/minecraft/item/MerchantOffer.java
+++ b/net/minecraft/item/MerchantOffer.java
@@ -3,18 +_,32 @@
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.nbt.NBTUtil;
 import net.minecraft.util.math.MathHelper;
+import org.bukkit.craftbukkit.v1_16_R3.inventory.CraftMerchantRecipe;
 
 public class MerchantOffer {
-   private final ItemStack baseCostA;
-   private final ItemStack costB;
-   private final ItemStack result;
-   private int uses;
-   private final int maxUses;
-   private boolean rewardExp = true;
+   public ItemStack baseCostA; // private->public CraftBukkit
+   public ItemStack costB; // private->public CraftBukkit
+   public final ItemStack result; // private->public CraftBukkit
+   public int uses; // private->public CraftBukkit
+   public int maxUses; // private->public CraftBukkit
+   public boolean rewardExp = true; // private->public CraftBukkit
    private int specialPriceDiff;
    private int demand;
-   private float priceMultiplier;
-   private int xp = 1;
+   public float priceMultiplier; // private->public CraftBukkit
+   public int xp = 1; // private->public CraftBukkit
+
+   // CraftBukkit start
+   private CraftMerchantRecipe bukkitHandle; // CraftBukkit
+
+   public CraftMerchantRecipe asBukkit() {
+      return (this.bukkitHandle == null) ? (this.bukkitHandle = new CraftMerchantRecipe(this)) : this.bukkitHandle;
+   }
+
+   public MerchantOffer(ItemStack itemstack, ItemStack itemstack1, ItemStack itemstack2, int uses, int maxUses, int experience, float priceMultiplier, CraftMerchantRecipe bukkit) {
+      this(itemstack, itemstack1, itemstack2, uses, maxUses, experience, priceMultiplier);
+      this.bukkitHandle = bukkit;
+   }
+   // CraftBukkit end
 
    public MerchantOffer(CompoundNBT p_i50012_1_) {
       this.baseCostA = ItemStack.of(p_i50012_1_.getCompound("buy"));
@@ -72,9 +_,10 @@
 
    public ItemStack getCostA() {
       int i = this.baseCostA.getCount();
+      if (i <= 0) return ItemStack.EMPTY; // CraftBukkit - SPIGOT-5476
       ItemStack itemstack = this.baseCostA.copy();
       int j = Math.max(0, MathHelper.floor((float)(i * this.demand) * this.priceMultiplier));
-      itemstack.setCount(MathHelper.clamp(i + j + this.specialPriceDiff, 1, this.baseCostA.getItem().getMaxStackSize()));
+      itemstack.setCount(MathHelper.clamp(i + j + this.specialPriceDiff, 1, this.baseCostA.getMaxStackSize()));
       return itemstack;
    }
 
@@ -87,7 +_,7 @@
    }
 
    public void updateDemand() {
-      this.demand = this.demand + this.uses - (this.maxUses - this.uses);
+      this.demand = Math.max(0, this.demand + this.uses - (this.maxUses - this.uses)); // Paper
    }
 
    public ItemStack assemble() {
@@ -178,7 +_,7 @@
          return true;
       } else {
          ItemStack itemstack = p_222201_1_.copy();
-         if (itemstack.getItem().canBeDepleted()) {
+         if (itemstack.getItem().isDamageable(itemstack)) {
             itemstack.setDamageValue(itemstack.getDamageValue());
          }
 
