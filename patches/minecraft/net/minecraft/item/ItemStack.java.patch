--- a/net/minecraft/item/ItemStack.java
+++ b/net/minecraft/item/ItemStack.java
@@ -7,23 +_,18 @@
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.serialization.Codec;
+import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
-import java.util.Collection;
-import java.util.List;
-import java.util.Locale;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Random;
+import java.util.*;
 import java.util.Map.Entry;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockState;
+import net.minecraft.block.*;
 import net.minecraft.client.util.ITooltipFlag;
 import net.minecraft.command.arguments.BlockPredicateArgument;
 import net.minecraft.command.arguments.BlockStateParser;
@@ -44,18 +_,14 @@
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.nbt.INBT;
 import net.minecraft.nbt.ListNBT;
+import net.minecraft.nbt.NBTDynamicOps;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.ITag;
 import net.minecraft.tags.ITagCollectionSupplier;
-import net.minecraft.util.ActionResult;
-import net.minecraft.util.ActionResultType;
-import net.minecraft.util.CachedBlockInfo;
-import net.minecraft.util.Hand;
-import net.minecraft.util.IItemProvider;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.SoundEvent;
-import net.minecraft.util.Util;
+import net.minecraft.util.*;
+import net.minecraft.util.datafix.TypeReferences;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.registry.Registry;
 import net.minecraft.util.text.IFormattableTextComponent;
@@ -71,8 +_,11 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.v1_16_R3.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.v1_16_R3.util.CraftMagicNumbers;
+import org.bukkit.event.player.PlayerItemDamageEvent;
 
-public final class ItemStack {
+public final class ItemStack extends net.minecraftforge.common.capabilities.CapabilityProvider<ItemStack> implements net.minecraftforge.common.extensions.IForgeItemStack {
    public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create((p_234698_0_) -> {
       return p_234698_0_.group(Registry.ITEM.fieldOf("id").forGetter((p_234706_0_) -> {
          return p_234706_0_.item;
@@ -82,6 +_,9 @@
          return Optional.ofNullable(p_234704_0_.tag);
       })).apply(p_234698_0_, ItemStack::new);
    });
+   private net.minecraftforge.registries.IRegistryDelegate<Item> delegate;
+   private CompoundNBT capNBT;
+
    private static final Logger LOGGER = LogManager.getLogger();
    public static final ItemStack EMPTY = new ItemStack((Item)null);
    public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = Util.make(new DecimalFormat("#.##"), (p_234699_0_) -> {
@@ -91,7 +_,7 @@
    private int count;
    private int popTime;
    @Deprecated
-   private final Item item;
+   private Item item;
    private CompoundNBT tag;
    private boolean emptyCacheFlag;
    private Entity entityRepresentation;
@@ -109,35 +_,70 @@
       p_i231596_3_.ifPresent(this::setTag);
    }
 
-   public ItemStack(IItemProvider p_i48204_1_, int p_i48204_2_) {
+   public ItemStack(IItemProvider p_i48204_1_, int p_i48204_2_) { this(p_i48204_1_, p_i48204_2_, (CompoundNBT) null); }
+   public ItemStack(IItemProvider p_i48204_1_, int p_i48204_2_, @Nullable CompoundNBT capNBT) {
+      super(ItemStack.class, true);
+      this.capNBT = capNBT;
       this.item = p_i48204_1_ == null ? null : p_i48204_1_.asItem();
+      this.delegate = p_i48204_1_ == null ? null : p_i48204_1_.asItem().delegate;
       this.count = p_i48204_2_;
-      if (this.item != null && this.item.canBeDepleted()) {
+      this.forgeInit();
+      if (this.item != null && this.item.isDamageable(this)) {
          this.setDamageValue(this.getDamageValue());
       }
 
       this.updateEmptyCacheFlag();
    }
+
+   // CraftBukkit start - Called to run this stack through the data converter to handle older storage methods and serialized items
+   public void convertStack(int version) {
+      if (version > 0 && version < CraftMagicNumbers.INSTANCE.getDataVersion()) {
+         CompoundNBT savedStack = new CompoundNBT();
+         this.save(savedStack);
+         savedStack = (CompoundNBT) MinecraftServer.getServer().fixerUpper.update(TypeReferences.ITEM_STACK, new Dynamic<>(NBTDynamicOps.INSTANCE, savedStack), version, CraftMagicNumbers.INSTANCE.getDataVersion()).getValue();
+         this.load(savedStack);
+      }
+   }
+   // CraftBukkit end
 
    private void updateEmptyCacheFlag() {
       this.emptyCacheFlag = false;
       this.emptyCacheFlag = this.isEmpty();
    }
 
+   // CatServer start - try fix biggerstacks mixin injection exception
+   private void load(CompoundNBT compound) {
+      this.loadNbt(compound);
+   }
+
+   // CraftBukkit start - break into own method
+   private CompoundNBT loadNbt(CompoundNBT compound) {
+      this.capNBT = compound.contains("ForgeCaps") ? compound.getCompound("ForgeCaps") : null;
+      Item rawItem =
+      this.item = Registry.ITEM.get(new ResourceLocation(compound.getString("id")));
+      this.delegate = rawItem.delegate;
+      this.count = compound.getByte("Count");
+      if (compound.contains("tag", 10)) {
+         // CraftBukkit start - make defensive copy as this data may be coming from the save thread
+         this.tag = compound.getCompound("tag").copy();
+         this.getItem().verifyTagAfterLoad(this.tag);
+         // CraftBukkit end
+      }
+
+      this.forgeInit();
+      if (this.getItem().canBeDepleted()) {
+         this.setDamageValue(this.getDamageValue());
+      }
+      return compound;
+   }
+
    private ItemStack(CompoundNBT p_i47263_1_) {
-      this.item = Registry.ITEM.get(new ResourceLocation(p_i47263_1_.getString("id")));
-      this.count = p_i47263_1_.getByte("Count");
-      if (p_i47263_1_.contains("tag", 10)) {
-         this.tag = p_i47263_1_.getCompound("tag");
-         this.getItem().verifyTagAfterLoad(p_i47263_1_);
-      }
-
-      if (this.getItem().canBeDepleted()) {
-         this.setDamageValue(this.getDamageValue());
-      }
-
+      super(ItemStack.class, true);
+      CompoundNBT nbt = this.loadNbt(p_i47263_1_);
+      this.count = nbt.getByte("Count");
       this.updateEmptyCacheFlag();
    }
+   // CatServer end
 
    public static ItemStack of(CompoundNBT p_199557_0_) {
       try {
@@ -167,10 +_,19 @@
    }
 
    public Item getItem() {
-      return this.emptyCacheFlag ? Items.AIR : this.item;
+      return this.emptyCacheFlag || this.delegate == null ? Items.AIR : this.delegate.get();
    }
 
    public ActionResultType useOn(ItemUseContext p_196084_1_) {
+      if (!p_196084_1_.getLevel().isClientSide) return net.minecraftforge.common.ForgeHooks.onPlaceItemIntoWorld(p_196084_1_);
+      return onItemUse(p_196084_1_, (c) -> getItem().useOn(p_196084_1_));
+   }
+
+   public ActionResultType onItemUseFirst(ItemUseContext p_196084_1_) {
+      return onItemUse(p_196084_1_, (c) -> getItem().onItemUseFirst(this, p_196084_1_));
+   }
+
+   private ActionResultType onItemUse(ItemUseContext p_196084_1_, java.util.function.Function<ItemUseContext, ActionResultType> callback) {
       PlayerEntity playerentity = p_196084_1_.getPlayer();
       BlockPos blockpos = p_196084_1_.getClickedPos();
       CachedBlockInfo cachedblockinfo = new CachedBlockInfo(p_196084_1_.getLevel(), blockpos, false);
@@ -178,7 +_,7 @@
          return ActionResultType.PASS;
       } else {
          Item item = this.getItem();
-         ActionResultType actionresulttype = item.useOn(p_196084_1_);
+         ActionResultType actionresulttype = callback.apply(p_196084_1_);
          if (playerentity != null && actionresulttype.consumesAction()) {
             playerentity.awardStat(Stats.ITEM_USED.get(item));
          }
@@ -206,12 +_,15 @@
       if (this.tag != null) {
          p_77955_1_.put("tag", this.tag.copy());
       }
-
+      CompoundNBT cnbt = this.serializeCaps();
+      if (cnbt != null && !cnbt.isEmpty()) {
+         p_77955_1_.put("ForgeCaps", cnbt);
+      }
       return p_77955_1_;
    }
 
    public int getMaxStackSize() {
-      return this.getItem().getMaxStackSize();
+      return this.getItem().getItemStackLimit(this);
    }
 
    public boolean isStackable() {
@@ -219,7 +_,7 @@
    }
 
    public boolean isDamageableItem() {
-      if (!this.emptyCacheFlag && this.getItem().getMaxDamage() > 0) {
+      if (!this.emptyCacheFlag && this.getItem().isDamageable(this)) {
          CompoundNBT compoundnbt = this.getTag();
          return compoundnbt == null || !compoundnbt.getBoolean("Unbreakable");
       } else {
@@ -228,19 +_,19 @@
    }
 
    public boolean isDamaged() {
-      return this.isDamageableItem() && this.getDamageValue() > 0;
+      return this.isDamageableItem() && getItem().isDamaged(this);
    }
 
    public int getDamageValue() {
-      return this.tag == null ? 0 : this.tag.getInt("Damage");
+      return this.getItem().getDamage(this);
    }
 
    public void setDamageValue(int p_196085_1_) {
-      this.getOrCreateTag().putInt("Damage", Math.max(0, p_196085_1_));
+      this.getItem().setDamage(this, p_196085_1_);
    }
 
    public int getMaxDamage() {
-      return this.getItem().getMaxDamage();
+      return this.getItem().getMaxDamage(this);
    }
 
    public boolean hurt(int p_96631_1_, Random p_96631_2_, @Nullable ServerPlayerEntity p_96631_3_) {
@@ -258,6 +_,19 @@
             }
 
             p_96631_1_ -= j;
+            // CraftBukkit start
+            if (p_96631_3_ != null) {
+               PlayerItemDamageEvent event = new PlayerItemDamageEvent(p_96631_3_.getBukkitEntity(), CraftItemStack.asCraftMirror(this), p_96631_1_);
+               event.getPlayer().getServer().getPluginManager().callEvent(event);
+               if (p_96631_1_ != event.getDamage() || event.isCancelled()) {
+                  event.getPlayer().updateInventory();
+               }
+               if (event.isCancelled()) {
+                  return false;
+               }
+               p_96631_1_ = event.getDamage();
+            }
+            // CraftBukkit end
             if (p_96631_1_ <= 0) {
                return false;
             }
@@ -276,9 +_,17 @@
    public <T extends LivingEntity> void hurtAndBreak(int p_222118_1_, T p_222118_2_, Consumer<T> p_222118_3_) {
       if (!p_222118_2_.level.isClientSide && (!(p_222118_2_ instanceof PlayerEntity) || !((PlayerEntity)p_222118_2_).abilities.instabuild)) {
          if (this.isDamageableItem()) {
+            p_222118_1_ = this.getItem().damageItem(this, p_222118_1_, p_222118_2_, p_222118_3_);
             if (this.hurt(p_222118_1_, p_222118_2_.getRandom(), p_222118_2_ instanceof ServerPlayerEntity ? (ServerPlayerEntity)p_222118_2_ : null)) {
                p_222118_3_.accept(p_222118_2_);
                Item item = this.getItem();
+
+               // CraftBukkit start - Check for item breaking
+               if (this.count == 1 && p_222118_2_ instanceof PlayerEntity) {
+                  org.bukkit.craftbukkit.v1_16_R3.event.CraftEventFactory.callPlayerItemBreakEvent((PlayerEntity) p_222118_2_, this);
+               }
+               // CraftBukkit end
+
                this.shrink(1);
                if (p_222118_2_ instanceof PlayerEntity) {
                   ((PlayerEntity)p_222118_2_).awardStat(Stats.ITEM_BROKEN.get(item));
@@ -308,7 +_,7 @@
    }
 
    public boolean isCorrectToolForDrops(BlockState p_150998_1_) {
-      return this.getItem().isCorrectToolForDrops(p_150998_1_);
+      return this.getItem().canHarvestBlock(this, p_150998_1_);
    }
 
    public ActionResultType interactLivingEntity(PlayerEntity p_111282_1_, LivingEntity p_111282_2_, Hand p_111282_3_) {
@@ -319,7 +_,7 @@
       if (this.isEmpty()) {
          return EMPTY;
       } else {
-         ItemStack itemstack = new ItemStack(this.getItem(), this.count);
+         ItemStack itemstack = new ItemStack(this.getItem(), this.count, this.serializeCaps());
          itemstack.setPopTime(this.getPopTime());
          if (this.tag != null) {
             itemstack.tag = this.tag.copy();
@@ -336,7 +_,7 @@
          if (p_77970_0_.tag == null && p_77970_1_.tag != null) {
             return false;
          } else {
-            return p_77970_0_.tag == null || p_77970_0_.tag.equals(p_77970_1_.tag);
+            return (p_77970_0_.tag == null || p_77970_0_.tag.equals(p_77970_1_.tag)) && p_77970_0_.areCapsCompatible(p_77970_1_);
          }
       } else {
          return false;
@@ -359,7 +_,7 @@
       } else if (this.tag == null && p_77959_1_.tag != null) {
          return false;
       } else {
-         return this.tag == null || this.tag.equals(p_77959_1_.tag);
+         return (this.tag == null || this.tag.equals(p_77959_1_.tag)) && this.areCapsCompatible(p_77959_1_);
       }
    }
 
@@ -435,6 +_,16 @@
       return !this.emptyCacheFlag && this.tag != null && !this.tag.isEmpty();
    }
 
+   // CraftBukkit start
+   @Nullable
+   private CompoundNBT getTagClone() {
+      return this.tag == null ? null : this.tag.copy();
+   }
+   private void setTagClone(@Nullable CompoundNBT nbtttagcompound) {
+      this.setTag(nbtttagcompound == null ? null : nbtttagcompound.copy());
+   }
+   // CraftBukkit end
+
    @Nullable
    public CompoundNBT getTag() {
       return this.tag;
@@ -479,7 +_,7 @@
 
    public void setTag(@Nullable CompoundNBT p_77982_1_) {
       this.tag = p_77982_1_;
-      if (this.getItem().canBeDepleted()) {
+      if (this.getItem().isDamageable(this)) {
          this.setDamageValue(this.getDamageValue());
       }
 
@@ -673,6 +_,7 @@
          }
       }
 
+      net.minecraftforge.event.ForgeEventFactory.onItemTooltip(this, p_82840_1_, list, p_82840_2_);
       return list;
    }
 
@@ -795,6 +_,12 @@
    }
 
    public void setRepairCost(int p_82841_1_) {
+      // CraftBukkit start - remove RepairCost tag when 0 (SPIGOT-3945)
+      if (p_82841_1_ == 0) {
+         this.removeTagKey("RepairCost");
+         return;
+      }
+      // CraftBukkit end
       this.getOrCreateTag().putInt("RepairCost", p_82841_1_);
    }
 
@@ -817,9 +_,10 @@
             }
          }
       } else {
-         multimap = this.getItem().getDefaultAttributeModifiers(p_111283_1_);
+         multimap = this.getItem().getAttributeModifiers(p_111283_1_, this);
       }
 
+      multimap = net.minecraftforge.common.ForgeHooks.getAttributeModifiers(this, p_111283_1_, multimap);
       return multimap;
    }
 
@@ -839,6 +_,14 @@
       listnbt.add(compoundnbt);
    }
 
+   // CraftBukkit start
+   @Deprecated
+   public void setItem(Item item) {
+      this.item = item;
+      this.delegate = item.delegate;
+   }
+   // CraftBukkit end
+
    public ITextComponent getDisplayName() {
       IFormattableTextComponent iformattabletextcomponent = (new StringTextComponent("")).append(this.getHoverName());
       if (this.hasCustomHoverName()) {
@@ -952,6 +_,23 @@
 
    public boolean isEdible() {
       return this.getItem().isEdible();
+   }
+
+   // FORGE START
+   public void deserializeNBT(CompoundNBT nbt) {
+      final ItemStack itemStack = ItemStack.of(nbt);
+      getStack().setTag(itemStack.getTag());
+      if (itemStack.capNBT != null) deserializeCaps(itemStack.capNBT);
+   }
+
+   /**
+    * Set up forge's ItemStack additions.
+    */
+   private void forgeInit() {
+      if (this.delegate != null) {
+         this.gatherCapabilities(() -> item.initCapabilities(this, this.capNBT));
+         if (this.capNBT != null) deserializeCaps(this.capNBT);
+      }
    }
 
    public SoundEvent getDrinkingSound() {
