--- a/net/minecraft/item/BlockItem.java
+++ b/net/minecraft/item/BlockItem.java
@@ -25,6 +_,9 @@
 import net.minecraft.world.World;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import org.bukkit.craftbukkit.v1_16_R3.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_16_R3.block.data.CraftBlockData;
+import org.bukkit.event.block.BlockCanBuildEvent;
 
 public class BlockItem extends Item {
    @Deprecated
@@ -69,8 +_,8 @@
                   }
                }
 
-               SoundType soundtype = blockstate1.getSoundType();
-               world.playSound(playerentity, blockpos, this.getPlaceSound(blockstate1), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
+               SoundType soundtype = blockstate1.getSoundType(world, blockpos, p_195942_1_.getPlayer());
+               world.playSound(playerentity, blockpos, this.getPlaceSound(blockstate1, world, blockpos, p_195942_1_.getPlayer()), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
                if (playerentity == null || !playerentity.abilities.instabuild) {
                   itemstack.shrink(1);
                }
@@ -81,10 +_,16 @@
       }
    }
 
+   @Deprecated //Forge: Use more sensitive version {@link BlockItem#getPlaceSound(BlockState, IBlockReader, BlockPos, Entity) }
    protected SoundEvent getPlaceSound(BlockState p_219983_1_) {
       return p_219983_1_.getSoundType().getPlaceSound();
    }
 
+   //Forge: Sensitive version of BlockItem#getPlaceSound
+   protected SoundEvent getPlaceSound(BlockState state, World world, BlockPos pos, PlayerEntity entity) {
+      return state.getSoundType(world, pos, entity).getPlaceSound();
+   }
+
    @Nullable
    public BlockItemUseContext updatePlacementContext(BlockItemUseContext p_219984_1_) {
       return p_219984_1_;
@@ -123,6 +_,22 @@
       return blockstate;
    }
 
+   public static BlockState getBlockState(BlockState iblockdata, CompoundNBT nbttagcompound1) {
+      BlockState iblockdata1 = iblockdata;
+      // CraftBukkit end
+      StateContainer<Block, BlockState> statecontainer = iblockdata.getBlock().getStateDefinition();
+
+      for (String s : nbttagcompound1.getAllKeys()) {
+         Property<?> property = statecontainer.getProperty(s);
+         if (property != null) {
+            String s1 = nbttagcompound1.get(s).getAsString();
+            iblockdata1 = updateState(iblockdata1, property, s1);
+         }
+      }
+
+      return iblockdata1;
+   }
+
    private static <T extends Comparable<T>> BlockState updateState(BlockState p_219988_0_, Property<T> p_219988_1_, String p_219988_2_) {
       return p_219988_1_.getValue(p_219988_2_).map((p_219986_2_) -> {
          return p_219988_0_.setValue(p_219988_1_, p_219986_2_);
@@ -132,7 +_,13 @@
    protected boolean canPlace(BlockItemUseContext p_195944_1_, BlockState p_195944_2_) {
       PlayerEntity playerentity = p_195944_1_.getPlayer();
       ISelectionContext iselectioncontext = playerentity == null ? ISelectionContext.empty() : ISelectionContext.of(playerentity);
-      return (!this.mustSurvive() || p_195944_2_.canSurvive(p_195944_1_.getLevel(), p_195944_1_.getClickedPos())) && p_195944_1_.getLevel().isUnobstructed(p_195944_2_, p_195944_1_.getClickedPos(), iselectioncontext);
+      // CraftBukkit start - store default return
+      boolean defaultReturn = (!this.mustSurvive() || p_195944_2_.canSurvive(p_195944_1_.getLevel(), p_195944_1_.getClickedPos())) && p_195944_1_.getLevel().isUnobstructed(p_195944_2_, p_195944_1_.getClickedPos(), iselectioncontext);
+      org.bukkit.entity.Player player = (p_195944_1_.getPlayer() instanceof ServerPlayerEntity) ? (org.bukkit.entity.Player) p_195944_1_.getPlayer().getBukkitEntity() : null;
+      BlockCanBuildEvent event = new BlockCanBuildEvent(CraftBlock.at(p_195944_1_.getLevel(), p_195944_1_.getClickedPos()), player, CraftBlockData.fromData(p_195944_2_), defaultReturn);
+      p_195944_1_.getLevel().getCBServer().getPluginManager().callEvent(event);
+      return event.isBuildable();
+      // CraftBukkit end
    }
 
    protected boolean mustSurvive() {
@@ -152,7 +_,7 @@
          if (compoundnbt != null) {
             TileEntity tileentity = p_179224_0_.getBlockEntity(p_179224_2_);
             if (tileentity != null) {
-               if (!p_179224_0_.isClientSide && tileentity.onlyOpCanSetNbt() && (p_179224_1_ == null || !p_179224_1_.canUseGameMasterBlocks())) {
+               if (!p_179224_0_.isClientSide && tileentity.onlyOpCanSetNbt() && (p_179224_1_ == null || !(p_179224_1_.canUseGameMasterBlocks() || (p_179224_1_.abilities.instabuild && p_179224_1_.getBukkitEntity().hasPermission("minecraft.nbt.place"))))) { // Spigot - add permission
                   return false;
                }
 
@@ -192,10 +_,18 @@
    }
 
    public Block getBlock() {
+      return this.getBlockRaw() == null ? null : this.getBlockRaw().delegate.get();
+   }
+
+   private Block getBlockRaw() {
       return this.block;
    }
 
    public void registerBlocks(Map<Block, Item> p_195946_1_, Item p_195946_2_) {
       p_195946_1_.put(this.getBlock(), p_195946_2_);
+   }
+
+   public void removeFromBlockToItemMap(Map<Block, Item> blockToItemMap, Item itemIn) {
+      blockToItemMap.remove(this.getBlock());
    }
 }
