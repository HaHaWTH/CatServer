--- a/net/minecraft/item/crafting/ShapelessRecipe.java
+++ b/net/minecraft/item/crafting/ShapelessRecipe.java
@@ -4,6 +_,7 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import it.unimi.dsi.fastutil.ints.IntList;
+import java.util.Iterator;
 import net.minecraft.inventory.CraftingInventory;
 import net.minecraft.item.ItemStack;
 import net.minecraft.network.PacketBuffer;
@@ -11,19 +_,37 @@
 import net.minecraft.util.NonNullList;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.World;
+import org.bukkit.craftbukkit.v1_16_R3.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.v1_16_R3.inventory.CraftRecipe;
+import org.bukkit.craftbukkit.v1_16_R3.inventory.CraftShapelessRecipe;
 
 public class ShapelessRecipe implements ICraftingRecipe {
    private final ResourceLocation id;
    private final String group;
    private final ItemStack result;
    private final NonNullList<Ingredient> ingredients;
+   private final boolean isSimple;
 
    public ShapelessRecipe(ResourceLocation p_i48161_1_, String p_i48161_2_, ItemStack p_i48161_3_, NonNullList<Ingredient> p_i48161_4_) {
       this.id = p_i48161_1_;
       this.group = p_i48161_2_;
       this.result = p_i48161_3_;
       this.ingredients = p_i48161_4_;
-   }
+      this.isSimple = p_i48161_4_.stream().allMatch(Ingredient::isSimple);
+   }
+
+   // CraftBukkit start
+   @Override
+   public org.bukkit.inventory.ShapelessRecipe toBukkitRecipe() {
+      CraftItemStack result = CraftItemStack.asCraftCopy(CraftItemStack.asBukkitCopy(this.getResultItem()));
+      CraftShapelessRecipe recipe = new CraftShapelessRecipe(result, this);
+      recipe.setGroup(this.group);
+      for (Ingredient list : this.ingredients) {
+         recipe.addIngredient(CraftRecipe.toBukkit(list));
+      }
+      return recipe;
+   }
+   // CraftBukkit end
 
    public ResourceLocation getId() {
       return this.id;
@@ -33,7 +_,7 @@
       return IRecipeSerializer.SHAPELESS_RECIPE;
    }
 
-   public String getGroup() {
+    public String getGroup() {
       return this.group;
    }
 
@@ -47,17 +_,56 @@
 
    public boolean matches(CraftingInventory p_77569_1_, World p_77569_2_) {
       RecipeItemHelper recipeitemhelper = new RecipeItemHelper();
+      java.util.List<ItemStack> inputs = new java.util.ArrayList<>();
       int i = 0;
 
+      // Paper start
+      java.util.List<ItemStack> providedItems = new java.util.ArrayList<>();
+      co.aikar.util.Counter<ItemStack> matchedProvided = new co.aikar.util.Counter<>();
+      co.aikar.util.Counter<Ingredient> matchedIngredients = new co.aikar.util.Counter<>();
+      // Paper end
       for(int j = 0; j < p_77569_1_.getContainerSize(); ++j) {
          ItemStack itemstack = p_77569_1_.getItem(j);
          if (!itemstack.isEmpty()) {
-            ++i;
-            recipeitemhelper.accountStack(itemstack, 1);
-         }
-      }
-
-      return i == this.ingredients.size() && recipeitemhelper.canCraft(this, (IntList)null);
+            if (isSimple) {
+               // Paper start
+               itemstack = itemstack.copy();
+               providedItems.add(itemstack);
+               for (Ingredient ingredient : ingredients) {
+                  if (ingredient.test(itemstack)) {
+                     matchedProvided.increment(itemstack);
+                     matchedIngredients.increment(ingredient);
+                  }
+               }
+               // Paper end
+            } else {
+               inputs.add(itemstack);
+            }
+         }
+      }
+
+      //return i == this.recipeItems.size() && (isSimple ? recipeitemhelper.canCraft(this, (IntList)null) : net.minecraftforge.common.util.RecipeMatcher.findMatches(inputs,  this.recipeItems) != null);
+      // Paper start
+      if (isSimple && (matchedProvided.isEmpty() || matchedIngredients.isEmpty())) {
+         return false;
+      }
+      java.util.List<Ingredient> ingredients = new java.util.ArrayList<>(this.ingredients);
+      providedItems.sort(java.util.Comparator.comparingInt((ItemStack c) -> (int) matchedProvided.getCount(c)).reversed());
+      ingredients.sort(java.util.Comparator.comparingInt((Ingredient c) -> (int) matchedIngredients.getCount(c)));
+
+      PROVIDED:
+      for (ItemStack provided : providedItems) {
+         for (Iterator<Ingredient> itIngredient = ingredients.iterator(); itIngredient.hasNext(); ) {
+            Ingredient ingredient = itIngredient.next();
+            if (ingredient.test(provided)) {
+               itIngredient.remove();
+               continue PROVIDED;
+            }
+         }
+         return false;
+      }
+      return isSimple ? ingredients.isEmpty() : net.minecraftforge.common.util.RecipeMatcher.findMatches(inputs,  this.ingredients) != null;
+      // Paper end
    }
 
    public ItemStack assemble(CraftingInventory p_77572_1_) {
@@ -68,14 +_,15 @@
       return p_194133_1_ * p_194133_2_ >= this.ingredients.size();
    }
 
-   public static class Serializer implements IRecipeSerializer<ShapelessRecipe> {
+   public static class Serializer extends net.minecraftforge.registries.ForgeRegistryEntry<IRecipeSerializer<?>> implements IRecipeSerializer<ShapelessRecipe> {
+      private static final ResourceLocation NAME = new ResourceLocation("minecraft", "crafting_shapeless");
       public ShapelessRecipe fromJson(ResourceLocation p_199425_1_, JsonObject p_199425_2_) {
          String s = JSONUtils.getAsString(p_199425_2_, "group", "");
          NonNullList<Ingredient> nonnulllist = itemsFromJson(JSONUtils.getAsJsonArray(p_199425_2_, "ingredients"));
          if (nonnulllist.isEmpty()) {
             throw new JsonParseException("No ingredients for shapeless recipe");
-         } else if (nonnulllist.size() > 9) {
-            throw new JsonParseException("Too many ingredients for shapeless recipe");
+         } else if (nonnulllist.size() > ShapedRecipe.MAX_WIDTH * ShapedRecipe.MAX_HEIGHT) {
+            throw new JsonParseException("Too many ingredients for shapeless recipe the max is " + (ShapedRecipe.MAX_WIDTH * ShapedRecipe.MAX_HEIGHT));
          } else {
             ItemStack itemstack = ShapedRecipe.itemFromJson(JSONUtils.getAsJsonObject(p_199425_2_, "result"));
             return new ShapelessRecipe(p_199425_1_, s, itemstack, nonnulllist);
